// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package action

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ActionServiceClient is the client API for ActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionServiceClient interface {
	//
	// Send command to arm the drone.
	//
	// Arming a drone normally causes motors to spin at idle.
	// Before arming take all safety precautions and stand clear of the drone!
	Arm(ctx context.Context, in *ArmRequest, opts ...grpc.CallOption) (*ArmResponse, error)
	//
	// Send command to disarm the drone.
	//
	// This will disarm a drone that considers itself landed. If flying, the drone should
	// reject the disarm command. Disarming means that all motors will stop.
	Disarm(ctx context.Context, in *DisarmRequest, opts ...grpc.CallOption) (*DisarmResponse, error)
	//
	// Send command to take off and hover.
	//
	// This switches the drone into position control mode and commands
	// it to take off and hover at the takeoff altitude.
	//
	// Note that the vehicle must be armed before it can take off.
	Takeoff(ctx context.Context, in *TakeoffRequest, opts ...grpc.CallOption) (*TakeoffResponse, error)
	//
	// Send command to land at the current position.
	//
	// This switches the drone to 'Land' flight mode.
	Land(ctx context.Context, in *LandRequest, opts ...grpc.CallOption) (*LandResponse, error)
	//
	// Send command to reboot the drone components.
	//
	// This will reboot the autopilot, companion computer, camera and gimbal.
	Reboot(ctx context.Context, in *RebootRequest, opts ...grpc.CallOption) (*RebootResponse, error)
	//
	// Send command to shut down the drone components.
	//
	// This will shut down the autopilot, onboard computer, camera and gimbal.
	// This command should only be used when the autopilot is disarmed and autopilots commonly
	// reject it if they are not already ready to shut down.
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	//
	// Send command to terminate the drone.
	//
	// This will run the terminate routine as configured on the drone (e.g. disarm and open the parachute).
	Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error)
	//
	// Send command to kill the drone.
	//
	// This will disarm a drone irrespective of whether it is landed or flying.
	// Note that the drone will fall out of the sky if this command is used while flying.
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error)
	//
	// Send command to return to the launch (takeoff) position and land.
	//
	// This switches the drone into [Return mode](https://docs.px4.io/master/en/flight_modes/return.html) which
	// generally means it will rise up to a certain altitude to clear any obstacles before heading
	// back to the launch (takeoff) position and land there.
	ReturnToLaunch(ctx context.Context, in *ReturnToLaunchRequest, opts ...grpc.CallOption) (*ReturnToLaunchResponse, error)
	//
	// Send command to move the vehicle to a specific global position.
	//
	// The latitude and longitude are given in degrees (WGS84 frame) and the altitude
	// in meters AMSL (above mean sea level).
	//
	// The yaw angle is in degrees (frame is NED, 0 is North, positive is clockwise).
	GotoLocation(ctx context.Context, in *GotoLocationRequest, opts ...grpc.CallOption) (*GotoLocationResponse, error)
	//
	// Send command to transition the drone to fixedwing.
	//
	// The associated action will only be executed for VTOL vehicles (on other vehicle types the
	// command will fail). The command will succeed if called when the vehicle
	// is already in fixedwing mode.
	TransitionToFixedwing(ctx context.Context, in *TransitionToFixedwingRequest, opts ...grpc.CallOption) (*TransitionToFixedwingResponse, error)
	//
	// Send command to transition the drone to multicopter.
	//
	// The associated action will only be executed for VTOL vehicles (on other vehicle types the
	// command will fail). The command will succeed if called when the vehicle
	// is already in multicopter mode.
	TransitionToMulticopter(ctx context.Context, in *TransitionToMulticopterRequest, opts ...grpc.CallOption) (*TransitionToMulticopterResponse, error)
	//
	// Get the takeoff altitude (in meters above ground).
	GetTakeoffAltitude(ctx context.Context, in *GetTakeoffAltitudeRequest, opts ...grpc.CallOption) (*GetTakeoffAltitudeResponse, error)
	//
	// Set takeoff altitude (in meters above ground).
	SetTakeoffAltitude(ctx context.Context, in *SetTakeoffAltitudeRequest, opts ...grpc.CallOption) (*SetTakeoffAltitudeResponse, error)
	//
	// Get the vehicle maximum speed (in metres/second).
	GetMaximumSpeed(ctx context.Context, in *GetMaximumSpeedRequest, opts ...grpc.CallOption) (*GetMaximumSpeedResponse, error)
	//
	// Set vehicle maximum speed (in metres/second).
	SetMaximumSpeed(ctx context.Context, in *SetMaximumSpeedRequest, opts ...grpc.CallOption) (*SetMaximumSpeedResponse, error)
	//
	// Get the return to launch minimum return altitude (in meters).
	GetReturnToLaunchAltitude(ctx context.Context, in *GetReturnToLaunchAltitudeRequest, opts ...grpc.CallOption) (*GetReturnToLaunchAltitudeResponse, error)
	//
	// Set the return to launch minimum return altitude (in meters).
	SetReturnToLaunchAltitude(ctx context.Context, in *SetReturnToLaunchAltitudeRequest, opts ...grpc.CallOption) (*SetReturnToLaunchAltitudeResponse, error)
}

type actionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionServiceClient(cc grpc.ClientConnInterface) ActionServiceClient {
	return &actionServiceClient{cc}
}

func (c *actionServiceClient) Arm(ctx context.Context, in *ArmRequest, opts ...grpc.CallOption) (*ArmResponse, error) {
	out := new(ArmResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/Arm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Disarm(ctx context.Context, in *DisarmRequest, opts ...grpc.CallOption) (*DisarmResponse, error) {
	out := new(DisarmResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/Disarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Takeoff(ctx context.Context, in *TakeoffRequest, opts ...grpc.CallOption) (*TakeoffResponse, error) {
	out := new(TakeoffResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/Takeoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Land(ctx context.Context, in *LandRequest, opts ...grpc.CallOption) (*LandResponse, error) {
	out := new(LandResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/Land", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Reboot(ctx context.Context, in *RebootRequest, opts ...grpc.CallOption) (*RebootResponse, error) {
	out := new(RebootResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error) {
	out := new(TerminateResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/Terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error) {
	out := new(KillResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) ReturnToLaunch(ctx context.Context, in *ReturnToLaunchRequest, opts ...grpc.CallOption) (*ReturnToLaunchResponse, error) {
	out := new(ReturnToLaunchResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/ReturnToLaunch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) GotoLocation(ctx context.Context, in *GotoLocationRequest, opts ...grpc.CallOption) (*GotoLocationResponse, error) {
	out := new(GotoLocationResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/GotoLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) TransitionToFixedwing(ctx context.Context, in *TransitionToFixedwingRequest, opts ...grpc.CallOption) (*TransitionToFixedwingResponse, error) {
	out := new(TransitionToFixedwingResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/TransitionToFixedwing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) TransitionToMulticopter(ctx context.Context, in *TransitionToMulticopterRequest, opts ...grpc.CallOption) (*TransitionToMulticopterResponse, error) {
	out := new(TransitionToMulticopterResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/TransitionToMulticopter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) GetTakeoffAltitude(ctx context.Context, in *GetTakeoffAltitudeRequest, opts ...grpc.CallOption) (*GetTakeoffAltitudeResponse, error) {
	out := new(GetTakeoffAltitudeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/GetTakeoffAltitude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) SetTakeoffAltitude(ctx context.Context, in *SetTakeoffAltitudeRequest, opts ...grpc.CallOption) (*SetTakeoffAltitudeResponse, error) {
	out := new(SetTakeoffAltitudeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/SetTakeoffAltitude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) GetMaximumSpeed(ctx context.Context, in *GetMaximumSpeedRequest, opts ...grpc.CallOption) (*GetMaximumSpeedResponse, error) {
	out := new(GetMaximumSpeedResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/GetMaximumSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) SetMaximumSpeed(ctx context.Context, in *SetMaximumSpeedRequest, opts ...grpc.CallOption) (*SetMaximumSpeedResponse, error) {
	out := new(SetMaximumSpeedResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/SetMaximumSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) GetReturnToLaunchAltitude(ctx context.Context, in *GetReturnToLaunchAltitudeRequest, opts ...grpc.CallOption) (*GetReturnToLaunchAltitudeResponse, error) {
	out := new(GetReturnToLaunchAltitudeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/GetReturnToLaunchAltitude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) SetReturnToLaunchAltitude(ctx context.Context, in *SetReturnToLaunchAltitudeRequest, opts ...grpc.CallOption) (*SetReturnToLaunchAltitudeResponse, error) {
	out := new(SetReturnToLaunchAltitudeResponse)
	err := c.cc.Invoke(ctx, "/mavsdk.rpc.action.ActionService/SetReturnToLaunchAltitude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServiceServer is the server API for ActionService service.
type ActionServiceServer interface {
	//
	// Send command to arm the drone.
	//
	// Arming a drone normally causes motors to spin at idle.
	// Before arming take all safety precautions and stand clear of the drone!
	Arm(context.Context, *ArmRequest) (*ArmResponse, error)
	//
	// Send command to disarm the drone.
	//
	// This will disarm a drone that considers itself landed. If flying, the drone should
	// reject the disarm command. Disarming means that all motors will stop.
	Disarm(context.Context, *DisarmRequest) (*DisarmResponse, error)
	//
	// Send command to take off and hover.
	//
	// This switches the drone into position control mode and commands
	// it to take off and hover at the takeoff altitude.
	//
	// Note that the vehicle must be armed before it can take off.
	Takeoff(context.Context, *TakeoffRequest) (*TakeoffResponse, error)
	//
	// Send command to land at the current position.
	//
	// This switches the drone to 'Land' flight mode.
	Land(context.Context, *LandRequest) (*LandResponse, error)
	//
	// Send command to reboot the drone components.
	//
	// This will reboot the autopilot, companion computer, camera and gimbal.
	Reboot(context.Context, *RebootRequest) (*RebootResponse, error)
	//
	// Send command to shut down the drone components.
	//
	// This will shut down the autopilot, onboard computer, camera and gimbal.
	// This command should only be used when the autopilot is disarmed and autopilots commonly
	// reject it if they are not already ready to shut down.
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	//
	// Send command to terminate the drone.
	//
	// This will run the terminate routine as configured on the drone (e.g. disarm and open the parachute).
	Terminate(context.Context, *TerminateRequest) (*TerminateResponse, error)
	//
	// Send command to kill the drone.
	//
	// This will disarm a drone irrespective of whether it is landed or flying.
	// Note that the drone will fall out of the sky if this command is used while flying.
	Kill(context.Context, *KillRequest) (*KillResponse, error)
	//
	// Send command to return to the launch (takeoff) position and land.
	//
	// This switches the drone into [Return mode](https://docs.px4.io/master/en/flight_modes/return.html) which
	// generally means it will rise up to a certain altitude to clear any obstacles before heading
	// back to the launch (takeoff) position and land there.
	ReturnToLaunch(context.Context, *ReturnToLaunchRequest) (*ReturnToLaunchResponse, error)
	//
	// Send command to move the vehicle to a specific global position.
	//
	// The latitude and longitude are given in degrees (WGS84 frame) and the altitude
	// in meters AMSL (above mean sea level).
	//
	// The yaw angle is in degrees (frame is NED, 0 is North, positive is clockwise).
	GotoLocation(context.Context, *GotoLocationRequest) (*GotoLocationResponse, error)
	//
	// Send command to transition the drone to fixedwing.
	//
	// The associated action will only be executed for VTOL vehicles (on other vehicle types the
	// command will fail). The command will succeed if called when the vehicle
	// is already in fixedwing mode.
	TransitionToFixedwing(context.Context, *TransitionToFixedwingRequest) (*TransitionToFixedwingResponse, error)
	//
	// Send command to transition the drone to multicopter.
	//
	// The associated action will only be executed for VTOL vehicles (on other vehicle types the
	// command will fail). The command will succeed if called when the vehicle
	// is already in multicopter mode.
	TransitionToMulticopter(context.Context, *TransitionToMulticopterRequest) (*TransitionToMulticopterResponse, error)
	//
	// Get the takeoff altitude (in meters above ground).
	GetTakeoffAltitude(context.Context, *GetTakeoffAltitudeRequest) (*GetTakeoffAltitudeResponse, error)
	//
	// Set takeoff altitude (in meters above ground).
	SetTakeoffAltitude(context.Context, *SetTakeoffAltitudeRequest) (*SetTakeoffAltitudeResponse, error)
	//
	// Get the vehicle maximum speed (in metres/second).
	GetMaximumSpeed(context.Context, *GetMaximumSpeedRequest) (*GetMaximumSpeedResponse, error)
	//
	// Set vehicle maximum speed (in metres/second).
	SetMaximumSpeed(context.Context, *SetMaximumSpeedRequest) (*SetMaximumSpeedResponse, error)
	//
	// Get the return to launch minimum return altitude (in meters).
	GetReturnToLaunchAltitude(context.Context, *GetReturnToLaunchAltitudeRequest) (*GetReturnToLaunchAltitudeResponse, error)
	//
	// Set the return to launch minimum return altitude (in meters).
	SetReturnToLaunchAltitude(context.Context, *SetReturnToLaunchAltitudeRequest) (*SetReturnToLaunchAltitudeResponse, error)
}

// UnimplementedActionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedActionServiceServer struct {
}

func (*UnimplementedActionServiceServer) Arm(context.Context, *ArmRequest) (*ArmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Arm not implemented")
}
func (*UnimplementedActionServiceServer) Disarm(context.Context, *DisarmRequest) (*DisarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disarm not implemented")
}
func (*UnimplementedActionServiceServer) Takeoff(context.Context, *TakeoffRequest) (*TakeoffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Takeoff not implemented")
}
func (*UnimplementedActionServiceServer) Land(context.Context, *LandRequest) (*LandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Land not implemented")
}
func (*UnimplementedActionServiceServer) Reboot(context.Context, *RebootRequest) (*RebootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reboot not implemented")
}
func (*UnimplementedActionServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (*UnimplementedActionServiceServer) Terminate(context.Context, *TerminateRequest) (*TerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (*UnimplementedActionServiceServer) Kill(context.Context, *KillRequest) (*KillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (*UnimplementedActionServiceServer) ReturnToLaunch(context.Context, *ReturnToLaunchRequest) (*ReturnToLaunchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnToLaunch not implemented")
}
func (*UnimplementedActionServiceServer) GotoLocation(context.Context, *GotoLocationRequest) (*GotoLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GotoLocation not implemented")
}
func (*UnimplementedActionServiceServer) TransitionToFixedwing(context.Context, *TransitionToFixedwingRequest) (*TransitionToFixedwingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransitionToFixedwing not implemented")
}
func (*UnimplementedActionServiceServer) TransitionToMulticopter(context.Context, *TransitionToMulticopterRequest) (*TransitionToMulticopterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransitionToMulticopter not implemented")
}
func (*UnimplementedActionServiceServer) GetTakeoffAltitude(context.Context, *GetTakeoffAltitudeRequest) (*GetTakeoffAltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTakeoffAltitude not implemented")
}
func (*UnimplementedActionServiceServer) SetTakeoffAltitude(context.Context, *SetTakeoffAltitudeRequest) (*SetTakeoffAltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTakeoffAltitude not implemented")
}
func (*UnimplementedActionServiceServer) GetMaximumSpeed(context.Context, *GetMaximumSpeedRequest) (*GetMaximumSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaximumSpeed not implemented")
}
func (*UnimplementedActionServiceServer) SetMaximumSpeed(context.Context, *SetMaximumSpeedRequest) (*SetMaximumSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaximumSpeed not implemented")
}
func (*UnimplementedActionServiceServer) GetReturnToLaunchAltitude(context.Context, *GetReturnToLaunchAltitudeRequest) (*GetReturnToLaunchAltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReturnToLaunchAltitude not implemented")
}
func (*UnimplementedActionServiceServer) SetReturnToLaunchAltitude(context.Context, *SetReturnToLaunchAltitudeRequest) (*SetReturnToLaunchAltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReturnToLaunchAltitude not implemented")
}

func RegisterActionServiceServer(s *grpc.Server, srv ActionServiceServer) {
	s.RegisterService(&_ActionService_serviceDesc, srv)
}

func _ActionService_Arm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Arm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/Arm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Arm(ctx, req.(*ArmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Disarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Disarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/Disarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Disarm(ctx, req.(*DisarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Takeoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Takeoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/Takeoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Takeoff(ctx, req.(*TakeoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Land_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Land(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/Land",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Land(ctx, req.(*LandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Reboot(ctx, req.(*RebootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/Terminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Terminate(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_ReturnToLaunch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnToLaunchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).ReturnToLaunch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/ReturnToLaunch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).ReturnToLaunch(ctx, req.(*ReturnToLaunchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_GotoLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GotoLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GotoLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/GotoLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GotoLocation(ctx, req.(*GotoLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_TransitionToFixedwing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionToFixedwingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).TransitionToFixedwing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/TransitionToFixedwing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).TransitionToFixedwing(ctx, req.(*TransitionToFixedwingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_TransitionToMulticopter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionToMulticopterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).TransitionToMulticopter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/TransitionToMulticopter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).TransitionToMulticopter(ctx, req.(*TransitionToMulticopterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_GetTakeoffAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTakeoffAltitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetTakeoffAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/GetTakeoffAltitude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetTakeoffAltitude(ctx, req.(*GetTakeoffAltitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_SetTakeoffAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTakeoffAltitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).SetTakeoffAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/SetTakeoffAltitude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).SetTakeoffAltitude(ctx, req.(*SetTakeoffAltitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_GetMaximumSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaximumSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetMaximumSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/GetMaximumSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetMaximumSpeed(ctx, req.(*GetMaximumSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_SetMaximumSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaximumSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).SetMaximumSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/SetMaximumSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).SetMaximumSpeed(ctx, req.(*SetMaximumSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_GetReturnToLaunchAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReturnToLaunchAltitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).GetReturnToLaunchAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/GetReturnToLaunchAltitude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).GetReturnToLaunchAltitude(ctx, req.(*GetReturnToLaunchAltitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_SetReturnToLaunchAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReturnToLaunchAltitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).SetReturnToLaunchAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mavsdk.rpc.action.ActionService/SetReturnToLaunchAltitude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).SetReturnToLaunchAltitude(ctx, req.(*SetReturnToLaunchAltitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.action.ActionService",
	HandlerType: (*ActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Arm",
			Handler:    _ActionService_Arm_Handler,
		},
		{
			MethodName: "Disarm",
			Handler:    _ActionService_Disarm_Handler,
		},
		{
			MethodName: "Takeoff",
			Handler:    _ActionService_Takeoff_Handler,
		},
		{
			MethodName: "Land",
			Handler:    _ActionService_Land_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _ActionService_Reboot_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _ActionService_Shutdown_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _ActionService_Terminate_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _ActionService_Kill_Handler,
		},
		{
			MethodName: "ReturnToLaunch",
			Handler:    _ActionService_ReturnToLaunch_Handler,
		},
		{
			MethodName: "GotoLocation",
			Handler:    _ActionService_GotoLocation_Handler,
		},
		{
			MethodName: "TransitionToFixedwing",
			Handler:    _ActionService_TransitionToFixedwing_Handler,
		},
		{
			MethodName: "TransitionToMulticopter",
			Handler:    _ActionService_TransitionToMulticopter_Handler,
		},
		{
			MethodName: "GetTakeoffAltitude",
			Handler:    _ActionService_GetTakeoffAltitude_Handler,
		},
		{
			MethodName: "SetTakeoffAltitude",
			Handler:    _ActionService_SetTakeoffAltitude_Handler,
		},
		{
			MethodName: "GetMaximumSpeed",
			Handler:    _ActionService_GetMaximumSpeed_Handler,
		},
		{
			MethodName: "SetMaximumSpeed",
			Handler:    _ActionService_SetMaximumSpeed_Handler,
		},
		{
			MethodName: "GetReturnToLaunchAltitude",
			Handler:    _ActionService_GetReturnToLaunchAltitude_Handler,
		},
		{
			MethodName: "SetReturnToLaunchAltitude",
			Handler:    _ActionService_SetReturnToLaunchAltitude_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "action.proto",
}
