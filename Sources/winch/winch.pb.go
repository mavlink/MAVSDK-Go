// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: winch.proto

package winch

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Winch Action type.
type WinchAction int32

const (
	WinchAction_WINCH_ACTION_RELAXED                 WinchAction = 0 // Allow motor to freewheel
	WinchAction_WINCH_ACTION_RELATIVE_LENGTH_CONTROL WinchAction = 1 // Wind or unwind specified length of line, optionally using specified rate
	WinchAction_WINCH_ACTION_RATE_CONTROL            WinchAction = 2 // Wind or unwind line at specified rate
	WinchAction_WINCH_ACTION_LOCK                    WinchAction = 3 // Perform the locking sequence to relieve motor while in the fully retracted position
	WinchAction_WINCH_ACTION_DELIVER                 WinchAction = 4 // Sequence of drop, slow down, touch down, reel up, lock
	WinchAction_WINCH_ACTION_HOLD                    WinchAction = 5 // Engage motor and hold current position
	WinchAction_WINCH_ACTION_RETRACT                 WinchAction = 6 // Return the reel to the fully retracted position
	WinchAction_WINCH_ACTION_LOAD_LINE               WinchAction = 7 // Load the reel with line. The winch will calculate the total loaded length and stop when the tension exceeds a threshold
	WinchAction_WINCH_ACTION_ABANDON_LINE            WinchAction = 8 // Spool out the entire length of the line
	WinchAction_WINCH_ACTION_LOAD_PAYLOAD            WinchAction = 9 // Spools out just enough to present the hook to the user to load the payload
)

// Enum value maps for WinchAction.
var (
	WinchAction_name = map[int32]string{
		0: "WINCH_ACTION_RELAXED",
		1: "WINCH_ACTION_RELATIVE_LENGTH_CONTROL",
		2: "WINCH_ACTION_RATE_CONTROL",
		3: "WINCH_ACTION_LOCK",
		4: "WINCH_ACTION_DELIVER",
		5: "WINCH_ACTION_HOLD",
		6: "WINCH_ACTION_RETRACT",
		7: "WINCH_ACTION_LOAD_LINE",
		8: "WINCH_ACTION_ABANDON_LINE",
		9: "WINCH_ACTION_LOAD_PAYLOAD",
	}
	WinchAction_value = map[string]int32{
		"WINCH_ACTION_RELAXED":                 0,
		"WINCH_ACTION_RELATIVE_LENGTH_CONTROL": 1,
		"WINCH_ACTION_RATE_CONTROL":            2,
		"WINCH_ACTION_LOCK":                    3,
		"WINCH_ACTION_DELIVER":                 4,
		"WINCH_ACTION_HOLD":                    5,
		"WINCH_ACTION_RETRACT":                 6,
		"WINCH_ACTION_LOAD_LINE":               7,
		"WINCH_ACTION_ABANDON_LINE":            8,
		"WINCH_ACTION_LOAD_PAYLOAD":            9,
	}
)

func (x WinchAction) Enum() *WinchAction {
	p := new(WinchAction)
	*p = x
	return p
}

func (x WinchAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinchAction) Descriptor() protoreflect.EnumDescriptor {
	return file_winch_proto_enumTypes[0].Descriptor()
}

func (WinchAction) Type() protoreflect.EnumType {
	return &file_winch_proto_enumTypes[0]
}

func (x WinchAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinchAction.Descriptor instead.
func (WinchAction) EnumDescriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{0}
}

// Possible results returned for winch action requests.
type WinchResult_Result int32

const (
	WinchResult_RESULT_UNKNOWN     WinchResult_Result = 0 // Unknown result
	WinchResult_RESULT_SUCCESS     WinchResult_Result = 1 // Request was successful
	WinchResult_RESULT_NO_SYSTEM   WinchResult_Result = 2 // No system is connected
	WinchResult_RESULT_BUSY        WinchResult_Result = 3 // Temporarily rejected
	WinchResult_RESULT_TIMEOUT     WinchResult_Result = 4 // Request timed out
	WinchResult_RESULT_UNSUPPORTED WinchResult_Result = 5 // Action not supported
	WinchResult_RESULT_FAILED      WinchResult_Result = 6 // Action failed
)

// Enum value maps for WinchResult_Result.
var (
	WinchResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_NO_SYSTEM",
		3: "RESULT_BUSY",
		4: "RESULT_TIMEOUT",
		5: "RESULT_UNSUPPORTED",
		6: "RESULT_FAILED",
	}
	WinchResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":     0,
		"RESULT_SUCCESS":     1,
		"RESULT_NO_SYSTEM":   2,
		"RESULT_BUSY":        3,
		"RESULT_TIMEOUT":     4,
		"RESULT_UNSUPPORTED": 5,
		"RESULT_FAILED":      6,
	}
)

func (x WinchResult_Result) Enum() *WinchResult_Result {
	p := new(WinchResult_Result)
	*p = x
	return p
}

func (x WinchResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinchResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_winch_proto_enumTypes[1].Descriptor()
}

func (WinchResult_Result) Type() protoreflect.EnumType {
	return &file_winch_proto_enumTypes[1]
}

func (x WinchResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinchResult_Result.Descriptor instead.
func (WinchResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{24, 0}
}

type SubscribeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeStatusRequest) Reset() {
	*x = SubscribeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStatusRequest) ProtoMessage() {}

func (x *SubscribeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStatusRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{0}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // The next 'winch status' state
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{1}
}

func (x *StatusResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Winch Status Flags.
//
// The status flags are defined in mavlink
// https://mavlink.io/en/messages/common.html#MAV_WINCH_STATUS_FLAG.
//
// Multiple status fields can be set simultaneously. Mavlink does
// not specify which states are mutually exclusive.
type StatusFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy        bool `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`                                     // Winch is healthy
	FullyRetracted bool `protobuf:"varint,2,opt,name=fully_retracted,json=fullyRetracted,proto3" json:"fully_retracted,omitempty"` // Winch line is fully retracted
	Moving         bool `protobuf:"varint,3,opt,name=moving,proto3" json:"moving,omitempty"`                                       // Winch motor is moving
	ClutchEngaged  bool `protobuf:"varint,4,opt,name=clutch_engaged,json=clutchEngaged,proto3" json:"clutch_engaged,omitempty"`    // Winch clutch is engaged allowing motor to move freely
	Locked         bool `protobuf:"varint,5,opt,name=locked,proto3" json:"locked,omitempty"`                                       // Winch is locked by locking mechanism
	Dropping       bool `protobuf:"varint,6,opt,name=dropping,proto3" json:"dropping,omitempty"`                                   // Winch is gravity dropping payload
	Arresting      bool `protobuf:"varint,7,opt,name=arresting,proto3" json:"arresting,omitempty"`                                 // Winch is arresting payload descent
	GroundSense    bool `protobuf:"varint,8,opt,name=ground_sense,json=groundSense,proto3" json:"ground_sense,omitempty"`          // Winch is using torque measurements to sense the ground
	Retracting     bool `protobuf:"varint,9,opt,name=retracting,proto3" json:"retracting,omitempty"`                               // Winch is returning to the fully retracted position
	Redeliver      bool `protobuf:"varint,10,opt,name=redeliver,proto3" json:"redeliver,omitempty"`                                // Winch is redelivering the payload. This is a failover state if the line tension goes above a threshold during RETRACTING.
	AbandonLine    bool `protobuf:"varint,11,opt,name=abandon_line,json=abandonLine,proto3" json:"abandon_line,omitempty"`         // Winch is abandoning the line and possibly payload. Winch unspools the entire calculated line length. This is a failover state from REDELIVER if the number of attempts exceeds a threshold.
	Locking        bool `protobuf:"varint,12,opt,name=locking,proto3" json:"locking,omitempty"`                                    // Winch is engaging the locking mechanism
	LoadLine       bool `protobuf:"varint,13,opt,name=load_line,json=loadLine,proto3" json:"load_line,omitempty"`                  // Winch is spooling on line
	LoadPayload    bool `protobuf:"varint,14,opt,name=load_payload,json=loadPayload,proto3" json:"load_payload,omitempty"`         // Winch is loading a payload
}

func (x *StatusFlags) Reset() {
	*x = StatusFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusFlags) ProtoMessage() {}

func (x *StatusFlags) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusFlags.ProtoReflect.Descriptor instead.
func (*StatusFlags) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{2}
}

func (x *StatusFlags) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *StatusFlags) GetFullyRetracted() bool {
	if x != nil {
		return x.FullyRetracted
	}
	return false
}

func (x *StatusFlags) GetMoving() bool {
	if x != nil {
		return x.Moving
	}
	return false
}

func (x *StatusFlags) GetClutchEngaged() bool {
	if x != nil {
		return x.ClutchEngaged
	}
	return false
}

func (x *StatusFlags) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *StatusFlags) GetDropping() bool {
	if x != nil {
		return x.Dropping
	}
	return false
}

func (x *StatusFlags) GetArresting() bool {
	if x != nil {
		return x.Arresting
	}
	return false
}

func (x *StatusFlags) GetGroundSense() bool {
	if x != nil {
		return x.GroundSense
	}
	return false
}

func (x *StatusFlags) GetRetracting() bool {
	if x != nil {
		return x.Retracting
	}
	return false
}

func (x *StatusFlags) GetRedeliver() bool {
	if x != nil {
		return x.Redeliver
	}
	return false
}

func (x *StatusFlags) GetAbandonLine() bool {
	if x != nil {
		return x.AbandonLine
	}
	return false
}

func (x *StatusFlags) GetLocking() bool {
	if x != nil {
		return x.Locking
	}
	return false
}

func (x *StatusFlags) GetLoadLine() bool {
	if x != nil {
		return x.LoadLine
	}
	return false
}

func (x *StatusFlags) GetLoadPayload() bool {
	if x != nil {
		return x.LoadPayload
	}
	return false
}

// Status type.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUsec     uint64       `protobuf:"varint,1,opt,name=time_usec,json=timeUsec,proto3" json:"time_usec,omitempty"`             // Time in usec
	LineLengthM  float32      `protobuf:"fixed32,2,opt,name=line_length_m,json=lineLengthM,proto3" json:"line_length_m,omitempty"` // Length of the line in meters
	SpeedMS      float32      `protobuf:"fixed32,3,opt,name=speed_m_s,json=speedMS,proto3" json:"speed_m_s,omitempty"`             // Speed in meters per second
	TensionKg    float32      `protobuf:"fixed32,4,opt,name=tension_kg,json=tensionKg,proto3" json:"tension_kg,omitempty"`         // Tension in kilograms
	VoltageV     float32      `protobuf:"fixed32,5,opt,name=voltage_v,json=voltageV,proto3" json:"voltage_v,omitempty"`            // Voltage in volts
	CurrentA     float32      `protobuf:"fixed32,6,opt,name=current_a,json=currentA,proto3" json:"current_a,omitempty"`            // Current in amperes
	TemperatureC int32        `protobuf:"varint,7,opt,name=temperature_c,json=temperatureC,proto3" json:"temperature_c,omitempty"` // Temperature in Celsius
	StatusFlags  *StatusFlags `protobuf:"bytes,8,opt,name=status_flags,json=statusFlags,proto3" json:"status_flags,omitempty"`     // Status flags
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{3}
}

func (x *Status) GetTimeUsec() uint64 {
	if x != nil {
		return x.TimeUsec
	}
	return 0
}

func (x *Status) GetLineLengthM() float32 {
	if x != nil {
		return x.LineLengthM
	}
	return 0
}

func (x *Status) GetSpeedMS() float32 {
	if x != nil {
		return x.SpeedMS
	}
	return 0
}

func (x *Status) GetTensionKg() float32 {
	if x != nil {
		return x.TensionKg
	}
	return 0
}

func (x *Status) GetVoltageV() float32 {
	if x != nil {
		return x.VoltageV
	}
	return 0
}

func (x *Status) GetCurrentA() float32 {
	if x != nil {
		return x.CurrentA
	}
	return 0
}

func (x *Status) GetTemperatureC() int32 {
	if x != nil {
		return x.TemperatureC
	}
	return 0
}

func (x *Status) GetStatusFlags() *StatusFlags {
	if x != nil {
		return x.StatusFlags
	}
	return nil
}

type RelaxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *RelaxRequest) Reset() {
	*x = RelaxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelaxRequest) ProtoMessage() {}

func (x *RelaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelaxRequest.ProtoReflect.Descriptor instead.
func (*RelaxRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{4}
}

func (x *RelaxRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type RelaxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *RelaxResponse) Reset() {
	*x = RelaxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelaxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelaxResponse) ProtoMessage() {}

func (x *RelaxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelaxResponse.ProtoReflect.Descriptor instead.
func (*RelaxResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{5}
}

func (x *RelaxResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type RelativeLengthControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32  `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`               // Instance ID of the winch addressed by this request
	LengthM  float32 `protobuf:"fixed32,2,opt,name=length_m,json=lengthM,proto3" json:"length_m,omitempty"` // Length of line to unwind or wind
	RateMS   float32 `protobuf:"fixed32,3,opt,name=rate_m_s,json=rateMS,proto3" json:"rate_m_s,omitempty"`  // Rate at which to wind or unwind the line
}

func (x *RelativeLengthControlRequest) Reset() {
	*x = RelativeLengthControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeLengthControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeLengthControlRequest) ProtoMessage() {}

func (x *RelativeLengthControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeLengthControlRequest.ProtoReflect.Descriptor instead.
func (*RelativeLengthControlRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{6}
}

func (x *RelativeLengthControlRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *RelativeLengthControlRequest) GetLengthM() float32 {
	if x != nil {
		return x.LengthM
	}
	return 0
}

func (x *RelativeLengthControlRequest) GetRateMS() float32 {
	if x != nil {
		return x.RateMS
	}
	return 0
}

type RelativeLengthControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *RelativeLengthControlResponse) Reset() {
	*x = RelativeLengthControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeLengthControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeLengthControlResponse) ProtoMessage() {}

func (x *RelativeLengthControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeLengthControlResponse.ProtoReflect.Descriptor instead.
func (*RelativeLengthControlResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{7}
}

func (x *RelativeLengthControlResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type RateControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32  `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
	RateMS   float32 `protobuf:"fixed32,2,opt,name=rate_m_s,json=rateMS,proto3" json:"rate_m_s,omitempty"` // Rate at which to wind or unwind the line
}

func (x *RateControlRequest) Reset() {
	*x = RateControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateControlRequest) ProtoMessage() {}

func (x *RateControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateControlRequest.ProtoReflect.Descriptor instead.
func (*RateControlRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{8}
}

func (x *RateControlRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *RateControlRequest) GetRateMS() float32 {
	if x != nil {
		return x.RateMS
	}
	return 0
}

type RateControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *RateControlResponse) Reset() {
	*x = RateControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateControlResponse) ProtoMessage() {}

func (x *RateControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateControlResponse.ProtoReflect.Descriptor instead.
func (*RateControlResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{9}
}

func (x *RateControlResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type LockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *LockRequest) Reset() {
	*x = LockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest) ProtoMessage() {}

func (x *LockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest.ProtoReflect.Descriptor instead.
func (*LockRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{10}
}

func (x *LockRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type LockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *LockResponse) Reset() {
	*x = LockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse) ProtoMessage() {}

func (x *LockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse.ProtoReflect.Descriptor instead.
func (*LockResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{11}
}

func (x *LockResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type DeliverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *DeliverRequest) Reset() {
	*x = DeliverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverRequest) ProtoMessage() {}

func (x *DeliverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverRequest.ProtoReflect.Descriptor instead.
func (*DeliverRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{12}
}

func (x *DeliverRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type DeliverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *DeliverResponse) Reset() {
	*x = DeliverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverResponse) ProtoMessage() {}

func (x *DeliverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverResponse.ProtoReflect.Descriptor instead.
func (*DeliverResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{13}
}

func (x *DeliverResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type HoldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *HoldRequest) Reset() {
	*x = HoldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldRequest) ProtoMessage() {}

func (x *HoldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldRequest.ProtoReflect.Descriptor instead.
func (*HoldRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{14}
}

func (x *HoldRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type HoldResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *HoldResponse) Reset() {
	*x = HoldResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldResponse) ProtoMessage() {}

func (x *HoldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldResponse.ProtoReflect.Descriptor instead.
func (*HoldResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{15}
}

func (x *HoldResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type RetractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *RetractRequest) Reset() {
	*x = RetractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetractRequest) ProtoMessage() {}

func (x *RetractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetractRequest.ProtoReflect.Descriptor instead.
func (*RetractRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{16}
}

func (x *RetractRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type RetractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *RetractResponse) Reset() {
	*x = RetractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetractResponse) ProtoMessage() {}

func (x *RetractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetractResponse.ProtoReflect.Descriptor instead.
func (*RetractResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{17}
}

func (x *RetractResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type LoadLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *LoadLineRequest) Reset() {
	*x = LoadLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadLineRequest) ProtoMessage() {}

func (x *LoadLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadLineRequest.ProtoReflect.Descriptor instead.
func (*LoadLineRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{18}
}

func (x *LoadLineRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type LoadLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *LoadLineResponse) Reset() {
	*x = LoadLineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadLineResponse) ProtoMessage() {}

func (x *LoadLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadLineResponse.ProtoReflect.Descriptor instead.
func (*LoadLineResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{19}
}

func (x *LoadLineResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type AbandonLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *AbandonLineRequest) Reset() {
	*x = AbandonLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonLineRequest) ProtoMessage() {}

func (x *AbandonLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonLineRequest.ProtoReflect.Descriptor instead.
func (*AbandonLineRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{20}
}

func (x *AbandonLineRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type AbandonLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *AbandonLineResponse) Reset() {
	*x = AbandonLineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonLineResponse) ProtoMessage() {}

func (x *AbandonLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonLineResponse.ProtoReflect.Descriptor instead.
func (*AbandonLineResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{21}
}

func (x *AbandonLineResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

type LoadPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance uint32 `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *LoadPayloadRequest) Reset() {
	*x = LoadPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPayloadRequest) ProtoMessage() {}

func (x *LoadPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPayloadRequest.ProtoReflect.Descriptor instead.
func (*LoadPayloadRequest) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{22}
}

func (x *LoadPayloadRequest) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type LoadPayloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinchResult *WinchResult `protobuf:"bytes,1,opt,name=winch_result,json=winchResult,proto3" json:"winch_result,omitempty"`
}

func (x *LoadPayloadResponse) Reset() {
	*x = LoadPayloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadPayloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadPayloadResponse) ProtoMessage() {}

func (x *LoadPayloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadPayloadResponse.ProtoReflect.Descriptor instead.
func (*LoadPayloadResponse) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{23}
}

func (x *LoadPayloadResponse) GetWinchResult() *WinchResult {
	if x != nil {
		return x.WinchResult
	}
	return nil
}

// Result type.
type WinchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    WinchResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.winch.WinchResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string             `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                    // Human-readable English string describing the result
}

func (x *WinchResult) Reset() {
	*x = WinchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_winch_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinchResult) ProtoMessage() {}

func (x *WinchResult) ProtoReflect() protoreflect.Message {
	mi := &file_winch_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinchResult.ProtoReflect.Descriptor instead.
func (*WinchResult) Descriptor() ([]byte, []int) {
	return file_winch_proto_rawDescGZIP(), []int{24}
}

func (x *WinchResult) GetResult() WinchResult_Result {
	if x != nil {
		return x.Result
	}
	return WinchResult_RESULT_UNKNOWN
}

func (x *WinchResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_winch_proto protoreflect.FileDescriptor

var file_winch_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x1a,
	0x14, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x42, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77,
	0x69, 0x6e, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xbf, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x72,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x72,
	0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72,
	0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x4d, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x53, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x56, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77,
	0x69, 0x6e, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x2a, 0x0a,
	0x0c, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x6c,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x69,
	0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69,
	0x6e, 0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0b, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x1c,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x4d, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x5f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x07, 0x82, 0xb5, 0x18, 0x03, 0x4e, 0x61, 0x4e, 0x52, 0x06,
	0x72, 0x61, 0x74, 0x65, 0x4d, 0x53, 0x22, 0x61, 0x0a, 0x1d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68,
	0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x77, 0x69,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4a, 0x0a, 0x12, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x5f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x53, 0x22, 0x57, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x29,
	0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x0c, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x69, 0x6e,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e,
	0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x29,
	0x0a, 0x0b, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x0c, 0x48, 0x6f, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x69, 0x6e,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e,
	0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x52,
	0x65, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x52, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2d,
	0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x54, 0x0a,
	0x10, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x30, 0x0a, 0x12, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x30,
	0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x57, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68,
	0x2e, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x77, 0x69,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x0b, 0x57, 0x69,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x57, 0x69, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a,
	0xac, 0x02, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x14, 0x57, 0x49, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x58, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x49, 0x4e,
	0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x49, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x49, 0x4e,
	0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x49, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x49,
	0x4e, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x49, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x08, 0x12,
	0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x09, 0x32, 0xde,
	0x07, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x61, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x4a, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x12, 0x1e, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a,
	0x0a, 0x15, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e,
	0x63, 0x68, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b,
	0x12, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69,
	0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e,
	0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63,
	0x68, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x04, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x48,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x07,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x41, 0x62, 0x61, 0x6e,
	0x64, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x77, 0x69,
	0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x15, 0x42, 0x0a, 0x57, 0x69, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x07, 0x2e,
	0x3b, 0x77, 0x69, 0x6e, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_winch_proto_rawDescOnce sync.Once
	file_winch_proto_rawDescData = file_winch_proto_rawDesc
)

func file_winch_proto_rawDescGZIP() []byte {
	file_winch_proto_rawDescOnce.Do(func() {
		file_winch_proto_rawDescData = protoimpl.X.CompressGZIP(file_winch_proto_rawDescData)
	})
	return file_winch_proto_rawDescData
}

var file_winch_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_winch_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_winch_proto_goTypes = []any{
	(WinchAction)(0),                      // 0: mavsdk.rpc.winch.WinchAction
	(WinchResult_Result)(0),               // 1: mavsdk.rpc.winch.WinchResult.Result
	(*SubscribeStatusRequest)(nil),        // 2: mavsdk.rpc.winch.SubscribeStatusRequest
	(*StatusResponse)(nil),                // 3: mavsdk.rpc.winch.StatusResponse
	(*StatusFlags)(nil),                   // 4: mavsdk.rpc.winch.StatusFlags
	(*Status)(nil),                        // 5: mavsdk.rpc.winch.Status
	(*RelaxRequest)(nil),                  // 6: mavsdk.rpc.winch.RelaxRequest
	(*RelaxResponse)(nil),                 // 7: mavsdk.rpc.winch.RelaxResponse
	(*RelativeLengthControlRequest)(nil),  // 8: mavsdk.rpc.winch.RelativeLengthControlRequest
	(*RelativeLengthControlResponse)(nil), // 9: mavsdk.rpc.winch.RelativeLengthControlResponse
	(*RateControlRequest)(nil),            // 10: mavsdk.rpc.winch.RateControlRequest
	(*RateControlResponse)(nil),           // 11: mavsdk.rpc.winch.RateControlResponse
	(*LockRequest)(nil),                   // 12: mavsdk.rpc.winch.LockRequest
	(*LockResponse)(nil),                  // 13: mavsdk.rpc.winch.LockResponse
	(*DeliverRequest)(nil),                // 14: mavsdk.rpc.winch.DeliverRequest
	(*DeliverResponse)(nil),               // 15: mavsdk.rpc.winch.DeliverResponse
	(*HoldRequest)(nil),                   // 16: mavsdk.rpc.winch.HoldRequest
	(*HoldResponse)(nil),                  // 17: mavsdk.rpc.winch.HoldResponse
	(*RetractRequest)(nil),                // 18: mavsdk.rpc.winch.RetractRequest
	(*RetractResponse)(nil),               // 19: mavsdk.rpc.winch.RetractResponse
	(*LoadLineRequest)(nil),               // 20: mavsdk.rpc.winch.LoadLineRequest
	(*LoadLineResponse)(nil),              // 21: mavsdk.rpc.winch.LoadLineResponse
	(*AbandonLineRequest)(nil),            // 22: mavsdk.rpc.winch.AbandonLineRequest
	(*AbandonLineResponse)(nil),           // 23: mavsdk.rpc.winch.AbandonLineResponse
	(*LoadPayloadRequest)(nil),            // 24: mavsdk.rpc.winch.LoadPayloadRequest
	(*LoadPayloadResponse)(nil),           // 25: mavsdk.rpc.winch.LoadPayloadResponse
	(*WinchResult)(nil),                   // 26: mavsdk.rpc.winch.WinchResult
}
var file_winch_proto_depIdxs = []int32{
	5,  // 0: mavsdk.rpc.winch.StatusResponse.status:type_name -> mavsdk.rpc.winch.Status
	4,  // 1: mavsdk.rpc.winch.Status.status_flags:type_name -> mavsdk.rpc.winch.StatusFlags
	26, // 2: mavsdk.rpc.winch.RelaxResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 3: mavsdk.rpc.winch.RelativeLengthControlResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 4: mavsdk.rpc.winch.RateControlResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 5: mavsdk.rpc.winch.LockResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 6: mavsdk.rpc.winch.DeliverResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 7: mavsdk.rpc.winch.HoldResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 8: mavsdk.rpc.winch.RetractResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 9: mavsdk.rpc.winch.LoadLineResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 10: mavsdk.rpc.winch.AbandonLineResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	26, // 11: mavsdk.rpc.winch.LoadPayloadResponse.winch_result:type_name -> mavsdk.rpc.winch.WinchResult
	1,  // 12: mavsdk.rpc.winch.WinchResult.result:type_name -> mavsdk.rpc.winch.WinchResult.Result
	2,  // 13: mavsdk.rpc.winch.WinchService.SubscribeStatus:input_type -> mavsdk.rpc.winch.SubscribeStatusRequest
	6,  // 14: mavsdk.rpc.winch.WinchService.Relax:input_type -> mavsdk.rpc.winch.RelaxRequest
	8,  // 15: mavsdk.rpc.winch.WinchService.RelativeLengthControl:input_type -> mavsdk.rpc.winch.RelativeLengthControlRequest
	10, // 16: mavsdk.rpc.winch.WinchService.RateControl:input_type -> mavsdk.rpc.winch.RateControlRequest
	12, // 17: mavsdk.rpc.winch.WinchService.Lock:input_type -> mavsdk.rpc.winch.LockRequest
	14, // 18: mavsdk.rpc.winch.WinchService.Deliver:input_type -> mavsdk.rpc.winch.DeliverRequest
	16, // 19: mavsdk.rpc.winch.WinchService.Hold:input_type -> mavsdk.rpc.winch.HoldRequest
	18, // 20: mavsdk.rpc.winch.WinchService.Retract:input_type -> mavsdk.rpc.winch.RetractRequest
	20, // 21: mavsdk.rpc.winch.WinchService.LoadLine:input_type -> mavsdk.rpc.winch.LoadLineRequest
	22, // 22: mavsdk.rpc.winch.WinchService.AbandonLine:input_type -> mavsdk.rpc.winch.AbandonLineRequest
	24, // 23: mavsdk.rpc.winch.WinchService.LoadPayload:input_type -> mavsdk.rpc.winch.LoadPayloadRequest
	3,  // 24: mavsdk.rpc.winch.WinchService.SubscribeStatus:output_type -> mavsdk.rpc.winch.StatusResponse
	7,  // 25: mavsdk.rpc.winch.WinchService.Relax:output_type -> mavsdk.rpc.winch.RelaxResponse
	9,  // 26: mavsdk.rpc.winch.WinchService.RelativeLengthControl:output_type -> mavsdk.rpc.winch.RelativeLengthControlResponse
	11, // 27: mavsdk.rpc.winch.WinchService.RateControl:output_type -> mavsdk.rpc.winch.RateControlResponse
	13, // 28: mavsdk.rpc.winch.WinchService.Lock:output_type -> mavsdk.rpc.winch.LockResponse
	15, // 29: mavsdk.rpc.winch.WinchService.Deliver:output_type -> mavsdk.rpc.winch.DeliverResponse
	17, // 30: mavsdk.rpc.winch.WinchService.Hold:output_type -> mavsdk.rpc.winch.HoldResponse
	19, // 31: mavsdk.rpc.winch.WinchService.Retract:output_type -> mavsdk.rpc.winch.RetractResponse
	21, // 32: mavsdk.rpc.winch.WinchService.LoadLine:output_type -> mavsdk.rpc.winch.LoadLineResponse
	23, // 33: mavsdk.rpc.winch.WinchService.AbandonLine:output_type -> mavsdk.rpc.winch.AbandonLineResponse
	25, // 34: mavsdk.rpc.winch.WinchService.LoadPayload:output_type -> mavsdk.rpc.winch.LoadPayloadResponse
	24, // [24:35] is the sub-list for method output_type
	13, // [13:24] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_winch_proto_init() }
func file_winch_proto_init() {
	if File_winch_proto != nil {
		return
	}
	
	if !protoimpl.UnsafeEnabled {
		file_winch_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StatusFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RelaxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RelaxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RelativeLengthControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RelativeLengthControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RateControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RateControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*LockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*LockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeliverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeliverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*HoldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*HoldResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RetractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RetractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LoadLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*LoadLineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AbandonLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*AbandonLineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*LoadPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*LoadPayloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_winch_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*WinchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_winch_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_winch_proto_goTypes,
		DependencyIndexes: file_winch_proto_depIdxs,
		EnumInfos:         file_winch_proto_enumTypes,
		MessageInfos:      file_winch_proto_msgTypes,
	}.Build()
	File_winch_proto = out.File
	file_winch_proto_rawDesc = nil
	file_winch_proto_goTypes = nil
	file_winch_proto_depIdxs = nil
}
