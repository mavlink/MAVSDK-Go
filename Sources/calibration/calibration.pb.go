// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: calibration.proto

package calibration

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible results returned for calibration commands
type CalibrationResult_Result int32

const (
	CalibrationResult_RESULT_UNKNOWN          CalibrationResult_Result = 0  // Unknown result
	CalibrationResult_RESULT_SUCCESS          CalibrationResult_Result = 1  // The calibration succeeded
	CalibrationResult_RESULT_NEXT             CalibrationResult_Result = 2  // Intermediate message showing progress or instructions on the next steps
	CalibrationResult_RESULT_FAILED           CalibrationResult_Result = 3  // Calibration failed
	CalibrationResult_RESULT_NO_SYSTEM        CalibrationResult_Result = 4  // No system is connected
	CalibrationResult_RESULT_CONNECTION_ERROR CalibrationResult_Result = 5  // Connection error
	CalibrationResult_RESULT_BUSY             CalibrationResult_Result = 6  // Vehicle is busy
	CalibrationResult_RESULT_COMMAND_DENIED   CalibrationResult_Result = 7  // Command refused by vehicle
	CalibrationResult_RESULT_TIMEOUT          CalibrationResult_Result = 8  // Command timed out
	CalibrationResult_RESULT_CANCELLED        CalibrationResult_Result = 9  // Calibration process was cancelled
	CalibrationResult_RESULT_FAILED_ARMED     CalibrationResult_Result = 10 // Calibration process failed since the vehicle is armed
	CalibrationResult_RESULT_UNSUPPORTED      CalibrationResult_Result = 11 // Functionality not supported
)

// Enum value maps for CalibrationResult_Result.
var (
	CalibrationResult_Result_name = map[int32]string{
		0:  "RESULT_UNKNOWN",
		1:  "RESULT_SUCCESS",
		2:  "RESULT_NEXT",
		3:  "RESULT_FAILED",
		4:  "RESULT_NO_SYSTEM",
		5:  "RESULT_CONNECTION_ERROR",
		6:  "RESULT_BUSY",
		7:  "RESULT_COMMAND_DENIED",
		8:  "RESULT_TIMEOUT",
		9:  "RESULT_CANCELLED",
		10: "RESULT_FAILED_ARMED",
		11: "RESULT_UNSUPPORTED",
	}
	CalibrationResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":          0,
		"RESULT_SUCCESS":          1,
		"RESULT_NEXT":             2,
		"RESULT_FAILED":           3,
		"RESULT_NO_SYSTEM":        4,
		"RESULT_CONNECTION_ERROR": 5,
		"RESULT_BUSY":             6,
		"RESULT_COMMAND_DENIED":   7,
		"RESULT_TIMEOUT":          8,
		"RESULT_CANCELLED":        9,
		"RESULT_FAILED_ARMED":     10,
		"RESULT_UNSUPPORTED":      11,
	}
)

func (x CalibrationResult_Result) Enum() *CalibrationResult_Result {
	p := new(CalibrationResult_Result)
	*p = x
	return p
}

func (x CalibrationResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalibrationResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_calibration_proto_enumTypes[0].Descriptor()
}

func (CalibrationResult_Result) Type() protoreflect.EnumType {
	return &file_calibration_proto_enumTypes[0]
}

func (x CalibrationResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalibrationResult_Result.Descriptor instead.
func (CalibrationResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{12, 0}
}

type SubscribeCalibrateGyroRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeCalibrateGyroRequest) Reset() {
	*x = SubscribeCalibrateGyroRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCalibrateGyroRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCalibrateGyroRequest) ProtoMessage() {}

func (x *SubscribeCalibrateGyroRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCalibrateGyroRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCalibrateGyroRequest) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{0}
}

type CalibrateGyroResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationResult *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData      *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"` // Progress data
}

func (x *CalibrateGyroResponse) Reset() {
	*x = CalibrateGyroResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrateGyroResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrateGyroResponse) ProtoMessage() {}

func (x *CalibrateGyroResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrateGyroResponse.ProtoReflect.Descriptor instead.
func (*CalibrateGyroResponse) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{1}
}

func (x *CalibrateGyroResponse) GetCalibrationResult() *CalibrationResult {
	if x != nil {
		return x.CalibrationResult
	}
	return nil
}

func (x *CalibrateGyroResponse) GetProgressData() *ProgressData {
	if x != nil {
		return x.ProgressData
	}
	return nil
}

type SubscribeCalibrateAccelerometerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeCalibrateAccelerometerRequest) Reset() {
	*x = SubscribeCalibrateAccelerometerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCalibrateAccelerometerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCalibrateAccelerometerRequest) ProtoMessage() {}

func (x *SubscribeCalibrateAccelerometerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCalibrateAccelerometerRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCalibrateAccelerometerRequest) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{2}
}

type CalibrateAccelerometerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationResult *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData      *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"` // Progress data
}

func (x *CalibrateAccelerometerResponse) Reset() {
	*x = CalibrateAccelerometerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrateAccelerometerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrateAccelerometerResponse) ProtoMessage() {}

func (x *CalibrateAccelerometerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrateAccelerometerResponse.ProtoReflect.Descriptor instead.
func (*CalibrateAccelerometerResponse) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{3}
}

func (x *CalibrateAccelerometerResponse) GetCalibrationResult() *CalibrationResult {
	if x != nil {
		return x.CalibrationResult
	}
	return nil
}

func (x *CalibrateAccelerometerResponse) GetProgressData() *ProgressData {
	if x != nil {
		return x.ProgressData
	}
	return nil
}

type SubscribeCalibrateMagnetometerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeCalibrateMagnetometerRequest) Reset() {
	*x = SubscribeCalibrateMagnetometerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCalibrateMagnetometerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCalibrateMagnetometerRequest) ProtoMessage() {}

func (x *SubscribeCalibrateMagnetometerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCalibrateMagnetometerRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCalibrateMagnetometerRequest) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{4}
}

type CalibrateMagnetometerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationResult *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData      *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"` // Progress data
}

func (x *CalibrateMagnetometerResponse) Reset() {
	*x = CalibrateMagnetometerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrateMagnetometerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrateMagnetometerResponse) ProtoMessage() {}

func (x *CalibrateMagnetometerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrateMagnetometerResponse.ProtoReflect.Descriptor instead.
func (*CalibrateMagnetometerResponse) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{5}
}

func (x *CalibrateMagnetometerResponse) GetCalibrationResult() *CalibrationResult {
	if x != nil {
		return x.CalibrationResult
	}
	return nil
}

func (x *CalibrateMagnetometerResponse) GetProgressData() *ProgressData {
	if x != nil {
		return x.ProgressData
	}
	return nil
}

type SubscribeCalibrateLevelHorizonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeCalibrateLevelHorizonRequest) Reset() {
	*x = SubscribeCalibrateLevelHorizonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCalibrateLevelHorizonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCalibrateLevelHorizonRequest) ProtoMessage() {}

func (x *SubscribeCalibrateLevelHorizonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCalibrateLevelHorizonRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCalibrateLevelHorizonRequest) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{6}
}

type CalibrateLevelHorizonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationResult *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData      *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"` // Progress data
}

func (x *CalibrateLevelHorizonResponse) Reset() {
	*x = CalibrateLevelHorizonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrateLevelHorizonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrateLevelHorizonResponse) ProtoMessage() {}

func (x *CalibrateLevelHorizonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrateLevelHorizonResponse.ProtoReflect.Descriptor instead.
func (*CalibrateLevelHorizonResponse) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{7}
}

func (x *CalibrateLevelHorizonResponse) GetCalibrationResult() *CalibrationResult {
	if x != nil {
		return x.CalibrationResult
	}
	return nil
}

func (x *CalibrateLevelHorizonResponse) GetProgressData() *ProgressData {
	if x != nil {
		return x.ProgressData
	}
	return nil
}

type SubscribeCalibrateGimbalAccelerometerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeCalibrateGimbalAccelerometerRequest) Reset() {
	*x = SubscribeCalibrateGimbalAccelerometerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCalibrateGimbalAccelerometerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCalibrateGimbalAccelerometerRequest) ProtoMessage() {}

func (x *SubscribeCalibrateGimbalAccelerometerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCalibrateGimbalAccelerometerRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCalibrateGimbalAccelerometerRequest) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{8}
}

type CalibrateGimbalAccelerometerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationResult *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
	ProgressData      *ProgressData      `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"` // Progress data
}

func (x *CalibrateGimbalAccelerometerResponse) Reset() {
	*x = CalibrateGimbalAccelerometerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrateGimbalAccelerometerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrateGimbalAccelerometerResponse) ProtoMessage() {}

func (x *CalibrateGimbalAccelerometerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrateGimbalAccelerometerResponse.ProtoReflect.Descriptor instead.
func (*CalibrateGimbalAccelerometerResponse) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{9}
}

func (x *CalibrateGimbalAccelerometerResponse) GetCalibrationResult() *CalibrationResult {
	if x != nil {
		return x.CalibrationResult
	}
	return nil
}

func (x *CalibrateGimbalAccelerometerResponse) GetProgressData() *ProgressData {
	if x != nil {
		return x.ProgressData
	}
	return nil
}

type CancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{10}
}

type CancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CalibrationResult *CalibrationResult `protobuf:"bytes,1,opt,name=calibration_result,json=calibrationResult,proto3" json:"calibration_result,omitempty"`
}

func (x *CancelResponse) Reset() {
	*x = CancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelResponse) ProtoMessage() {}

func (x *CancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelResponse.ProtoReflect.Descriptor instead.
func (*CancelResponse) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{11}
}

func (x *CancelResponse) GetCalibrationResult() *CalibrationResult {
	if x != nil {
		return x.CalibrationResult
	}
	return nil
}

// Result type.
type CalibrationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    CalibrationResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.calibration.CalibrationResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string                   `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                                // Human-readable English string describing the result
}

func (x *CalibrationResult) Reset() {
	*x = CalibrationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationResult) ProtoMessage() {}

func (x *CalibrationResult) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrationResult.ProtoReflect.Descriptor instead.
func (*CalibrationResult) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{12}
}

func (x *CalibrationResult) GetResult() CalibrationResult_Result {
	if x != nil {
		return x.Result
	}
	return CalibrationResult_RESULT_UNKNOWN
}

func (x *CalibrationResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

// Progress data coming from calibration.
//
// Can be a progress percentage, or an instruction text.
type ProgressData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasProgress   bool    `protobuf:"varint,1,opt,name=has_progress,json=hasProgress,proto3" json:"has_progress,omitempty"`         // Whether this ProgressData contains a 'progress' status or not
	Progress      float32 `protobuf:"fixed32,2,opt,name=progress,proto3" json:"progress,omitempty"`                                 // Progress (percentage)
	HasStatusText bool    `protobuf:"varint,3,opt,name=has_status_text,json=hasStatusText,proto3" json:"has_status_text,omitempty"` // Whether this ProgressData contains a 'status_text' or not
	StatusText    string  `protobuf:"bytes,4,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`             // Instruction text
}

func (x *ProgressData) Reset() {
	*x = ProgressData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calibration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressData) ProtoMessage() {}

func (x *ProgressData) ProtoReflect() protoreflect.Message {
	mi := &file_calibration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressData.ProtoReflect.Descriptor instead.
func (*ProgressData) Descriptor() ([]byte, []int) {
	return file_calibration_proto_rawDescGZIP(), []int{13}
}

func (x *ProgressData) GetHasProgress() bool {
	if x != nil {
		return x.HasProgress
	}
	return false
}

func (x *ProgressData) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ProgressData) GetHasStatusText() bool {
	if x != nil {
		return x.HasStatusText
	}
	return false
}

func (x *ProgressData) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

var File_calibration_proto protoreflect.FileDescriptor

var file_calibration_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x47, 0x79, 0x72, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65,
	0x47, 0x79, 0x72, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x28, 0x0a, 0x26, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1e,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x12, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x25, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a,
	0x1d, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x12, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x25, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc4, 0x01, 0x0a,
	0x1d, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x12, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x2c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x24, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x6a, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d,
	0x03, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x22, 0x8e, 0x02,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e,
	0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41,
	0x52, 0x4d, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x22, 0xb5,
	0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x07, 0x82, 0xb5, 0x18, 0x03, 0x4e, 0x61, 0x4e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x31, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x82, 0xb5, 0x18,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x32, 0xac, 0x07, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x65, 0x47, 0x79, 0x72, 0x6f, 0x12, 0x35, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x65, 0x47, 0x79, 0x72, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x65, 0x47, 0x79, 0x72, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08,
	0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x30, 0x01, 0x12, 0xa5, 0x01, 0x0a, 0x1f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3e,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01,
	0x30, 0x01, 0x12, 0xa2, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18,
	0x00, 0x88, 0xb5, 0x18, 0x01, 0x30, 0x01, 0x12, 0xa2, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x30, 0x01, 0x12, 0xb7, 0x01, 0x0a,
	0x25, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x65, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x44, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x65, 0x47, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x47,
	0x69, 0x6d, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00,
	0x88, 0xb5, 0x18, 0x01, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x12, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x42, 0x21, 0x42, 0x10, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0d, 0x2e, 0x3b, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_calibration_proto_rawDescOnce sync.Once
	file_calibration_proto_rawDescData = file_calibration_proto_rawDesc
)

func file_calibration_proto_rawDescGZIP() []byte {
	file_calibration_proto_rawDescOnce.Do(func() {
		file_calibration_proto_rawDescData = protoimpl.X.CompressGZIP(file_calibration_proto_rawDescData)
	})
	return file_calibration_proto_rawDescData
}

var file_calibration_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_calibration_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_calibration_proto_goTypes = []any{
	(CalibrationResult_Result)(0),                        // 0: mavsdk.rpc.calibration.CalibrationResult.Result
	(*SubscribeCalibrateGyroRequest)(nil),                // 1: mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest
	(*CalibrateGyroResponse)(nil),                        // 2: mavsdk.rpc.calibration.CalibrateGyroResponse
	(*SubscribeCalibrateAccelerometerRequest)(nil),       // 3: mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest
	(*CalibrateAccelerometerResponse)(nil),               // 4: mavsdk.rpc.calibration.CalibrateAccelerometerResponse
	(*SubscribeCalibrateMagnetometerRequest)(nil),        // 5: mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest
	(*CalibrateMagnetometerResponse)(nil),                // 6: mavsdk.rpc.calibration.CalibrateMagnetometerResponse
	(*SubscribeCalibrateLevelHorizonRequest)(nil),        // 7: mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest
	(*CalibrateLevelHorizonResponse)(nil),                // 8: mavsdk.rpc.calibration.CalibrateLevelHorizonResponse
	(*SubscribeCalibrateGimbalAccelerometerRequest)(nil), // 9: mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest
	(*CalibrateGimbalAccelerometerResponse)(nil),         // 10: mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse
	(*CancelRequest)(nil),                                // 11: mavsdk.rpc.calibration.CancelRequest
	(*CancelResponse)(nil),                               // 12: mavsdk.rpc.calibration.CancelResponse
	(*CalibrationResult)(nil),                            // 13: mavsdk.rpc.calibration.CalibrationResult
	(*ProgressData)(nil),                                 // 14: mavsdk.rpc.calibration.ProgressData
}
var file_calibration_proto_depIdxs = []int32{
	13, // 0: mavsdk.rpc.calibration.CalibrateGyroResponse.calibration_result:type_name -> mavsdk.rpc.calibration.CalibrationResult
	14, // 1: mavsdk.rpc.calibration.CalibrateGyroResponse.progress_data:type_name -> mavsdk.rpc.calibration.ProgressData
	13, // 2: mavsdk.rpc.calibration.CalibrateAccelerometerResponse.calibration_result:type_name -> mavsdk.rpc.calibration.CalibrationResult
	14, // 3: mavsdk.rpc.calibration.CalibrateAccelerometerResponse.progress_data:type_name -> mavsdk.rpc.calibration.ProgressData
	13, // 4: mavsdk.rpc.calibration.CalibrateMagnetometerResponse.calibration_result:type_name -> mavsdk.rpc.calibration.CalibrationResult
	14, // 5: mavsdk.rpc.calibration.CalibrateMagnetometerResponse.progress_data:type_name -> mavsdk.rpc.calibration.ProgressData
	13, // 6: mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.calibration_result:type_name -> mavsdk.rpc.calibration.CalibrationResult
	14, // 7: mavsdk.rpc.calibration.CalibrateLevelHorizonResponse.progress_data:type_name -> mavsdk.rpc.calibration.ProgressData
	13, // 8: mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.calibration_result:type_name -> mavsdk.rpc.calibration.CalibrationResult
	14, // 9: mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse.progress_data:type_name -> mavsdk.rpc.calibration.ProgressData
	13, // 10: mavsdk.rpc.calibration.CancelResponse.calibration_result:type_name -> mavsdk.rpc.calibration.CalibrationResult
	0,  // 11: mavsdk.rpc.calibration.CalibrationResult.result:type_name -> mavsdk.rpc.calibration.CalibrationResult.Result
	1,  // 12: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateGyro:input_type -> mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest
	3,  // 13: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateAccelerometer:input_type -> mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest
	5,  // 14: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateMagnetometer:input_type -> mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest
	7,  // 15: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateLevelHorizon:input_type -> mavsdk.rpc.calibration.SubscribeCalibrateLevelHorizonRequest
	9,  // 16: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateGimbalAccelerometer:input_type -> mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest
	11, // 17: mavsdk.rpc.calibration.CalibrationService.Cancel:input_type -> mavsdk.rpc.calibration.CancelRequest
	2,  // 18: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateGyro:output_type -> mavsdk.rpc.calibration.CalibrateGyroResponse
	4,  // 19: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateAccelerometer:output_type -> mavsdk.rpc.calibration.CalibrateAccelerometerResponse
	6,  // 20: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateMagnetometer:output_type -> mavsdk.rpc.calibration.CalibrateMagnetometerResponse
	8,  // 21: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateLevelHorizon:output_type -> mavsdk.rpc.calibration.CalibrateLevelHorizonResponse
	10, // 22: mavsdk.rpc.calibration.CalibrationService.SubscribeCalibrateGimbalAccelerometer:output_type -> mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse
	12, // 23: mavsdk.rpc.calibration.CalibrationService.Cancel:output_type -> mavsdk.rpc.calibration.CancelResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_calibration_proto_init() }
func file_calibration_proto_init() {
	if File_calibration_proto != nil {
		return
	}
	
	if !protoimpl.UnsafeEnabled {
		file_calibration_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeCalibrateGyroRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CalibrateGyroResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeCalibrateAccelerometerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CalibrateAccelerometerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeCalibrateMagnetometerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CalibrateMagnetometerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeCalibrateLevelHorizonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CalibrateLevelHorizonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeCalibrateGimbalAccelerometerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CalibrateGimbalAccelerometerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CalibrationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calibration_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_calibration_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_calibration_proto_goTypes,
		DependencyIndexes: file_calibration_proto_depIdxs,
		EnumInfos:         file_calibration_proto_enumTypes,
		MessageInfos:      file_calibration_proto_msgTypes,
	}.Build()
	File_calibration_proto = out.File
	file_calibration_proto_rawDesc = nil
	file_calibration_proto_goTypes = nil
	file_calibration_proto_depIdxs = nil
}
