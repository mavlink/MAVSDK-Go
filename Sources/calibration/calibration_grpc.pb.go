// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: calibration.proto

package calibration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CalibrationService_SubscribeCalibrateGyro_FullMethodName                = "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateGyro"
	CalibrationService_SubscribeCalibrateAccelerometer_FullMethodName       = "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateAccelerometer"
	CalibrationService_SubscribeCalibrateMagnetometer_FullMethodName        = "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateMagnetometer"
	CalibrationService_SubscribeCalibrateLevelHorizon_FullMethodName        = "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateLevelHorizon"
	CalibrationService_SubscribeCalibrateGimbalAccelerometer_FullMethodName = "/mavsdk.rpc.calibration.CalibrationService/SubscribeCalibrateGimbalAccelerometer"
	CalibrationService_Cancel_FullMethodName                                = "/mavsdk.rpc.calibration.CalibrationService/Cancel"
)

// CalibrationServiceClient is the client API for CalibrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Enable to calibrate sensors of a drone such as gyro, accelerometer, and magnetometer.
type CalibrationServiceClient interface {
	// Perform gyro calibration.
	SubscribeCalibrateGyro(ctx context.Context, in *SubscribeCalibrateGyroRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateGyroResponse], error)
	// Perform accelerometer calibration.
	SubscribeCalibrateAccelerometer(ctx context.Context, in *SubscribeCalibrateAccelerometerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateAccelerometerResponse], error)
	// Perform magnetometer calibration.
	SubscribeCalibrateMagnetometer(ctx context.Context, in *SubscribeCalibrateMagnetometerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateMagnetometerResponse], error)
	// Perform board level horizon calibration.
	SubscribeCalibrateLevelHorizon(ctx context.Context, in *SubscribeCalibrateLevelHorizonRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateLevelHorizonResponse], error)
	// Perform gimbal accelerometer calibration.
	SubscribeCalibrateGimbalAccelerometer(ctx context.Context, in *SubscribeCalibrateGimbalAccelerometerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateGimbalAccelerometerResponse], error)
	// Cancel ongoing calibration process.
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
}

type calibrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalibrationServiceClient(cc grpc.ClientConnInterface) CalibrationServiceClient {
	return &calibrationServiceClient{cc}
}

func (c *calibrationServiceClient) SubscribeCalibrateGyro(ctx context.Context, in *SubscribeCalibrateGyroRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateGyroResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[0], CalibrationService_SubscribeCalibrateGyro_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCalibrateGyroRequest, CalibrateGyroResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateGyroClient = grpc.ServerStreamingClient[CalibrateGyroResponse]

func (c *calibrationServiceClient) SubscribeCalibrateAccelerometer(ctx context.Context, in *SubscribeCalibrateAccelerometerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateAccelerometerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[1], CalibrationService_SubscribeCalibrateAccelerometer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCalibrateAccelerometerRequest, CalibrateAccelerometerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateAccelerometerClient = grpc.ServerStreamingClient[CalibrateAccelerometerResponse]

func (c *calibrationServiceClient) SubscribeCalibrateMagnetometer(ctx context.Context, in *SubscribeCalibrateMagnetometerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateMagnetometerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[2], CalibrationService_SubscribeCalibrateMagnetometer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCalibrateMagnetometerRequest, CalibrateMagnetometerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateMagnetometerClient = grpc.ServerStreamingClient[CalibrateMagnetometerResponse]

func (c *calibrationServiceClient) SubscribeCalibrateLevelHorizon(ctx context.Context, in *SubscribeCalibrateLevelHorizonRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateLevelHorizonResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[3], CalibrationService_SubscribeCalibrateLevelHorizon_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCalibrateLevelHorizonRequest, CalibrateLevelHorizonResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateLevelHorizonClient = grpc.ServerStreamingClient[CalibrateLevelHorizonResponse]

func (c *calibrationServiceClient) SubscribeCalibrateGimbalAccelerometer(ctx context.Context, in *SubscribeCalibrateGimbalAccelerometerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CalibrateGimbalAccelerometerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CalibrationService_ServiceDesc.Streams[4], CalibrationService_SubscribeCalibrateGimbalAccelerometer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCalibrateGimbalAccelerometerRequest, CalibrateGimbalAccelerometerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateGimbalAccelerometerClient = grpc.ServerStreamingClient[CalibrateGimbalAccelerometerResponse]

func (c *calibrationServiceClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, CalibrationService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalibrationServiceServer is the server API for CalibrationService service.
// All implementations must embed UnimplementedCalibrationServiceServer
// for forward compatibility.
//
// Enable to calibrate sensors of a drone such as gyro, accelerometer, and magnetometer.
type CalibrationServiceServer interface {
	// Perform gyro calibration.
	SubscribeCalibrateGyro(*SubscribeCalibrateGyroRequest, grpc.ServerStreamingServer[CalibrateGyroResponse]) error
	// Perform accelerometer calibration.
	SubscribeCalibrateAccelerometer(*SubscribeCalibrateAccelerometerRequest, grpc.ServerStreamingServer[CalibrateAccelerometerResponse]) error
	// Perform magnetometer calibration.
	SubscribeCalibrateMagnetometer(*SubscribeCalibrateMagnetometerRequest, grpc.ServerStreamingServer[CalibrateMagnetometerResponse]) error
	// Perform board level horizon calibration.
	SubscribeCalibrateLevelHorizon(*SubscribeCalibrateLevelHorizonRequest, grpc.ServerStreamingServer[CalibrateLevelHorizonResponse]) error
	// Perform gimbal accelerometer calibration.
	SubscribeCalibrateGimbalAccelerometer(*SubscribeCalibrateGimbalAccelerometerRequest, grpc.ServerStreamingServer[CalibrateGimbalAccelerometerResponse]) error
	// Cancel ongoing calibration process.
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	mustEmbedUnimplementedCalibrationServiceServer()
}

// UnimplementedCalibrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalibrationServiceServer struct{}

func (UnimplementedCalibrationServiceServer) SubscribeCalibrateGyro(*SubscribeCalibrateGyroRequest, grpc.ServerStreamingServer[CalibrateGyroResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateGyro not implemented")
}
func (UnimplementedCalibrationServiceServer) SubscribeCalibrateAccelerometer(*SubscribeCalibrateAccelerometerRequest, grpc.ServerStreamingServer[CalibrateAccelerometerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateAccelerometer not implemented")
}
func (UnimplementedCalibrationServiceServer) SubscribeCalibrateMagnetometer(*SubscribeCalibrateMagnetometerRequest, grpc.ServerStreamingServer[CalibrateMagnetometerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateMagnetometer not implemented")
}
func (UnimplementedCalibrationServiceServer) SubscribeCalibrateLevelHorizon(*SubscribeCalibrateLevelHorizonRequest, grpc.ServerStreamingServer[CalibrateLevelHorizonResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateLevelHorizon not implemented")
}
func (UnimplementedCalibrationServiceServer) SubscribeCalibrateGimbalAccelerometer(*SubscribeCalibrateGimbalAccelerometerRequest, grpc.ServerStreamingServer[CalibrateGimbalAccelerometerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCalibrateGimbalAccelerometer not implemented")
}
func (UnimplementedCalibrationServiceServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedCalibrationServiceServer) mustEmbedUnimplementedCalibrationServiceServer() {}
func (UnimplementedCalibrationServiceServer) testEmbeddedByValue()                            {}

// UnsafeCalibrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalibrationServiceServer will
// result in compilation errors.
type UnsafeCalibrationServiceServer interface {
	mustEmbedUnimplementedCalibrationServiceServer()
}

func RegisterCalibrationServiceServer(s grpc.ServiceRegistrar, srv CalibrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedCalibrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CalibrationService_ServiceDesc, srv)
}

func _CalibrationService_SubscribeCalibrateGyro_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateGyroRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateGyro(m, &grpc.GenericServerStream[SubscribeCalibrateGyroRequest, CalibrateGyroResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateGyroServer = grpc.ServerStreamingServer[CalibrateGyroResponse]

func _CalibrationService_SubscribeCalibrateAccelerometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateAccelerometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateAccelerometer(m, &grpc.GenericServerStream[SubscribeCalibrateAccelerometerRequest, CalibrateAccelerometerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateAccelerometerServer = grpc.ServerStreamingServer[CalibrateAccelerometerResponse]

func _CalibrationService_SubscribeCalibrateMagnetometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateMagnetometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateMagnetometer(m, &grpc.GenericServerStream[SubscribeCalibrateMagnetometerRequest, CalibrateMagnetometerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateMagnetometerServer = grpc.ServerStreamingServer[CalibrateMagnetometerResponse]

func _CalibrationService_SubscribeCalibrateLevelHorizon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateLevelHorizonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateLevelHorizon(m, &grpc.GenericServerStream[SubscribeCalibrateLevelHorizonRequest, CalibrateLevelHorizonResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateLevelHorizonServer = grpc.ServerStreamingServer[CalibrateLevelHorizonResponse]

func _CalibrationService_SubscribeCalibrateGimbalAccelerometer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCalibrateGimbalAccelerometerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalibrationServiceServer).SubscribeCalibrateGimbalAccelerometer(m, &grpc.GenericServerStream[SubscribeCalibrateGimbalAccelerometerRequest, CalibrateGimbalAccelerometerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CalibrationService_SubscribeCalibrateGimbalAccelerometerServer = grpc.ServerStreamingServer[CalibrateGimbalAccelerometerResponse]

func _CalibrationService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalibrationServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalibrationService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalibrationServiceServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalibrationService_ServiceDesc is the grpc.ServiceDesc for CalibrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalibrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.calibration.CalibrationService",
	HandlerType: (*CalibrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cancel",
			Handler:    _CalibrationService_Cancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCalibrateGyro",
			Handler:       _CalibrationService_SubscribeCalibrateGyro_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateAccelerometer",
			Handler:       _CalibrationService_SubscribeCalibrateAccelerometer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateMagnetometer",
			Handler:       _CalibrationService_SubscribeCalibrateMagnetometer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateLevelHorizon",
			Handler:       _CalibrationService_SubscribeCalibrateLevelHorizon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCalibrateGimbalAccelerometer",
			Handler:       _CalibrationService_SubscribeCalibrateGimbalAccelerometer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calibration.proto",
}
