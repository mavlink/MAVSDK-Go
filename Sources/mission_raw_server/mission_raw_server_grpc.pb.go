// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: mission_raw_server.proto

package mission_raw_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MissionRawServerService_SubscribeIncomingMission_FullMethodName    = "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeIncomingMission"
	MissionRawServerService_SubscribeCurrentItemChanged_FullMethodName = "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeCurrentItemChanged"
	MissionRawServerService_SetCurrentItemComplete_FullMethodName      = "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SetCurrentItemComplete"
	MissionRawServerService_SubscribeClearAll_FullMethodName           = "/mavsdk.rpc.mission_raw_server.MissionRawServerService/SubscribeClearAll"
)

// MissionRawServerServiceClient is the client API for MissionRawServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Acts as a vehicle and receives incoming missions from GCS (in raw MAVLINK format).
// Provides current mission item state, so the server can progress through missions.
type MissionRawServerServiceClient interface {
	// Subscribe to when a new mission is uploaded (asynchronous).
	SubscribeIncomingMission(ctx context.Context, in *SubscribeIncomingMissionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IncomingMissionResponse], error)
	// Subscribe to when a new current item is set
	SubscribeCurrentItemChanged(ctx context.Context, in *SubscribeCurrentItemChangedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CurrentItemChangedResponse], error)
	// Set Current item as completed
	SetCurrentItemComplete(ctx context.Context, in *SetCurrentItemCompleteRequest, opts ...grpc.CallOption) (*SetCurrentItemCompleteResponse, error)
	// Subscribe when a MISSION_CLEAR_ALL is received
	SubscribeClearAll(ctx context.Context, in *SubscribeClearAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClearAllResponse], error)
}

type missionRawServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionRawServerServiceClient(cc grpc.ClientConnInterface) MissionRawServerServiceClient {
	return &missionRawServerServiceClient{cc}
}

func (c *missionRawServerServiceClient) SubscribeIncomingMission(ctx context.Context, in *SubscribeIncomingMissionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IncomingMissionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MissionRawServerService_ServiceDesc.Streams[0], MissionRawServerService_SubscribeIncomingMission_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeIncomingMissionRequest, IncomingMissionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MissionRawServerService_SubscribeIncomingMissionClient = grpc.ServerStreamingClient[IncomingMissionResponse]

func (c *missionRawServerServiceClient) SubscribeCurrentItemChanged(ctx context.Context, in *SubscribeCurrentItemChangedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CurrentItemChangedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MissionRawServerService_ServiceDesc.Streams[1], MissionRawServerService_SubscribeCurrentItemChanged_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCurrentItemChangedRequest, CurrentItemChangedResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MissionRawServerService_SubscribeCurrentItemChangedClient = grpc.ServerStreamingClient[CurrentItemChangedResponse]

func (c *missionRawServerServiceClient) SetCurrentItemComplete(ctx context.Context, in *SetCurrentItemCompleteRequest, opts ...grpc.CallOption) (*SetCurrentItemCompleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCurrentItemCompleteResponse)
	err := c.cc.Invoke(ctx, MissionRawServerService_SetCurrentItemComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRawServerServiceClient) SubscribeClearAll(ctx context.Context, in *SubscribeClearAllRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClearAllResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MissionRawServerService_ServiceDesc.Streams[2], MissionRawServerService_SubscribeClearAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeClearAllRequest, ClearAllResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MissionRawServerService_SubscribeClearAllClient = grpc.ServerStreamingClient[ClearAllResponse]

// MissionRawServerServiceServer is the server API for MissionRawServerService service.
// All implementations must embed UnimplementedMissionRawServerServiceServer
// for forward compatibility.
//
// Acts as a vehicle and receives incoming missions from GCS (in raw MAVLINK format).
// Provides current mission item state, so the server can progress through missions.
type MissionRawServerServiceServer interface {
	// Subscribe to when a new mission is uploaded (asynchronous).
	SubscribeIncomingMission(*SubscribeIncomingMissionRequest, grpc.ServerStreamingServer[IncomingMissionResponse]) error
	// Subscribe to when a new current item is set
	SubscribeCurrentItemChanged(*SubscribeCurrentItemChangedRequest, grpc.ServerStreamingServer[CurrentItemChangedResponse]) error
	// Set Current item as completed
	SetCurrentItemComplete(context.Context, *SetCurrentItemCompleteRequest) (*SetCurrentItemCompleteResponse, error)
	// Subscribe when a MISSION_CLEAR_ALL is received
	SubscribeClearAll(*SubscribeClearAllRequest, grpc.ServerStreamingServer[ClearAllResponse]) error
	mustEmbedUnimplementedMissionRawServerServiceServer()
}

// UnimplementedMissionRawServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMissionRawServerServiceServer struct{}

func (UnimplementedMissionRawServerServiceServer) SubscribeIncomingMission(*SubscribeIncomingMissionRequest, grpc.ServerStreamingServer[IncomingMissionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeIncomingMission not implemented")
}
func (UnimplementedMissionRawServerServiceServer) SubscribeCurrentItemChanged(*SubscribeCurrentItemChangedRequest, grpc.ServerStreamingServer[CurrentItemChangedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCurrentItemChanged not implemented")
}
func (UnimplementedMissionRawServerServiceServer) SetCurrentItemComplete(context.Context, *SetCurrentItemCompleteRequest) (*SetCurrentItemCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentItemComplete not implemented")
}
func (UnimplementedMissionRawServerServiceServer) SubscribeClearAll(*SubscribeClearAllRequest, grpc.ServerStreamingServer[ClearAllResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeClearAll not implemented")
}
func (UnimplementedMissionRawServerServiceServer) mustEmbedUnimplementedMissionRawServerServiceServer() {
}
func (UnimplementedMissionRawServerServiceServer) testEmbeddedByValue() {}

// UnsafeMissionRawServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionRawServerServiceServer will
// result in compilation errors.
type UnsafeMissionRawServerServiceServer interface {
	mustEmbedUnimplementedMissionRawServerServiceServer()
}

func RegisterMissionRawServerServiceServer(s grpc.ServiceRegistrar, srv MissionRawServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedMissionRawServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MissionRawServerService_ServiceDesc, srv)
}

func _MissionRawServerService_SubscribeIncomingMission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeIncomingMissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionRawServerServiceServer).SubscribeIncomingMission(m, &grpc.GenericServerStream[SubscribeIncomingMissionRequest, IncomingMissionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MissionRawServerService_SubscribeIncomingMissionServer = grpc.ServerStreamingServer[IncomingMissionResponse]

func _MissionRawServerService_SubscribeCurrentItemChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCurrentItemChangedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionRawServerServiceServer).SubscribeCurrentItemChanged(m, &grpc.GenericServerStream[SubscribeCurrentItemChangedRequest, CurrentItemChangedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MissionRawServerService_SubscribeCurrentItemChangedServer = grpc.ServerStreamingServer[CurrentItemChangedResponse]

func _MissionRawServerService_SetCurrentItemComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentItemCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRawServerServiceServer).SetCurrentItemComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionRawServerService_SetCurrentItemComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRawServerServiceServer).SetCurrentItemComplete(ctx, req.(*SetCurrentItemCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRawServerService_SubscribeClearAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeClearAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MissionRawServerServiceServer).SubscribeClearAll(m, &grpc.GenericServerStream[SubscribeClearAllRequest, ClearAllResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MissionRawServerService_SubscribeClearAllServer = grpc.ServerStreamingServer[ClearAllResponse]

// MissionRawServerService_ServiceDesc is the grpc.ServiceDesc for MissionRawServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionRawServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.mission_raw_server.MissionRawServerService",
	HandlerType: (*MissionRawServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCurrentItemComplete",
			Handler:    _MissionRawServerService_SetCurrentItemComplete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeIncomingMission",
			Handler:       _MissionRawServerService_SubscribeIncomingMission_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCurrentItemChanged",
			Handler:       _MissionRawServerService_SubscribeCurrentItemChanged_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeClearAll",
			Handler:       _MissionRawServerService_SubscribeClearAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mission_raw_server.proto",
}
