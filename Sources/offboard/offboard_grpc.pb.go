// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: offboard.proto

package offboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OffboardService_Start_FullMethodName                              = "/mavsdk.rpc.offboard.OffboardService/Start"
	OffboardService_Stop_FullMethodName                               = "/mavsdk.rpc.offboard.OffboardService/Stop"
	OffboardService_IsActive_FullMethodName                           = "/mavsdk.rpc.offboard.OffboardService/IsActive"
	OffboardService_SetAttitude_FullMethodName                        = "/mavsdk.rpc.offboard.OffboardService/SetAttitude"
	OffboardService_SetActuatorControl_FullMethodName                 = "/mavsdk.rpc.offboard.OffboardService/SetActuatorControl"
	OffboardService_SetAttitudeRate_FullMethodName                    = "/mavsdk.rpc.offboard.OffboardService/SetAttitudeRate"
	OffboardService_SetPositionNed_FullMethodName                     = "/mavsdk.rpc.offboard.OffboardService/SetPositionNed"
	OffboardService_SetPositionGlobal_FullMethodName                  = "/mavsdk.rpc.offboard.OffboardService/SetPositionGlobal"
	OffboardService_SetVelocityBody_FullMethodName                    = "/mavsdk.rpc.offboard.OffboardService/SetVelocityBody"
	OffboardService_SetVelocityNed_FullMethodName                     = "/mavsdk.rpc.offboard.OffboardService/SetVelocityNed"
	OffboardService_SetPositionVelocityNed_FullMethodName             = "/mavsdk.rpc.offboard.OffboardService/SetPositionVelocityNed"
	OffboardService_SetPositionVelocityAccelerationNed_FullMethodName = "/mavsdk.rpc.offboard.OffboardService/SetPositionVelocityAccelerationNed"
	OffboardService_SetAccelerationNed_FullMethodName                 = "/mavsdk.rpc.offboard.OffboardService/SetAccelerationNed"
)

// OffboardServiceClient is the client API for OffboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Control a drone with position, velocity, attitude or motor commands.
//
// The module is called offboard because the commands can be sent from external sources
// as opposed to onboard control right inside the autopilot "board".
//
// Client code must specify a setpoint before starting offboard mode.
// Mavsdk automatically sends setpoints at 20Hz (PX4 Offboard mode requires that setpoints
// are minimally sent at 2Hz).
type OffboardServiceClient interface {
	// Start offboard control.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Stop offboard control.
	//
	// The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Check if offboard control is active.
	//
	// True means that the vehicle is in offboard mode and we are actively sending
	// setpoints.
	IsActive(ctx context.Context, in *IsActiveRequest, opts ...grpc.CallOption) (*IsActiveResponse, error)
	// Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
	SetAttitude(ctx context.Context, in *SetAttitudeRequest, opts ...grpc.CallOption) (*SetAttitudeResponse, error)
	// Set direct actuator control values to groups #0 and #1.
	//
	// First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
	// actuator_control.num_controls more than 8).
	SetActuatorControl(ctx context.Context, in *SetActuatorControlRequest, opts ...grpc.CallOption) (*SetActuatorControlResponse, error)
	// Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
	SetAttitudeRate(ctx context.Context, in *SetAttitudeRateRequest, opts ...grpc.CallOption) (*SetAttitudeRateResponse, error)
	// Set the position in NED coordinates and yaw.
	SetPositionNed(ctx context.Context, in *SetPositionNedRequest, opts ...grpc.CallOption) (*SetPositionNedResponse, error)
	// Set the position in Global coordinates (latitude, longitude, altitude) and yaw
	SetPositionGlobal(ctx context.Context, in *SetPositionGlobalRequest, opts ...grpc.CallOption) (*SetPositionGlobalResponse, error)
	// Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
	SetVelocityBody(ctx context.Context, in *SetVelocityBodyRequest, opts ...grpc.CallOption) (*SetVelocityBodyResponse, error)
	// Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
	SetVelocityNed(ctx context.Context, in *SetVelocityNedRequest, opts ...grpc.CallOption) (*SetVelocityNedResponse, error)
	// Set the position in NED coordinates, with the velocity to be used as feed-forward.
	SetPositionVelocityNed(ctx context.Context, in *SetPositionVelocityNedRequest, opts ...grpc.CallOption) (*SetPositionVelocityNedResponse, error)
	// Set the position, velocity and acceleration in NED coordinates, with velocity and acceleration used as feed-forward.
	SetPositionVelocityAccelerationNed(ctx context.Context, in *SetPositionVelocityAccelerationNedRequest, opts ...grpc.CallOption) (*SetPositionVelocityAccelerationNedResponse, error)
	// Set the acceleration in NED coordinates.
	SetAccelerationNed(ctx context.Context, in *SetAccelerationNedRequest, opts ...grpc.CallOption) (*SetAccelerationNedResponse, error)
}

type offboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOffboardServiceClient(cc grpc.ClientConnInterface) OffboardServiceClient {
	return &offboardServiceClient{cc}
}

func (c *offboardServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, OffboardService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, OffboardService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) IsActive(ctx context.Context, in *IsActiveRequest, opts ...grpc.CallOption) (*IsActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsActiveResponse)
	err := c.cc.Invoke(ctx, OffboardService_IsActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetAttitude(ctx context.Context, in *SetAttitudeRequest, opts ...grpc.CallOption) (*SetAttitudeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAttitudeResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetAttitude_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetActuatorControl(ctx context.Context, in *SetActuatorControlRequest, opts ...grpc.CallOption) (*SetActuatorControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActuatorControlResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetActuatorControl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetAttitudeRate(ctx context.Context, in *SetAttitudeRateRequest, opts ...grpc.CallOption) (*SetAttitudeRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAttitudeRateResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetAttitudeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetPositionNed(ctx context.Context, in *SetPositionNedRequest, opts ...grpc.CallOption) (*SetPositionNedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPositionNedResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetPositionNed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetPositionGlobal(ctx context.Context, in *SetPositionGlobalRequest, opts ...grpc.CallOption) (*SetPositionGlobalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPositionGlobalResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetPositionGlobal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetVelocityBody(ctx context.Context, in *SetVelocityBodyRequest, opts ...grpc.CallOption) (*SetVelocityBodyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVelocityBodyResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetVelocityBody_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetVelocityNed(ctx context.Context, in *SetVelocityNedRequest, opts ...grpc.CallOption) (*SetVelocityNedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVelocityNedResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetVelocityNed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetPositionVelocityNed(ctx context.Context, in *SetPositionVelocityNedRequest, opts ...grpc.CallOption) (*SetPositionVelocityNedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPositionVelocityNedResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetPositionVelocityNed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetPositionVelocityAccelerationNed(ctx context.Context, in *SetPositionVelocityAccelerationNedRequest, opts ...grpc.CallOption) (*SetPositionVelocityAccelerationNedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPositionVelocityAccelerationNedResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetPositionVelocityAccelerationNed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offboardServiceClient) SetAccelerationNed(ctx context.Context, in *SetAccelerationNedRequest, opts ...grpc.CallOption) (*SetAccelerationNedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAccelerationNedResponse)
	err := c.cc.Invoke(ctx, OffboardService_SetAccelerationNed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OffboardServiceServer is the server API for OffboardService service.
// All implementations must embed UnimplementedOffboardServiceServer
// for forward compatibility.
//
// *
// Control a drone with position, velocity, attitude or motor commands.
//
// The module is called offboard because the commands can be sent from external sources
// as opposed to onboard control right inside the autopilot "board".
//
// Client code must specify a setpoint before starting offboard mode.
// Mavsdk automatically sends setpoints at 20Hz (PX4 Offboard mode requires that setpoints
// are minimally sent at 2Hz).
type OffboardServiceServer interface {
	// Start offboard control.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Stop offboard control.
	//
	// The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Check if offboard control is active.
	//
	// True means that the vehicle is in offboard mode and we are actively sending
	// setpoints.
	IsActive(context.Context, *IsActiveRequest) (*IsActiveResponse, error)
	// Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
	SetAttitude(context.Context, *SetAttitudeRequest) (*SetAttitudeResponse, error)
	// Set direct actuator control values to groups #0 and #1.
	//
	// First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
	// actuator_control.num_controls more than 8).
	SetActuatorControl(context.Context, *SetActuatorControlRequest) (*SetActuatorControlResponse, error)
	// Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
	SetAttitudeRate(context.Context, *SetAttitudeRateRequest) (*SetAttitudeRateResponse, error)
	// Set the position in NED coordinates and yaw.
	SetPositionNed(context.Context, *SetPositionNedRequest) (*SetPositionNedResponse, error)
	// Set the position in Global coordinates (latitude, longitude, altitude) and yaw
	SetPositionGlobal(context.Context, *SetPositionGlobalRequest) (*SetPositionGlobalResponse, error)
	// Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
	SetVelocityBody(context.Context, *SetVelocityBodyRequest) (*SetVelocityBodyResponse, error)
	// Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
	SetVelocityNed(context.Context, *SetVelocityNedRequest) (*SetVelocityNedResponse, error)
	// Set the position in NED coordinates, with the velocity to be used as feed-forward.
	SetPositionVelocityNed(context.Context, *SetPositionVelocityNedRequest) (*SetPositionVelocityNedResponse, error)
	// Set the position, velocity and acceleration in NED coordinates, with velocity and acceleration used as feed-forward.
	SetPositionVelocityAccelerationNed(context.Context, *SetPositionVelocityAccelerationNedRequest) (*SetPositionVelocityAccelerationNedResponse, error)
	// Set the acceleration in NED coordinates.
	SetAccelerationNed(context.Context, *SetAccelerationNedRequest) (*SetAccelerationNedResponse, error)
	mustEmbedUnimplementedOffboardServiceServer()
}

// UnimplementedOffboardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOffboardServiceServer struct{}

func (UnimplementedOffboardServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedOffboardServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedOffboardServiceServer) IsActive(context.Context, *IsActiveRequest) (*IsActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsActive not implemented")
}
func (UnimplementedOffboardServiceServer) SetAttitude(context.Context, *SetAttitudeRequest) (*SetAttitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttitude not implemented")
}
func (UnimplementedOffboardServiceServer) SetActuatorControl(context.Context, *SetActuatorControlRequest) (*SetActuatorControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActuatorControl not implemented")
}
func (UnimplementedOffboardServiceServer) SetAttitudeRate(context.Context, *SetAttitudeRateRequest) (*SetAttitudeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttitudeRate not implemented")
}
func (UnimplementedOffboardServiceServer) SetPositionNed(context.Context, *SetPositionNedRequest) (*SetPositionNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPositionNed not implemented")
}
func (UnimplementedOffboardServiceServer) SetPositionGlobal(context.Context, *SetPositionGlobalRequest) (*SetPositionGlobalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPositionGlobal not implemented")
}
func (UnimplementedOffboardServiceServer) SetVelocityBody(context.Context, *SetVelocityBodyRequest) (*SetVelocityBodyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVelocityBody not implemented")
}
func (UnimplementedOffboardServiceServer) SetVelocityNed(context.Context, *SetVelocityNedRequest) (*SetVelocityNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVelocityNed not implemented")
}
func (UnimplementedOffboardServiceServer) SetPositionVelocityNed(context.Context, *SetPositionVelocityNedRequest) (*SetPositionVelocityNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPositionVelocityNed not implemented")
}
func (UnimplementedOffboardServiceServer) SetPositionVelocityAccelerationNed(context.Context, *SetPositionVelocityAccelerationNedRequest) (*SetPositionVelocityAccelerationNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPositionVelocityAccelerationNed not implemented")
}
func (UnimplementedOffboardServiceServer) SetAccelerationNed(context.Context, *SetAccelerationNedRequest) (*SetAccelerationNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccelerationNed not implemented")
}
func (UnimplementedOffboardServiceServer) mustEmbedUnimplementedOffboardServiceServer() {}
func (UnimplementedOffboardServiceServer) testEmbeddedByValue()                         {}

// UnsafeOffboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OffboardServiceServer will
// result in compilation errors.
type UnsafeOffboardServiceServer interface {
	mustEmbedUnimplementedOffboardServiceServer()
}

func RegisterOffboardServiceServer(s grpc.ServiceRegistrar, srv OffboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedOffboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OffboardService_ServiceDesc, srv)
}

func _OffboardService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_IsActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).IsActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_IsActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).IsActive(ctx, req.(*IsActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetAttitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetAttitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetAttitude_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetAttitude(ctx, req.(*SetAttitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetActuatorControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActuatorControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetActuatorControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetActuatorControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetActuatorControl(ctx, req.(*SetActuatorControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetAttitudeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttitudeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetAttitudeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetAttitudeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetAttitudeRate(ctx, req.(*SetAttitudeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetPositionNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPositionNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetPositionNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetPositionNed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetPositionNed(ctx, req.(*SetPositionNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetPositionGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPositionGlobalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetPositionGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetPositionGlobal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetPositionGlobal(ctx, req.(*SetPositionGlobalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetVelocityBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVelocityBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetVelocityBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetVelocityBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetVelocityBody(ctx, req.(*SetVelocityBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetVelocityNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVelocityNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetVelocityNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetVelocityNed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetVelocityNed(ctx, req.(*SetVelocityNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetPositionVelocityNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPositionVelocityNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetPositionVelocityNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetPositionVelocityNed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetPositionVelocityNed(ctx, req.(*SetPositionVelocityNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetPositionVelocityAccelerationNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPositionVelocityAccelerationNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetPositionVelocityAccelerationNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetPositionVelocityAccelerationNed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetPositionVelocityAccelerationNed(ctx, req.(*SetPositionVelocityAccelerationNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffboardService_SetAccelerationNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccelerationNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffboardServiceServer).SetAccelerationNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffboardService_SetAccelerationNed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffboardServiceServer).SetAccelerationNed(ctx, req.(*SetAccelerationNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OffboardService_ServiceDesc is the grpc.ServiceDesc for OffboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OffboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.offboard.OffboardService",
	HandlerType: (*OffboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _OffboardService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _OffboardService_Stop_Handler,
		},
		{
			MethodName: "IsActive",
			Handler:    _OffboardService_IsActive_Handler,
		},
		{
			MethodName: "SetAttitude",
			Handler:    _OffboardService_SetAttitude_Handler,
		},
		{
			MethodName: "SetActuatorControl",
			Handler:    _OffboardService_SetActuatorControl_Handler,
		},
		{
			MethodName: "SetAttitudeRate",
			Handler:    _OffboardService_SetAttitudeRate_Handler,
		},
		{
			MethodName: "SetPositionNed",
			Handler:    _OffboardService_SetPositionNed_Handler,
		},
		{
			MethodName: "SetPositionGlobal",
			Handler:    _OffboardService_SetPositionGlobal_Handler,
		},
		{
			MethodName: "SetVelocityBody",
			Handler:    _OffboardService_SetVelocityBody_Handler,
		},
		{
			MethodName: "SetVelocityNed",
			Handler:    _OffboardService_SetVelocityNed_Handler,
		},
		{
			MethodName: "SetPositionVelocityNed",
			Handler:    _OffboardService_SetPositionVelocityNed_Handler,
		},
		{
			MethodName: "SetPositionVelocityAccelerationNed",
			Handler:    _OffboardService_SetPositionVelocityAccelerationNed_Handler,
		},
		{
			MethodName: "SetAccelerationNed",
			Handler:    _OffboardService_SetAccelerationNed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offboard.proto",
}
