// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: telemetry.proto

package telemetry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GPS fix type.
type FixType int32

const (
	FixType_FIX_TYPE_NO_GPS    FixType = 0 // No GPS connected
	FixType_FIX_TYPE_NO_FIX    FixType = 1 // No position information, GPS is connected
	FixType_FIX_TYPE_FIX_2D    FixType = 2 // 2D position
	FixType_FIX_TYPE_FIX_3D    FixType = 3 // 3D position
	FixType_FIX_TYPE_FIX_DGPS  FixType = 4 // DGPS/SBAS aided 3D position
	FixType_FIX_TYPE_RTK_FLOAT FixType = 5 // RTK float, 3D position
	FixType_FIX_TYPE_RTK_FIXED FixType = 6 // RTK Fixed, 3D position
)

// Enum value maps for FixType.
var (
	FixType_name = map[int32]string{
		0: "FIX_TYPE_NO_GPS",
		1: "FIX_TYPE_NO_FIX",
		2: "FIX_TYPE_FIX_2D",
		3: "FIX_TYPE_FIX_3D",
		4: "FIX_TYPE_FIX_DGPS",
		5: "FIX_TYPE_RTK_FLOAT",
		6: "FIX_TYPE_RTK_FIXED",
	}
	FixType_value = map[string]int32{
		"FIX_TYPE_NO_GPS":    0,
		"FIX_TYPE_NO_FIX":    1,
		"FIX_TYPE_FIX_2D":    2,
		"FIX_TYPE_FIX_3D":    3,
		"FIX_TYPE_FIX_DGPS":  4,
		"FIX_TYPE_RTK_FLOAT": 5,
		"FIX_TYPE_RTK_FIXED": 6,
	}
)

func (x FixType) Enum() *FixType {
	p := new(FixType)
	*p = x
	return p
}

func (x FixType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixType) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[0].Descriptor()
}

func (FixType) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[0]
}

func (x FixType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixType.Descriptor instead.
func (FixType) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0}
}

// Flight modes.
//
// For more information about flight modes, check out
// https://docs.px4.io/master/en/config/flight_mode.html.
type FlightMode int32

const (
	FlightMode_FLIGHT_MODE_UNKNOWN          FlightMode = 0  // Mode not known
	FlightMode_FLIGHT_MODE_READY            FlightMode = 1  // Armed and ready to take off
	FlightMode_FLIGHT_MODE_TAKEOFF          FlightMode = 2  // Taking off
	FlightMode_FLIGHT_MODE_HOLD             FlightMode = 3  // Holding (hovering in place (or circling for fixed-wing vehicles)
	FlightMode_FLIGHT_MODE_MISSION          FlightMode = 4  // In mission
	FlightMode_FLIGHT_MODE_RETURN_TO_LAUNCH FlightMode = 5  // Returning to launch position (then landing)
	FlightMode_FLIGHT_MODE_LAND             FlightMode = 6  // Landing
	FlightMode_FLIGHT_MODE_OFFBOARD         FlightMode = 7  // In 'offboard' mode
	FlightMode_FLIGHT_MODE_FOLLOW_ME        FlightMode = 8  // In 'follow-me' mode
	FlightMode_FLIGHT_MODE_MANUAL           FlightMode = 9  // In 'Manual' mode
	FlightMode_FLIGHT_MODE_ALTCTL           FlightMode = 10 // In 'Altitude Control' mode
	FlightMode_FLIGHT_MODE_POSCTL           FlightMode = 11 // In 'Position Control' mode
	FlightMode_FLIGHT_MODE_ACRO             FlightMode = 12 // In 'Acro' mode
	FlightMode_FLIGHT_MODE_STABILIZED       FlightMode = 13 // In 'Stabilize' mode
	FlightMode_FLIGHT_MODE_RATTITUDE        FlightMode = 14 // In 'Rattitude' mode
)

// Enum value maps for FlightMode.
var (
	FlightMode_name = map[int32]string{
		0:  "FLIGHT_MODE_UNKNOWN",
		1:  "FLIGHT_MODE_READY",
		2:  "FLIGHT_MODE_TAKEOFF",
		3:  "FLIGHT_MODE_HOLD",
		4:  "FLIGHT_MODE_MISSION",
		5:  "FLIGHT_MODE_RETURN_TO_LAUNCH",
		6:  "FLIGHT_MODE_LAND",
		7:  "FLIGHT_MODE_OFFBOARD",
		8:  "FLIGHT_MODE_FOLLOW_ME",
		9:  "FLIGHT_MODE_MANUAL",
		10: "FLIGHT_MODE_ALTCTL",
		11: "FLIGHT_MODE_POSCTL",
		12: "FLIGHT_MODE_ACRO",
		13: "FLIGHT_MODE_STABILIZED",
		14: "FLIGHT_MODE_RATTITUDE",
	}
	FlightMode_value = map[string]int32{
		"FLIGHT_MODE_UNKNOWN":          0,
		"FLIGHT_MODE_READY":            1,
		"FLIGHT_MODE_TAKEOFF":          2,
		"FLIGHT_MODE_HOLD":             3,
		"FLIGHT_MODE_MISSION":          4,
		"FLIGHT_MODE_RETURN_TO_LAUNCH": 5,
		"FLIGHT_MODE_LAND":             6,
		"FLIGHT_MODE_OFFBOARD":         7,
		"FLIGHT_MODE_FOLLOW_ME":        8,
		"FLIGHT_MODE_MANUAL":           9,
		"FLIGHT_MODE_ALTCTL":           10,
		"FLIGHT_MODE_POSCTL":           11,
		"FLIGHT_MODE_ACRO":             12,
		"FLIGHT_MODE_STABILIZED":       13,
		"FLIGHT_MODE_RATTITUDE":        14,
	}
)

func (x FlightMode) Enum() *FlightMode {
	p := new(FlightMode)
	*p = x
	return p
}

func (x FlightMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightMode) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[1].Descriptor()
}

func (FlightMode) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[1]
}

func (x FlightMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightMode.Descriptor instead.
func (FlightMode) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{1}
}

// Status types.
type StatusTextType int32

const (
	StatusTextType_STATUS_TEXT_TYPE_DEBUG     StatusTextType = 0 // Debug
	StatusTextType_STATUS_TEXT_TYPE_INFO      StatusTextType = 1 // Information
	StatusTextType_STATUS_TEXT_TYPE_NOTICE    StatusTextType = 2 // Notice
	StatusTextType_STATUS_TEXT_TYPE_WARNING   StatusTextType = 3 // Warning
	StatusTextType_STATUS_TEXT_TYPE_ERROR     StatusTextType = 4 // Error
	StatusTextType_STATUS_TEXT_TYPE_CRITICAL  StatusTextType = 5 // Critical
	StatusTextType_STATUS_TEXT_TYPE_ALERT     StatusTextType = 6 // Alert
	StatusTextType_STATUS_TEXT_TYPE_EMERGENCY StatusTextType = 7 // Emergency
)

// Enum value maps for StatusTextType.
var (
	StatusTextType_name = map[int32]string{
		0: "STATUS_TEXT_TYPE_DEBUG",
		1: "STATUS_TEXT_TYPE_INFO",
		2: "STATUS_TEXT_TYPE_NOTICE",
		3: "STATUS_TEXT_TYPE_WARNING",
		4: "STATUS_TEXT_TYPE_ERROR",
		5: "STATUS_TEXT_TYPE_CRITICAL",
		6: "STATUS_TEXT_TYPE_ALERT",
		7: "STATUS_TEXT_TYPE_EMERGENCY",
	}
	StatusTextType_value = map[string]int32{
		"STATUS_TEXT_TYPE_DEBUG":     0,
		"STATUS_TEXT_TYPE_INFO":      1,
		"STATUS_TEXT_TYPE_NOTICE":    2,
		"STATUS_TEXT_TYPE_WARNING":   3,
		"STATUS_TEXT_TYPE_ERROR":     4,
		"STATUS_TEXT_TYPE_CRITICAL":  5,
		"STATUS_TEXT_TYPE_ALERT":     6,
		"STATUS_TEXT_TYPE_EMERGENCY": 7,
	}
)

func (x StatusTextType) Enum() *StatusTextType {
	p := new(StatusTextType)
	*p = x
	return p
}

func (x StatusTextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusTextType) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[2].Descriptor()
}

func (StatusTextType) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[2]
}

func (x StatusTextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusTextType.Descriptor instead.
func (StatusTextType) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{2}
}

// Landed State enumeration.
type LandedState int32

const (
	LandedState_LANDED_STATE_UNKNOWN    LandedState = 0 // Landed state is unknown
	LandedState_LANDED_STATE_ON_GROUND  LandedState = 1 // The vehicle is on the ground
	LandedState_LANDED_STATE_IN_AIR     LandedState = 2 // The vehicle is in the air
	LandedState_LANDED_STATE_TAKING_OFF LandedState = 3 // The vehicle is taking off
	LandedState_LANDED_STATE_LANDING    LandedState = 4 // The vehicle is landing
)

// Enum value maps for LandedState.
var (
	LandedState_name = map[int32]string{
		0: "LANDED_STATE_UNKNOWN",
		1: "LANDED_STATE_ON_GROUND",
		2: "LANDED_STATE_IN_AIR",
		3: "LANDED_STATE_TAKING_OFF",
		4: "LANDED_STATE_LANDING",
	}
	LandedState_value = map[string]int32{
		"LANDED_STATE_UNKNOWN":    0,
		"LANDED_STATE_ON_GROUND":  1,
		"LANDED_STATE_IN_AIR":     2,
		"LANDED_STATE_TAKING_OFF": 3,
		"LANDED_STATE_LANDING":    4,
	}
)

func (x LandedState) Enum() *LandedState {
	p := new(LandedState)
	*p = x
	return p
}

func (x LandedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LandedState) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[3].Descriptor()
}

func (LandedState) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[3]
}

func (x LandedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LandedState.Descriptor instead.
func (LandedState) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{3}
}

// VTOL State enumeration
type VtolState int32

const (
	VtolState_VTOL_STATE_UNDEFINED        VtolState = 0 // MAV is not configured as VTOL
	VtolState_VTOL_STATE_TRANSITION_TO_FW VtolState = 1 // VTOL is in transition from multicopter to fixed-wing
	VtolState_VTOL_STATE_TRANSITION_TO_MC VtolState = 2 // VTOL is in transition from fixed-wing to multicopter
	VtolState_VTOL_STATE_MC               VtolState = 3 // VTOL is in multicopter state
	VtolState_VTOL_STATE_FW               VtolState = 4 // VTOL is in fixed-wing state
)

// Enum value maps for VtolState.
var (
	VtolState_name = map[int32]string{
		0: "VTOL_STATE_UNDEFINED",
		1: "VTOL_STATE_TRANSITION_TO_FW",
		2: "VTOL_STATE_TRANSITION_TO_MC",
		3: "VTOL_STATE_MC",
		4: "VTOL_STATE_FW",
	}
	VtolState_value = map[string]int32{
		"VTOL_STATE_UNDEFINED":        0,
		"VTOL_STATE_TRANSITION_TO_FW": 1,
		"VTOL_STATE_TRANSITION_TO_MC": 2,
		"VTOL_STATE_MC":               3,
		"VTOL_STATE_FW":               4,
	}
)

func (x VtolState) Enum() *VtolState {
	p := new(VtolState)
	*p = x
	return p
}

func (x VtolState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VtolState) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[4].Descriptor()
}

func (VtolState) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[4]
}

func (x VtolState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VtolState.Descriptor instead.
func (VtolState) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{4}
}

// Mavlink frame id
type Odometry_MavFrame int32

const (
	Odometry_MAV_FRAME_UNDEF      Odometry_MavFrame = 0  // Frame is undefined.
	Odometry_MAV_FRAME_BODY_NED   Odometry_MavFrame = 8  // Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
	Odometry_MAV_FRAME_VISION_NED Odometry_MavFrame = 16 // Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: north, y: east, z: down).
	Odometry_MAV_FRAME_ESTIM_NED  Odometry_MavFrame = 18 // Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: north, y: east, z: down).
)

// Enum value maps for Odometry_MavFrame.
var (
	Odometry_MavFrame_name = map[int32]string{
		0:  "MAV_FRAME_UNDEF",
		8:  "MAV_FRAME_BODY_NED",
		16: "MAV_FRAME_VISION_NED",
		18: "MAV_FRAME_ESTIM_NED",
	}
	Odometry_MavFrame_value = map[string]int32{
		"MAV_FRAME_UNDEF":      0,
		"MAV_FRAME_BODY_NED":   8,
		"MAV_FRAME_VISION_NED": 16,
		"MAV_FRAME_ESTIM_NED":  18,
	}
)

func (x Odometry_MavFrame) Enum() *Odometry_MavFrame {
	p := new(Odometry_MavFrame)
	*p = x
	return p
}

func (x Odometry_MavFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Odometry_MavFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[5].Descriptor()
}

func (Odometry_MavFrame) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[5]
}

func (x Odometry_MavFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Odometry_MavFrame.Descriptor instead.
func (Odometry_MavFrame) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{131, 0}
}

// Possible results returned for telemetry requests.
type TelemetryResult_Result int32

const (
	TelemetryResult_RESULT_UNKNOWN          TelemetryResult_Result = 0 // Unknown result
	TelemetryResult_RESULT_SUCCESS          TelemetryResult_Result = 1 // Success: the telemetry command was accepted by the vehicle
	TelemetryResult_RESULT_NO_SYSTEM        TelemetryResult_Result = 2 // No system connected
	TelemetryResult_RESULT_CONNECTION_ERROR TelemetryResult_Result = 3 // Connection error
	TelemetryResult_RESULT_BUSY             TelemetryResult_Result = 4 // Vehicle is busy
	TelemetryResult_RESULT_COMMAND_DENIED   TelemetryResult_Result = 5 // Command refused by vehicle
	TelemetryResult_RESULT_TIMEOUT          TelemetryResult_Result = 6 // Request timed out
	TelemetryResult_RESULT_UNSUPPORTED      TelemetryResult_Result = 7 // Request not supported
)

// Enum value maps for TelemetryResult_Result.
var (
	TelemetryResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_NO_SYSTEM",
		3: "RESULT_CONNECTION_ERROR",
		4: "RESULT_BUSY",
		5: "RESULT_COMMAND_DENIED",
		6: "RESULT_TIMEOUT",
		7: "RESULT_UNSUPPORTED",
	}
	TelemetryResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":          0,
		"RESULT_SUCCESS":          1,
		"RESULT_NO_SYSTEM":        2,
		"RESULT_CONNECTION_ERROR": 3,
		"RESULT_BUSY":             4,
		"RESULT_COMMAND_DENIED":   5,
		"RESULT_TIMEOUT":          6,
		"RESULT_UNSUPPORTED":      7,
	}
)

func (x TelemetryResult_Result) Enum() *TelemetryResult_Result {
	p := new(TelemetryResult_Result)
	*p = x
	return p
}

func (x TelemetryResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[6].Descriptor()
}

func (TelemetryResult_Result) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[6]
}

func (x TelemetryResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryResult_Result.Descriptor instead.
func (TelemetryResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{145, 0}
}

type SubscribePositionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribePositionRequest) Reset() {
	*x = SubscribePositionRequest{}
	mi := &file_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribePositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePositionRequest) ProtoMessage() {}

func (x *SubscribePositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePositionRequest.ProtoReflect.Descriptor instead.
func (*SubscribePositionRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0}
}

type PositionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      *Position              `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"` // The next position
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionResponse) Reset() {
	*x = PositionResponse{}
	mi := &file_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionResponse) ProtoMessage() {}

func (x *PositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionResponse.ProtoReflect.Descriptor instead.
func (*PositionResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *PositionResponse) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type SubscribeHomeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeHomeRequest) Reset() {
	*x = SubscribeHomeRequest{}
	mi := &file_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeHomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHomeRequest) ProtoMessage() {}

func (x *SubscribeHomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHomeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeHomeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{2}
}

type HomeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Home          *Position              `protobuf:"bytes,1,opt,name=home,proto3" json:"home,omitempty"` // The next home position
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HomeResponse) Reset() {
	*x = HomeResponse{}
	mi := &file_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeResponse) ProtoMessage() {}

func (x *HomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeResponse.ProtoReflect.Descriptor instead.
func (*HomeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *HomeResponse) GetHome() *Position {
	if x != nil {
		return x.Home
	}
	return nil
}

type SubscribeInAirRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeInAirRequest) Reset() {
	*x = SubscribeInAirRequest{}
	mi := &file_telemetry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeInAirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeInAirRequest) ProtoMessage() {}

func (x *SubscribeInAirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeInAirRequest.ProtoReflect.Descriptor instead.
func (*SubscribeInAirRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{4}
}

type InAirResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsInAir       bool                   `protobuf:"varint,1,opt,name=is_in_air,json=isInAir,proto3" json:"is_in_air,omitempty"` // The next 'in-air' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InAirResponse) Reset() {
	*x = InAirResponse{}
	mi := &file_telemetry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InAirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InAirResponse) ProtoMessage() {}

func (x *InAirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InAirResponse.ProtoReflect.Descriptor instead.
func (*InAirResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *InAirResponse) GetIsInAir() bool {
	if x != nil {
		return x.IsInAir
	}
	return false
}

type SubscribeLandedStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeLandedStateRequest) Reset() {
	*x = SubscribeLandedStateRequest{}
	mi := &file_telemetry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeLandedStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLandedStateRequest) ProtoMessage() {}

func (x *SubscribeLandedStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLandedStateRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLandedStateRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{6}
}

type LandedStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LandedState   LandedState            `protobuf:"varint,1,opt,name=landed_state,json=landedState,proto3,enum=mavsdk.rpc.telemetry.LandedState" json:"landed_state,omitempty"` // The next 'landed' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LandedStateResponse) Reset() {
	*x = LandedStateResponse{}
	mi := &file_telemetry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LandedStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandedStateResponse) ProtoMessage() {}

func (x *LandedStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandedStateResponse.ProtoReflect.Descriptor instead.
func (*LandedStateResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *LandedStateResponse) GetLandedState() LandedState {
	if x != nil {
		return x.LandedState
	}
	return LandedState_LANDED_STATE_UNKNOWN
}

type SubscribeArmedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeArmedRequest) Reset() {
	*x = SubscribeArmedRequest{}
	mi := &file_telemetry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeArmedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeArmedRequest) ProtoMessage() {}

func (x *SubscribeArmedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeArmedRequest.ProtoReflect.Descriptor instead.
func (*SubscribeArmedRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{8}
}

type ArmedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsArmed       bool                   `protobuf:"varint,1,opt,name=is_armed,json=isArmed,proto3" json:"is_armed,omitempty"` // The next 'armed' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArmedResponse) Reset() {
	*x = ArmedResponse{}
	mi := &file_telemetry_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArmedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmedResponse) ProtoMessage() {}

func (x *ArmedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmedResponse.ProtoReflect.Descriptor instead.
func (*ArmedResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *ArmedResponse) GetIsArmed() bool {
	if x != nil {
		return x.IsArmed
	}
	return false
}

type SubscribeVtolStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeVtolStateRequest) Reset() {
	*x = SubscribeVtolStateRequest{}
	mi := &file_telemetry_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeVtolStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeVtolStateRequest) ProtoMessage() {}

func (x *SubscribeVtolStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeVtolStateRequest.ProtoReflect.Descriptor instead.
func (*SubscribeVtolStateRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{10}
}

type VtolStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VtolState     VtolState              `protobuf:"varint,1,opt,name=vtol_state,json=vtolState,proto3,enum=mavsdk.rpc.telemetry.VtolState" json:"vtol_state,omitempty"` // The next 'vtol' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VtolStateResponse) Reset() {
	*x = VtolStateResponse{}
	mi := &file_telemetry_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VtolStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VtolStateResponse) ProtoMessage() {}

func (x *VtolStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VtolStateResponse.ProtoReflect.Descriptor instead.
func (*VtolStateResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{11}
}

func (x *VtolStateResponse) GetVtolState() VtolState {
	if x != nil {
		return x.VtolState
	}
	return VtolState_VTOL_STATE_UNDEFINED
}

type SubscribeAttitudeQuaternionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAttitudeQuaternionRequest) Reset() {
	*x = SubscribeAttitudeQuaternionRequest{}
	mi := &file_telemetry_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAttitudeQuaternionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAttitudeQuaternionRequest) ProtoMessage() {}

func (x *SubscribeAttitudeQuaternionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAttitudeQuaternionRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAttitudeQuaternionRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{12}
}

type AttitudeQuaternionResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AttitudeQuaternion *Quaternion            `protobuf:"bytes,1,opt,name=attitude_quaternion,json=attitudeQuaternion,proto3" json:"attitude_quaternion,omitempty"` // The next attitude (quaternion)
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AttitudeQuaternionResponse) Reset() {
	*x = AttitudeQuaternionResponse{}
	mi := &file_telemetry_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttitudeQuaternionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttitudeQuaternionResponse) ProtoMessage() {}

func (x *AttitudeQuaternionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttitudeQuaternionResponse.ProtoReflect.Descriptor instead.
func (*AttitudeQuaternionResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{13}
}

func (x *AttitudeQuaternionResponse) GetAttitudeQuaternion() *Quaternion {
	if x != nil {
		return x.AttitudeQuaternion
	}
	return nil
}

type SubscribeAttitudeEulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAttitudeEulerRequest) Reset() {
	*x = SubscribeAttitudeEulerRequest{}
	mi := &file_telemetry_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAttitudeEulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAttitudeEulerRequest) ProtoMessage() {}

func (x *SubscribeAttitudeEulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAttitudeEulerRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAttitudeEulerRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{14}
}

type AttitudeEulerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AttitudeEuler *EulerAngle            `protobuf:"bytes,1,opt,name=attitude_euler,json=attitudeEuler,proto3" json:"attitude_euler,omitempty"` // The next attitude (Euler)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttitudeEulerResponse) Reset() {
	*x = AttitudeEulerResponse{}
	mi := &file_telemetry_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttitudeEulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttitudeEulerResponse) ProtoMessage() {}

func (x *AttitudeEulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttitudeEulerResponse.ProtoReflect.Descriptor instead.
func (*AttitudeEulerResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{15}
}

func (x *AttitudeEulerResponse) GetAttitudeEuler() *EulerAngle {
	if x != nil {
		return x.AttitudeEuler
	}
	return nil
}

type SubscribeAttitudeAngularVelocityBodyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAttitudeAngularVelocityBodyRequest) Reset() {
	*x = SubscribeAttitudeAngularVelocityBodyRequest{}
	mi := &file_telemetry_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAttitudeAngularVelocityBodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAttitudeAngularVelocityBodyRequest) ProtoMessage() {}

func (x *SubscribeAttitudeAngularVelocityBodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAttitudeAngularVelocityBodyRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAttitudeAngularVelocityBodyRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{16}
}

type AttitudeAngularVelocityBodyResponse struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	AttitudeAngularVelocityBody *AngularVelocityBody   `protobuf:"bytes,1,opt,name=attitude_angular_velocity_body,json=attitudeAngularVelocityBody,proto3" json:"attitude_angular_velocity_body,omitempty"` // The next angular velocity (rad/s)
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *AttitudeAngularVelocityBodyResponse) Reset() {
	*x = AttitudeAngularVelocityBodyResponse{}
	mi := &file_telemetry_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttitudeAngularVelocityBodyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttitudeAngularVelocityBodyResponse) ProtoMessage() {}

func (x *AttitudeAngularVelocityBodyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttitudeAngularVelocityBodyResponse.ProtoReflect.Descriptor instead.
func (*AttitudeAngularVelocityBodyResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{17}
}

func (x *AttitudeAngularVelocityBodyResponse) GetAttitudeAngularVelocityBody() *AngularVelocityBody {
	if x != nil {
		return x.AttitudeAngularVelocityBody
	}
	return nil
}

type SubscribeVelocityNedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeVelocityNedRequest) Reset() {
	*x = SubscribeVelocityNedRequest{}
	mi := &file_telemetry_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeVelocityNedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeVelocityNedRequest) ProtoMessage() {}

func (x *SubscribeVelocityNedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeVelocityNedRequest.ProtoReflect.Descriptor instead.
func (*SubscribeVelocityNedRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{18}
}

type VelocityNedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VelocityNed   *VelocityNed           `protobuf:"bytes,1,opt,name=velocity_ned,json=velocityNed,proto3" json:"velocity_ned,omitempty"` // The next velocity (NED)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VelocityNedResponse) Reset() {
	*x = VelocityNedResponse{}
	mi := &file_telemetry_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VelocityNedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityNedResponse) ProtoMessage() {}

func (x *VelocityNedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityNedResponse.ProtoReflect.Descriptor instead.
func (*VelocityNedResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{19}
}

func (x *VelocityNedResponse) GetVelocityNed() *VelocityNed {
	if x != nil {
		return x.VelocityNed
	}
	return nil
}

type SubscribeGpsInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeGpsInfoRequest) Reset() {
	*x = SubscribeGpsInfoRequest{}
	mi := &file_telemetry_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeGpsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeGpsInfoRequest) ProtoMessage() {}

func (x *SubscribeGpsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeGpsInfoRequest.ProtoReflect.Descriptor instead.
func (*SubscribeGpsInfoRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{20}
}

type GpsInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GpsInfo       *GpsInfo               `protobuf:"bytes,1,opt,name=gps_info,json=gpsInfo,proto3" json:"gps_info,omitempty"` // The next 'GPS info' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpsInfoResponse) Reset() {
	*x = GpsInfoResponse{}
	mi := &file_telemetry_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsInfoResponse) ProtoMessage() {}

func (x *GpsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsInfoResponse.ProtoReflect.Descriptor instead.
func (*GpsInfoResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{21}
}

func (x *GpsInfoResponse) GetGpsInfo() *GpsInfo {
	if x != nil {
		return x.GpsInfo
	}
	return nil
}

type SubscribeRawGpsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRawGpsRequest) Reset() {
	*x = SubscribeRawGpsRequest{}
	mi := &file_telemetry_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRawGpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRawGpsRequest) ProtoMessage() {}

func (x *SubscribeRawGpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRawGpsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRawGpsRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{22}
}

type RawGpsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawGps        *RawGps                `protobuf:"bytes,1,opt,name=raw_gps,json=rawGps,proto3" json:"raw_gps,omitempty"` // The next 'Raw GPS' state. Warning: this is an advanced feature, use `Position` updates to get the location of the drone!
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawGpsResponse) Reset() {
	*x = RawGpsResponse{}
	mi := &file_telemetry_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawGpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawGpsResponse) ProtoMessage() {}

func (x *RawGpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawGpsResponse.ProtoReflect.Descriptor instead.
func (*RawGpsResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{23}
}

func (x *RawGpsResponse) GetRawGps() *RawGps {
	if x != nil {
		return x.RawGps
	}
	return nil
}

type SubscribeBatteryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeBatteryRequest) Reset() {
	*x = SubscribeBatteryRequest{}
	mi := &file_telemetry_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeBatteryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBatteryRequest) ProtoMessage() {}

func (x *SubscribeBatteryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBatteryRequest.ProtoReflect.Descriptor instead.
func (*SubscribeBatteryRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{24}
}

type BatteryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Battery       *Battery               `protobuf:"bytes,1,opt,name=battery,proto3" json:"battery,omitempty"` // The next 'battery' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatteryResponse) Reset() {
	*x = BatteryResponse{}
	mi := &file_telemetry_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryResponse) ProtoMessage() {}

func (x *BatteryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryResponse.ProtoReflect.Descriptor instead.
func (*BatteryResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{25}
}

func (x *BatteryResponse) GetBattery() *Battery {
	if x != nil {
		return x.Battery
	}
	return nil
}

type SubscribeFlightModeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeFlightModeRequest) Reset() {
	*x = SubscribeFlightModeRequest{}
	mi := &file_telemetry_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeFlightModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeFlightModeRequest) ProtoMessage() {}

func (x *SubscribeFlightModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeFlightModeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeFlightModeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{26}
}

type FlightModeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlightMode    FlightMode             `protobuf:"varint,1,opt,name=flight_mode,json=flightMode,proto3,enum=mavsdk.rpc.telemetry.FlightMode" json:"flight_mode,omitempty"` // The next flight mode
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlightModeResponse) Reset() {
	*x = FlightModeResponse{}
	mi := &file_telemetry_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightModeResponse) ProtoMessage() {}

func (x *FlightModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightModeResponse.ProtoReflect.Descriptor instead.
func (*FlightModeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{27}
}

func (x *FlightModeResponse) GetFlightMode() FlightMode {
	if x != nil {
		return x.FlightMode
	}
	return FlightMode_FLIGHT_MODE_UNKNOWN
}

type SubscribeHealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeHealthRequest) Reset() {
	*x = SubscribeHealthRequest{}
	mi := &file_telemetry_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHealthRequest) ProtoMessage() {}

func (x *SubscribeHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHealthRequest.ProtoReflect.Descriptor instead.
func (*SubscribeHealthRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{28}
}

type HealthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Health        *Health                `protobuf:"bytes,1,opt,name=health,proto3" json:"health,omitempty"` // The next 'health' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_telemetry_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{29}
}

func (x *HealthResponse) GetHealth() *Health {
	if x != nil {
		return x.Health
	}
	return nil
}

type SubscribeRcStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRcStatusRequest) Reset() {
	*x = SubscribeRcStatusRequest{}
	mi := &file_telemetry_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRcStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRcStatusRequest) ProtoMessage() {}

func (x *SubscribeRcStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRcStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRcStatusRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{30}
}

type RcStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RcStatus      *RcStatus              `protobuf:"bytes,1,opt,name=rc_status,json=rcStatus,proto3" json:"rc_status,omitempty"` // The next RC status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RcStatusResponse) Reset() {
	*x = RcStatusResponse{}
	mi := &file_telemetry_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RcStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcStatusResponse) ProtoMessage() {}

func (x *RcStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcStatusResponse.ProtoReflect.Descriptor instead.
func (*RcStatusResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{31}
}

func (x *RcStatusResponse) GetRcStatus() *RcStatus {
	if x != nil {
		return x.RcStatus
	}
	return nil
}

type SubscribeStatusTextRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeStatusTextRequest) Reset() {
	*x = SubscribeStatusTextRequest{}
	mi := &file_telemetry_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeStatusTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStatusTextRequest) ProtoMessage() {}

func (x *SubscribeStatusTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStatusTextRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStatusTextRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{32}
}

type StatusTextResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusText    *StatusText            `protobuf:"bytes,1,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"` // The next 'status text'
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusTextResponse) Reset() {
	*x = StatusTextResponse{}
	mi := &file_telemetry_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusTextResponse) ProtoMessage() {}

func (x *StatusTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusTextResponse.ProtoReflect.Descriptor instead.
func (*StatusTextResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{33}
}

func (x *StatusTextResponse) GetStatusText() *StatusText {
	if x != nil {
		return x.StatusText
	}
	return nil
}

type SubscribeActuatorControlTargetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeActuatorControlTargetRequest) Reset() {
	*x = SubscribeActuatorControlTargetRequest{}
	mi := &file_telemetry_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeActuatorControlTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActuatorControlTargetRequest) ProtoMessage() {}

func (x *SubscribeActuatorControlTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActuatorControlTargetRequest.ProtoReflect.Descriptor instead.
func (*SubscribeActuatorControlTargetRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{34}
}

type ActuatorControlTargetResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ActuatorControlTarget *ActuatorControlTarget `protobuf:"bytes,1,opt,name=actuator_control_target,json=actuatorControlTarget,proto3" json:"actuator_control_target,omitempty"` // The next actuator control target
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ActuatorControlTargetResponse) Reset() {
	*x = ActuatorControlTargetResponse{}
	mi := &file_telemetry_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActuatorControlTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActuatorControlTargetResponse) ProtoMessage() {}

func (x *ActuatorControlTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActuatorControlTargetResponse.ProtoReflect.Descriptor instead.
func (*ActuatorControlTargetResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{35}
}

func (x *ActuatorControlTargetResponse) GetActuatorControlTarget() *ActuatorControlTarget {
	if x != nil {
		return x.ActuatorControlTarget
	}
	return nil
}

type SubscribeActuatorOutputStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeActuatorOutputStatusRequest) Reset() {
	*x = SubscribeActuatorOutputStatusRequest{}
	mi := &file_telemetry_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeActuatorOutputStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeActuatorOutputStatusRequest) ProtoMessage() {}

func (x *SubscribeActuatorOutputStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeActuatorOutputStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeActuatorOutputStatusRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{36}
}

type ActuatorOutputStatusResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ActuatorOutputStatus *ActuatorOutputStatus  `protobuf:"bytes,1,opt,name=actuator_output_status,json=actuatorOutputStatus,proto3" json:"actuator_output_status,omitempty"` // The next actuator output status
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ActuatorOutputStatusResponse) Reset() {
	*x = ActuatorOutputStatusResponse{}
	mi := &file_telemetry_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActuatorOutputStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActuatorOutputStatusResponse) ProtoMessage() {}

func (x *ActuatorOutputStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActuatorOutputStatusResponse.ProtoReflect.Descriptor instead.
func (*ActuatorOutputStatusResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{37}
}

func (x *ActuatorOutputStatusResponse) GetActuatorOutputStatus() *ActuatorOutputStatus {
	if x != nil {
		return x.ActuatorOutputStatus
	}
	return nil
}

type SubscribeOdometryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeOdometryRequest) Reset() {
	*x = SubscribeOdometryRequest{}
	mi := &file_telemetry_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOdometryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOdometryRequest) ProtoMessage() {}

func (x *SubscribeOdometryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOdometryRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOdometryRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{38}
}

type OdometryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Odometry      *Odometry              `protobuf:"bytes,1,opt,name=odometry,proto3" json:"odometry,omitempty"` // The next odometry status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OdometryResponse) Reset() {
	*x = OdometryResponse{}
	mi := &file_telemetry_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OdometryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OdometryResponse) ProtoMessage() {}

func (x *OdometryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OdometryResponse.ProtoReflect.Descriptor instead.
func (*OdometryResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{39}
}

func (x *OdometryResponse) GetOdometry() *Odometry {
	if x != nil {
		return x.Odometry
	}
	return nil
}

type SubscribePositionVelocityNedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribePositionVelocityNedRequest) Reset() {
	*x = SubscribePositionVelocityNedRequest{}
	mi := &file_telemetry_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribePositionVelocityNedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePositionVelocityNedRequest) ProtoMessage() {}

func (x *SubscribePositionVelocityNedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePositionVelocityNedRequest.ProtoReflect.Descriptor instead.
func (*SubscribePositionVelocityNedRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{40}
}

type PositionVelocityNedResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PositionVelocityNed *PositionVelocityNed   `protobuf:"bytes,1,opt,name=position_velocity_ned,json=positionVelocityNed,proto3" json:"position_velocity_ned,omitempty"` // The next position and velocity status
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PositionVelocityNedResponse) Reset() {
	*x = PositionVelocityNedResponse{}
	mi := &file_telemetry_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionVelocityNedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionVelocityNedResponse) ProtoMessage() {}

func (x *PositionVelocityNedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionVelocityNedResponse.ProtoReflect.Descriptor instead.
func (*PositionVelocityNedResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{41}
}

func (x *PositionVelocityNedResponse) GetPositionVelocityNed() *PositionVelocityNed {
	if x != nil {
		return x.PositionVelocityNed
	}
	return nil
}

type SubscribeGroundTruthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeGroundTruthRequest) Reset() {
	*x = SubscribeGroundTruthRequest{}
	mi := &file_telemetry_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeGroundTruthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeGroundTruthRequest) ProtoMessage() {}

func (x *SubscribeGroundTruthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeGroundTruthRequest.ProtoReflect.Descriptor instead.
func (*SubscribeGroundTruthRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{42}
}

type GroundTruthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroundTruth   *GroundTruth           `protobuf:"bytes,1,opt,name=ground_truth,json=groundTruth,proto3" json:"ground_truth,omitempty"` // Ground truth position information available in simulation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroundTruthResponse) Reset() {
	*x = GroundTruthResponse{}
	mi := &file_telemetry_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroundTruthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroundTruthResponse) ProtoMessage() {}

func (x *GroundTruthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroundTruthResponse.ProtoReflect.Descriptor instead.
func (*GroundTruthResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{43}
}

func (x *GroundTruthResponse) GetGroundTruth() *GroundTruth {
	if x != nil {
		return x.GroundTruth
	}
	return nil
}

type SubscribeFixedwingMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeFixedwingMetricsRequest) Reset() {
	*x = SubscribeFixedwingMetricsRequest{}
	mi := &file_telemetry_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeFixedwingMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeFixedwingMetricsRequest) ProtoMessage() {}

func (x *SubscribeFixedwingMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeFixedwingMetricsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeFixedwingMetricsRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{44}
}

type FixedwingMetricsResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FixedwingMetrics *FixedwingMetrics      `protobuf:"bytes,1,opt,name=fixedwing_metrics,json=fixedwingMetrics,proto3" json:"fixedwing_metrics,omitempty"` // The next fixedwing metrics
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FixedwingMetricsResponse) Reset() {
	*x = FixedwingMetricsResponse{}
	mi := &file_telemetry_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedwingMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedwingMetricsResponse) ProtoMessage() {}

func (x *FixedwingMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedwingMetricsResponse.ProtoReflect.Descriptor instead.
func (*FixedwingMetricsResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{45}
}

func (x *FixedwingMetricsResponse) GetFixedwingMetrics() *FixedwingMetrics {
	if x != nil {
		return x.FixedwingMetrics
	}
	return nil
}

type SubscribeImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeImuRequest) Reset() {
	*x = SubscribeImuRequest{}
	mi := &file_telemetry_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeImuRequest) ProtoMessage() {}

func (x *SubscribeImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeImuRequest.ProtoReflect.Descriptor instead.
func (*SubscribeImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{46}
}

type ImuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imu           *Imu                   `protobuf:"bytes,1,opt,name=imu,proto3" json:"imu,omitempty"` // The next IMU status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImuResponse) Reset() {
	*x = ImuResponse{}
	mi := &file_telemetry_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImuResponse) ProtoMessage() {}

func (x *ImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImuResponse.ProtoReflect.Descriptor instead.
func (*ImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{47}
}

func (x *ImuResponse) GetImu() *Imu {
	if x != nil {
		return x.Imu
	}
	return nil
}

type SubscribeScaledImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeScaledImuRequest) Reset() {
	*x = SubscribeScaledImuRequest{}
	mi := &file_telemetry_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeScaledImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeScaledImuRequest) ProtoMessage() {}

func (x *SubscribeScaledImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeScaledImuRequest.ProtoReflect.Descriptor instead.
func (*SubscribeScaledImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{48}
}

type ScaledImuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imu           *Imu                   `protobuf:"bytes,1,opt,name=imu,proto3" json:"imu,omitempty"` // The next scaled IMU status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScaledImuResponse) Reset() {
	*x = ScaledImuResponse{}
	mi := &file_telemetry_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaledImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaledImuResponse) ProtoMessage() {}

func (x *ScaledImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaledImuResponse.ProtoReflect.Descriptor instead.
func (*ScaledImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{49}
}

func (x *ScaledImuResponse) GetImu() *Imu {
	if x != nil {
		return x.Imu
	}
	return nil
}

type SubscribeRawImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRawImuRequest) Reset() {
	*x = SubscribeRawImuRequest{}
	mi := &file_telemetry_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRawImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRawImuRequest) ProtoMessage() {}

func (x *SubscribeRawImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRawImuRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRawImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{50}
}

type RawImuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imu           *Imu                   `protobuf:"bytes,1,opt,name=imu,proto3" json:"imu,omitempty"` // The next raw IMU status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawImuResponse) Reset() {
	*x = RawImuResponse{}
	mi := &file_telemetry_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawImuResponse) ProtoMessage() {}

func (x *RawImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawImuResponse.ProtoReflect.Descriptor instead.
func (*RawImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{51}
}

func (x *RawImuResponse) GetImu() *Imu {
	if x != nil {
		return x.Imu
	}
	return nil
}

type SubscribeHealthAllOkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeHealthAllOkRequest) Reset() {
	*x = SubscribeHealthAllOkRequest{}
	mi := &file_telemetry_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeHealthAllOkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHealthAllOkRequest) ProtoMessage() {}

func (x *SubscribeHealthAllOkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHealthAllOkRequest.ProtoReflect.Descriptor instead.
func (*SubscribeHealthAllOkRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{52}
}

type HealthAllOkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHealthAllOk bool                   `protobuf:"varint,1,opt,name=is_health_all_ok,json=isHealthAllOk,proto3" json:"is_health_all_ok,omitempty"` // The next 'health all ok' status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthAllOkResponse) Reset() {
	*x = HealthAllOkResponse{}
	mi := &file_telemetry_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthAllOkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthAllOkResponse) ProtoMessage() {}

func (x *HealthAllOkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthAllOkResponse.ProtoReflect.Descriptor instead.
func (*HealthAllOkResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{53}
}

func (x *HealthAllOkResponse) GetIsHealthAllOk() bool {
	if x != nil {
		return x.IsHealthAllOk
	}
	return false
}

type SubscribeUnixEpochTimeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeUnixEpochTimeRequest) Reset() {
	*x = SubscribeUnixEpochTimeRequest{}
	mi := &file_telemetry_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeUnixEpochTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeUnixEpochTimeRequest) ProtoMessage() {}

func (x *SubscribeUnixEpochTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeUnixEpochTimeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeUnixEpochTimeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{54}
}

type UnixEpochTimeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeUs        uint64                 `protobuf:"varint,1,opt,name=time_us,json=timeUs,proto3" json:"time_us,omitempty"` // The next 'unix epoch time' status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnixEpochTimeResponse) Reset() {
	*x = UnixEpochTimeResponse{}
	mi := &file_telemetry_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnixEpochTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnixEpochTimeResponse) ProtoMessage() {}

func (x *UnixEpochTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnixEpochTimeResponse.ProtoReflect.Descriptor instead.
func (*UnixEpochTimeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{55}
}

func (x *UnixEpochTimeResponse) GetTimeUs() uint64 {
	if x != nil {
		return x.TimeUs
	}
	return 0
}

type SubscribeDistanceSensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeDistanceSensorRequest) Reset() {
	*x = SubscribeDistanceSensorRequest{}
	mi := &file_telemetry_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeDistanceSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeDistanceSensorRequest) ProtoMessage() {}

func (x *SubscribeDistanceSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeDistanceSensorRequest.ProtoReflect.Descriptor instead.
func (*SubscribeDistanceSensorRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{56}
}

type DistanceSensorResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DistanceSensor *DistanceSensor        `protobuf:"bytes,1,opt,name=distance_sensor,json=distanceSensor,proto3" json:"distance_sensor,omitempty"` // The next Distance Sensor status
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DistanceSensorResponse) Reset() {
	*x = DistanceSensorResponse{}
	mi := &file_telemetry_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistanceSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistanceSensorResponse) ProtoMessage() {}

func (x *DistanceSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistanceSensorResponse.ProtoReflect.Descriptor instead.
func (*DistanceSensorResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{57}
}

func (x *DistanceSensorResponse) GetDistanceSensor() *DistanceSensor {
	if x != nil {
		return x.DistanceSensor
	}
	return nil
}

type SubscribeScaledPressureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeScaledPressureRequest) Reset() {
	*x = SubscribeScaledPressureRequest{}
	mi := &file_telemetry_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeScaledPressureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeScaledPressureRequest) ProtoMessage() {}

func (x *SubscribeScaledPressureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeScaledPressureRequest.ProtoReflect.Descriptor instead.
func (*SubscribeScaledPressureRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{58}
}

type ScaledPressureResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ScaledPressure *ScaledPressure        `protobuf:"bytes,1,opt,name=scaled_pressure,json=scaledPressure,proto3" json:"scaled_pressure,omitempty"` // The next Scaled Pressure status
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ScaledPressureResponse) Reset() {
	*x = ScaledPressureResponse{}
	mi := &file_telemetry_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaledPressureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaledPressureResponse) ProtoMessage() {}

func (x *ScaledPressureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaledPressureResponse.ProtoReflect.Descriptor instead.
func (*ScaledPressureResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{59}
}

func (x *ScaledPressureResponse) GetScaledPressure() *ScaledPressure {
	if x != nil {
		return x.ScaledPressure
	}
	return nil
}

type SubscribeHeadingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeHeadingRequest) Reset() {
	*x = SubscribeHeadingRequest{}
	mi := &file_telemetry_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeHeadingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHeadingRequest) ProtoMessage() {}

func (x *SubscribeHeadingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHeadingRequest.ProtoReflect.Descriptor instead.
func (*SubscribeHeadingRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{60}
}

type HeadingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeadingDeg    *Heading               `protobuf:"bytes,1,opt,name=heading_deg,json=headingDeg,proto3" json:"heading_deg,omitempty"` // The next heading (yaw) in degrees
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeadingResponse) Reset() {
	*x = HeadingResponse{}
	mi := &file_telemetry_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeadingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadingResponse) ProtoMessage() {}

func (x *HeadingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadingResponse.ProtoReflect.Descriptor instead.
func (*HeadingResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{61}
}

func (x *HeadingResponse) GetHeadingDeg() *Heading {
	if x != nil {
		return x.HeadingDeg
	}
	return nil
}

type SubscribeAltitudeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAltitudeRequest) Reset() {
	*x = SubscribeAltitudeRequest{}
	mi := &file_telemetry_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAltitudeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAltitudeRequest) ProtoMessage() {}

func (x *SubscribeAltitudeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAltitudeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAltitudeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{62}
}

type AltitudeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Altitude      *Altitude              `protobuf:"bytes,1,opt,name=altitude,proto3" json:"altitude,omitempty"` // The next altitude
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AltitudeResponse) Reset() {
	*x = AltitudeResponse{}
	mi := &file_telemetry_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AltitudeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltitudeResponse) ProtoMessage() {}

func (x *AltitudeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltitudeResponse.ProtoReflect.Descriptor instead.
func (*AltitudeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{63}
}

func (x *AltitudeResponse) GetAltitude() *Altitude {
	if x != nil {
		return x.Altitude
	}
	return nil
}

type SetRatePositionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRatePositionRequest) Reset() {
	*x = SetRatePositionRequest{}
	mi := &file_telemetry_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRatePositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatePositionRequest) ProtoMessage() {}

func (x *SetRatePositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatePositionRequest.ProtoReflect.Descriptor instead.
func (*SetRatePositionRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{64}
}

func (x *SetRatePositionRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRatePositionResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRatePositionResponse) Reset() {
	*x = SetRatePositionResponse{}
	mi := &file_telemetry_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRatePositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatePositionResponse) ProtoMessage() {}

func (x *SetRatePositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatePositionResponse.ProtoReflect.Descriptor instead.
func (*SetRatePositionResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{65}
}

func (x *SetRatePositionResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateHomeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateHomeRequest) Reset() {
	*x = SetRateHomeRequest{}
	mi := &file_telemetry_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateHomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateHomeRequest) ProtoMessage() {}

func (x *SetRateHomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateHomeRequest.ProtoReflect.Descriptor instead.
func (*SetRateHomeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{66}
}

func (x *SetRateHomeRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateHomeResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateHomeResponse) Reset() {
	*x = SetRateHomeResponse{}
	mi := &file_telemetry_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateHomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateHomeResponse) ProtoMessage() {}

func (x *SetRateHomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateHomeResponse.ProtoReflect.Descriptor instead.
func (*SetRateHomeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{67}
}

func (x *SetRateHomeResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateInAirRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateInAirRequest) Reset() {
	*x = SetRateInAirRequest{}
	mi := &file_telemetry_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateInAirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateInAirRequest) ProtoMessage() {}

func (x *SetRateInAirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateInAirRequest.ProtoReflect.Descriptor instead.
func (*SetRateInAirRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{68}
}

func (x *SetRateInAirRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateInAirResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateInAirResponse) Reset() {
	*x = SetRateInAirResponse{}
	mi := &file_telemetry_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateInAirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateInAirResponse) ProtoMessage() {}

func (x *SetRateInAirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateInAirResponse.ProtoReflect.Descriptor instead.
func (*SetRateInAirResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{69}
}

func (x *SetRateInAirResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateLandedStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateLandedStateRequest) Reset() {
	*x = SetRateLandedStateRequest{}
	mi := &file_telemetry_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateLandedStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateLandedStateRequest) ProtoMessage() {}

func (x *SetRateLandedStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateLandedStateRequest.ProtoReflect.Descriptor instead.
func (*SetRateLandedStateRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{70}
}

func (x *SetRateLandedStateRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateLandedStateResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateLandedStateResponse) Reset() {
	*x = SetRateLandedStateResponse{}
	mi := &file_telemetry_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateLandedStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateLandedStateResponse) ProtoMessage() {}

func (x *SetRateLandedStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateLandedStateResponse.ProtoReflect.Descriptor instead.
func (*SetRateLandedStateResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{71}
}

func (x *SetRateLandedStateResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateVtolStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateVtolStateRequest) Reset() {
	*x = SetRateVtolStateRequest{}
	mi := &file_telemetry_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateVtolStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateVtolStateRequest) ProtoMessage() {}

func (x *SetRateVtolStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateVtolStateRequest.ProtoReflect.Descriptor instead.
func (*SetRateVtolStateRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{72}
}

func (x *SetRateVtolStateRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateVtolStateResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateVtolStateResponse) Reset() {
	*x = SetRateVtolStateResponse{}
	mi := &file_telemetry_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateVtolStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateVtolStateResponse) ProtoMessage() {}

func (x *SetRateVtolStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateVtolStateResponse.ProtoReflect.Descriptor instead.
func (*SetRateVtolStateResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{73}
}

func (x *SetRateVtolStateResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateAttitudeEulerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateAttitudeEulerRequest) Reset() {
	*x = SetRateAttitudeEulerRequest{}
	mi := &file_telemetry_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateAttitudeEulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateAttitudeEulerRequest) ProtoMessage() {}

func (x *SetRateAttitudeEulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateAttitudeEulerRequest.ProtoReflect.Descriptor instead.
func (*SetRateAttitudeEulerRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{74}
}

func (x *SetRateAttitudeEulerRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateAttitudeEulerResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateAttitudeEulerResponse) Reset() {
	*x = SetRateAttitudeEulerResponse{}
	mi := &file_telemetry_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateAttitudeEulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateAttitudeEulerResponse) ProtoMessage() {}

func (x *SetRateAttitudeEulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateAttitudeEulerResponse.ProtoReflect.Descriptor instead.
func (*SetRateAttitudeEulerResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{75}
}

func (x *SetRateAttitudeEulerResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateAttitudeQuaternionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateAttitudeQuaternionRequest) Reset() {
	*x = SetRateAttitudeQuaternionRequest{}
	mi := &file_telemetry_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateAttitudeQuaternionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateAttitudeQuaternionRequest) ProtoMessage() {}

func (x *SetRateAttitudeQuaternionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateAttitudeQuaternionRequest.ProtoReflect.Descriptor instead.
func (*SetRateAttitudeQuaternionRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{76}
}

func (x *SetRateAttitudeQuaternionRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateAttitudeQuaternionResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateAttitudeQuaternionResponse) Reset() {
	*x = SetRateAttitudeQuaternionResponse{}
	mi := &file_telemetry_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateAttitudeQuaternionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateAttitudeQuaternionResponse) ProtoMessage() {}

func (x *SetRateAttitudeQuaternionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateAttitudeQuaternionResponse.ProtoReflect.Descriptor instead.
func (*SetRateAttitudeQuaternionResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{77}
}

func (x *SetRateAttitudeQuaternionResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateAttitudeAngularVelocityBodyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateAttitudeAngularVelocityBodyRequest) Reset() {
	*x = SetRateAttitudeAngularVelocityBodyRequest{}
	mi := &file_telemetry_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateAttitudeAngularVelocityBodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateAttitudeAngularVelocityBodyRequest) ProtoMessage() {}

func (x *SetRateAttitudeAngularVelocityBodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateAttitudeAngularVelocityBodyRequest.ProtoReflect.Descriptor instead.
func (*SetRateAttitudeAngularVelocityBodyRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{78}
}

func (x *SetRateAttitudeAngularVelocityBodyRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateAttitudeAngularVelocityBodyResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateAttitudeAngularVelocityBodyResponse) Reset() {
	*x = SetRateAttitudeAngularVelocityBodyResponse{}
	mi := &file_telemetry_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateAttitudeAngularVelocityBodyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateAttitudeAngularVelocityBodyResponse) ProtoMessage() {}

func (x *SetRateAttitudeAngularVelocityBodyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateAttitudeAngularVelocityBodyResponse.ProtoReflect.Descriptor instead.
func (*SetRateAttitudeAngularVelocityBodyResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{79}
}

func (x *SetRateAttitudeAngularVelocityBodyResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateVelocityNedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateVelocityNedRequest) Reset() {
	*x = SetRateVelocityNedRequest{}
	mi := &file_telemetry_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateVelocityNedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateVelocityNedRequest) ProtoMessage() {}

func (x *SetRateVelocityNedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateVelocityNedRequest.ProtoReflect.Descriptor instead.
func (*SetRateVelocityNedRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{80}
}

func (x *SetRateVelocityNedRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateVelocityNedResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateVelocityNedResponse) Reset() {
	*x = SetRateVelocityNedResponse{}
	mi := &file_telemetry_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateVelocityNedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateVelocityNedResponse) ProtoMessage() {}

func (x *SetRateVelocityNedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateVelocityNedResponse.ProtoReflect.Descriptor instead.
func (*SetRateVelocityNedResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{81}
}

func (x *SetRateVelocityNedResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateGpsInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateGpsInfoRequest) Reset() {
	*x = SetRateGpsInfoRequest{}
	mi := &file_telemetry_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateGpsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateGpsInfoRequest) ProtoMessage() {}

func (x *SetRateGpsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateGpsInfoRequest.ProtoReflect.Descriptor instead.
func (*SetRateGpsInfoRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{82}
}

func (x *SetRateGpsInfoRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateGpsInfoResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateGpsInfoResponse) Reset() {
	*x = SetRateGpsInfoResponse{}
	mi := &file_telemetry_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateGpsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateGpsInfoResponse) ProtoMessage() {}

func (x *SetRateGpsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateGpsInfoResponse.ProtoReflect.Descriptor instead.
func (*SetRateGpsInfoResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{83}
}

func (x *SetRateGpsInfoResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateRawGpsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateRawGpsRequest) Reset() {
	*x = SetRateRawGpsRequest{}
	mi := &file_telemetry_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateRawGpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateRawGpsRequest) ProtoMessage() {}

func (x *SetRateRawGpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateRawGpsRequest.ProtoReflect.Descriptor instead.
func (*SetRateRawGpsRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{84}
}

func (x *SetRateRawGpsRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateBatteryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateBatteryRequest) Reset() {
	*x = SetRateBatteryRequest{}
	mi := &file_telemetry_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateBatteryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateBatteryRequest) ProtoMessage() {}

func (x *SetRateBatteryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateBatteryRequest.ProtoReflect.Descriptor instead.
func (*SetRateBatteryRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{85}
}

func (x *SetRateBatteryRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateBatteryResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateBatteryResponse) Reset() {
	*x = SetRateBatteryResponse{}
	mi := &file_telemetry_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateBatteryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateBatteryResponse) ProtoMessage() {}

func (x *SetRateBatteryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateBatteryResponse.ProtoReflect.Descriptor instead.
func (*SetRateBatteryResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{86}
}

func (x *SetRateBatteryResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateRcStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateRcStatusRequest) Reset() {
	*x = SetRateRcStatusRequest{}
	mi := &file_telemetry_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateRcStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateRcStatusRequest) ProtoMessage() {}

func (x *SetRateRcStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateRcStatusRequest.ProtoReflect.Descriptor instead.
func (*SetRateRcStatusRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{87}
}

func (x *SetRateRcStatusRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateRcStatusResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateRcStatusResponse) Reset() {
	*x = SetRateRcStatusResponse{}
	mi := &file_telemetry_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateRcStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateRcStatusResponse) ProtoMessage() {}

func (x *SetRateRcStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateRcStatusResponse.ProtoReflect.Descriptor instead.
func (*SetRateRcStatusResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{88}
}

func (x *SetRateRcStatusResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateActuatorControlTargetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateActuatorControlTargetRequest) Reset() {
	*x = SetRateActuatorControlTargetRequest{}
	mi := &file_telemetry_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateActuatorControlTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateActuatorControlTargetRequest) ProtoMessage() {}

func (x *SetRateActuatorControlTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateActuatorControlTargetRequest.ProtoReflect.Descriptor instead.
func (*SetRateActuatorControlTargetRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{89}
}

func (x *SetRateActuatorControlTargetRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateActuatorControlTargetResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateActuatorControlTargetResponse) Reset() {
	*x = SetRateActuatorControlTargetResponse{}
	mi := &file_telemetry_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateActuatorControlTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateActuatorControlTargetResponse) ProtoMessage() {}

func (x *SetRateActuatorControlTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateActuatorControlTargetResponse.ProtoReflect.Descriptor instead.
func (*SetRateActuatorControlTargetResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{90}
}

func (x *SetRateActuatorControlTargetResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateActuatorOutputStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateActuatorOutputStatusRequest) Reset() {
	*x = SetRateActuatorOutputStatusRequest{}
	mi := &file_telemetry_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateActuatorOutputStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateActuatorOutputStatusRequest) ProtoMessage() {}

func (x *SetRateActuatorOutputStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateActuatorOutputStatusRequest.ProtoReflect.Descriptor instead.
func (*SetRateActuatorOutputStatusRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{91}
}

func (x *SetRateActuatorOutputStatusRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateActuatorOutputStatusResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateActuatorOutputStatusResponse) Reset() {
	*x = SetRateActuatorOutputStatusResponse{}
	mi := &file_telemetry_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateActuatorOutputStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateActuatorOutputStatusResponse) ProtoMessage() {}

func (x *SetRateActuatorOutputStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateActuatorOutputStatusResponse.ProtoReflect.Descriptor instead.
func (*SetRateActuatorOutputStatusResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{92}
}

func (x *SetRateActuatorOutputStatusResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateOdometryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateOdometryRequest) Reset() {
	*x = SetRateOdometryRequest{}
	mi := &file_telemetry_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateOdometryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateOdometryRequest) ProtoMessage() {}

func (x *SetRateOdometryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateOdometryRequest.ProtoReflect.Descriptor instead.
func (*SetRateOdometryRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{93}
}

func (x *SetRateOdometryRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateOdometryResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateOdometryResponse) Reset() {
	*x = SetRateOdometryResponse{}
	mi := &file_telemetry_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateOdometryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateOdometryResponse) ProtoMessage() {}

func (x *SetRateOdometryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateOdometryResponse.ProtoReflect.Descriptor instead.
func (*SetRateOdometryResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{94}
}

func (x *SetRateOdometryResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRatePositionVelocityNedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRatePositionVelocityNedRequest) Reset() {
	*x = SetRatePositionVelocityNedRequest{}
	mi := &file_telemetry_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRatePositionVelocityNedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatePositionVelocityNedRequest) ProtoMessage() {}

func (x *SetRatePositionVelocityNedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatePositionVelocityNedRequest.ProtoReflect.Descriptor instead.
func (*SetRatePositionVelocityNedRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{95}
}

func (x *SetRatePositionVelocityNedRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRatePositionVelocityNedResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRatePositionVelocityNedResponse) Reset() {
	*x = SetRatePositionVelocityNedResponse{}
	mi := &file_telemetry_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRatePositionVelocityNedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRatePositionVelocityNedResponse) ProtoMessage() {}

func (x *SetRatePositionVelocityNedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRatePositionVelocityNedResponse.ProtoReflect.Descriptor instead.
func (*SetRatePositionVelocityNedResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{96}
}

func (x *SetRatePositionVelocityNedResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateGroundTruthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateGroundTruthRequest) Reset() {
	*x = SetRateGroundTruthRequest{}
	mi := &file_telemetry_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateGroundTruthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateGroundTruthRequest) ProtoMessage() {}

func (x *SetRateGroundTruthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateGroundTruthRequest.ProtoReflect.Descriptor instead.
func (*SetRateGroundTruthRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{97}
}

func (x *SetRateGroundTruthRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateGroundTruthResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateGroundTruthResponse) Reset() {
	*x = SetRateGroundTruthResponse{}
	mi := &file_telemetry_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateGroundTruthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateGroundTruthResponse) ProtoMessage() {}

func (x *SetRateGroundTruthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateGroundTruthResponse.ProtoReflect.Descriptor instead.
func (*SetRateGroundTruthResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{98}
}

func (x *SetRateGroundTruthResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateFixedwingMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateFixedwingMetricsRequest) Reset() {
	*x = SetRateFixedwingMetricsRequest{}
	mi := &file_telemetry_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateFixedwingMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateFixedwingMetricsRequest) ProtoMessage() {}

func (x *SetRateFixedwingMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateFixedwingMetricsRequest.ProtoReflect.Descriptor instead.
func (*SetRateFixedwingMetricsRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{99}
}

func (x *SetRateFixedwingMetricsRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateFixedwingMetricsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateFixedwingMetricsResponse) Reset() {
	*x = SetRateFixedwingMetricsResponse{}
	mi := &file_telemetry_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateFixedwingMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateFixedwingMetricsResponse) ProtoMessage() {}

func (x *SetRateFixedwingMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateFixedwingMetricsResponse.ProtoReflect.Descriptor instead.
func (*SetRateFixedwingMetricsResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{100}
}

func (x *SetRateFixedwingMetricsResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateImuRequest) Reset() {
	*x = SetRateImuRequest{}
	mi := &file_telemetry_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateImuRequest) ProtoMessage() {}

func (x *SetRateImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateImuRequest.ProtoReflect.Descriptor instead.
func (*SetRateImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{101}
}

func (x *SetRateImuRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateImuResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateImuResponse) Reset() {
	*x = SetRateImuResponse{}
	mi := &file_telemetry_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateImuResponse) ProtoMessage() {}

func (x *SetRateImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateImuResponse.ProtoReflect.Descriptor instead.
func (*SetRateImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{102}
}

func (x *SetRateImuResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateScaledImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateScaledImuRequest) Reset() {
	*x = SetRateScaledImuRequest{}
	mi := &file_telemetry_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateScaledImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateScaledImuRequest) ProtoMessage() {}

func (x *SetRateScaledImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateScaledImuRequest.ProtoReflect.Descriptor instead.
func (*SetRateScaledImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{103}
}

func (x *SetRateScaledImuRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateScaledImuResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateScaledImuResponse) Reset() {
	*x = SetRateScaledImuResponse{}
	mi := &file_telemetry_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateScaledImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateScaledImuResponse) ProtoMessage() {}

func (x *SetRateScaledImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateScaledImuResponse.ProtoReflect.Descriptor instead.
func (*SetRateScaledImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{104}
}

func (x *SetRateScaledImuResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateRawImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateRawImuRequest) Reset() {
	*x = SetRateRawImuRequest{}
	mi := &file_telemetry_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateRawImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateRawImuRequest) ProtoMessage() {}

func (x *SetRateRawImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateRawImuRequest.ProtoReflect.Descriptor instead.
func (*SetRateRawImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{105}
}

func (x *SetRateRawImuRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateRawImuResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateRawImuResponse) Reset() {
	*x = SetRateRawImuResponse{}
	mi := &file_telemetry_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateRawImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateRawImuResponse) ProtoMessage() {}

func (x *SetRateRawImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateRawImuResponse.ProtoReflect.Descriptor instead.
func (*SetRateRawImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{106}
}

func (x *SetRateRawImuResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateUnixEpochTimeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateUnixEpochTimeRequest) Reset() {
	*x = SetRateUnixEpochTimeRequest{}
	mi := &file_telemetry_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateUnixEpochTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateUnixEpochTimeRequest) ProtoMessage() {}

func (x *SetRateUnixEpochTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateUnixEpochTimeRequest.ProtoReflect.Descriptor instead.
func (*SetRateUnixEpochTimeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{107}
}

func (x *SetRateUnixEpochTimeRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateUnixEpochTimeResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateUnixEpochTimeResponse) Reset() {
	*x = SetRateUnixEpochTimeResponse{}
	mi := &file_telemetry_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateUnixEpochTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateUnixEpochTimeResponse) ProtoMessage() {}

func (x *SetRateUnixEpochTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateUnixEpochTimeResponse.ProtoReflect.Descriptor instead.
func (*SetRateUnixEpochTimeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{108}
}

func (x *SetRateUnixEpochTimeResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type SetRateDistanceSensorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateDistanceSensorRequest) Reset() {
	*x = SetRateDistanceSensorRequest{}
	mi := &file_telemetry_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateDistanceSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateDistanceSensorRequest) ProtoMessage() {}

func (x *SetRateDistanceSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateDistanceSensorRequest.ProtoReflect.Descriptor instead.
func (*SetRateDistanceSensorRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{109}
}

func (x *SetRateDistanceSensorRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateDistanceSensorResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateDistanceSensorResponse) Reset() {
	*x = SetRateDistanceSensorResponse{}
	mi := &file_telemetry_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateDistanceSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateDistanceSensorResponse) ProtoMessage() {}

func (x *SetRateDistanceSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateDistanceSensorResponse.ProtoReflect.Descriptor instead.
func (*SetRateDistanceSensorResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{110}
}

func (x *SetRateDistanceSensorResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

type GetGpsGlobalOriginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGpsGlobalOriginRequest) Reset() {
	*x = GetGpsGlobalOriginRequest{}
	mi := &file_telemetry_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGpsGlobalOriginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGpsGlobalOriginRequest) ProtoMessage() {}

func (x *GetGpsGlobalOriginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGpsGlobalOriginRequest.ProtoReflect.Descriptor instead.
func (*GetGpsGlobalOriginRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{111}
}

type GetGpsGlobalOriginResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	GpsGlobalOrigin *GpsGlobalOrigin       `protobuf:"bytes,2,opt,name=gps_global_origin,json=gpsGlobalOrigin,proto3" json:"gps_global_origin,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetGpsGlobalOriginResponse) Reset() {
	*x = GetGpsGlobalOriginResponse{}
	mi := &file_telemetry_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGpsGlobalOriginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGpsGlobalOriginResponse) ProtoMessage() {}

func (x *GetGpsGlobalOriginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGpsGlobalOriginResponse.ProtoReflect.Descriptor instead.
func (*GetGpsGlobalOriginResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{112}
}

func (x *GetGpsGlobalOriginResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

func (x *GetGpsGlobalOriginResponse) GetGpsGlobalOrigin() *GpsGlobalOrigin {
	if x != nil {
		return x.GpsGlobalOrigin
	}
	return nil
}

type SetRateAltitudeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RateHz        float64                `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRateAltitudeRequest) Reset() {
	*x = SetRateAltitudeRequest{}
	mi := &file_telemetry_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateAltitudeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateAltitudeRequest) ProtoMessage() {}

func (x *SetRateAltitudeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateAltitudeRequest.ProtoReflect.Descriptor instead.
func (*SetRateAltitudeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{113}
}

func (x *SetRateAltitudeRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateAltitudeResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TelemetryResult *TelemetryResult       `protobuf:"bytes,1,opt,name=telemetry_result,json=telemetryResult,proto3" json:"telemetry_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetRateAltitudeResponse) Reset() {
	*x = SetRateAltitudeResponse{}
	mi := &file_telemetry_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRateAltitudeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateAltitudeResponse) ProtoMessage() {}

func (x *SetRateAltitudeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateAltitudeResponse.ProtoReflect.Descriptor instead.
func (*SetRateAltitudeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{114}
}

func (x *SetRateAltitudeResponse) GetTelemetryResult() *TelemetryResult {
	if x != nil {
		return x.TelemetryResult
	}
	return nil
}

// Position type in global coordinates.
type Position struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LatitudeDeg       float64                `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                     // Latitude in degrees (range: -90 to +90)
	LongitudeDeg      float64                `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                  // Longitude in degrees (range: -180 to +180)
	AbsoluteAltitudeM float32                `protobuf:"fixed32,3,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"` // Altitude AMSL (above mean sea level) in metres
	RelativeAltitudeM float32                `protobuf:"fixed32,4,opt,name=relative_altitude_m,json=relativeAltitudeM,proto3" json:"relative_altitude_m,omitempty"` // Altitude relative to takeoff altitude in metres
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_telemetry_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{115}
}

func (x *Position) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *Position) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *Position) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

func (x *Position) GetRelativeAltitudeM() float32 {
	if x != nil {
		return x.RelativeAltitudeM
	}
	return 0
}

// Heading type used for global position
type Heading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeadingDeg    float64                `protobuf:"fixed64,1,opt,name=heading_deg,json=headingDeg,proto3" json:"heading_deg,omitempty"` // Heading in degrees (range: 0 to +360)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heading) Reset() {
	*x = Heading{}
	mi := &file_telemetry_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heading) ProtoMessage() {}

func (x *Heading) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heading.ProtoReflect.Descriptor instead.
func (*Heading) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{116}
}

func (x *Heading) GetHeadingDeg() float64 {
	if x != nil {
		return x.HeadingDeg
	}
	return 0
}

// Quaternion type.
//
// All rotations and axis systems follow the right-hand rule.
// The Hamilton quaternion product definition is used.
// A zero-rotation quaternion is represented by (1,0,0,0).
// The quaternion could also be written as w + xi + yj + zk.
//
// For more info see: https://en.wikipedia.org/wiki/Quaternion
type Quaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	W             float32                `protobuf:"fixed32,1,opt,name=w,proto3" json:"w,omitempty"`                                       // Quaternion entry 0, also denoted as a
	X             float32                `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"`                                       // Quaternion entry 1, also denoted as b
	Y             float32                `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"`                                       // Quaternion entry 2, also denoted as c
	Z             float32                `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"`                                       // Quaternion entry 3, also denoted as d
	TimestampUs   uint64                 `protobuf:"varint,5,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"` // Timestamp in microseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_telemetry_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{117}
}

func (x *Quaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Quaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Quaternion) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

// Euler angle type.
//
// All rotations and axis systems follow the right-hand rule.
// The Euler angles follow the convention of a 3-2-1 intrinsic Tait-Bryan rotation sequence.
//
// For more info see https://en.wikipedia.org/wiki/Euler_angles
type EulerAngle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollDeg       float32                `protobuf:"fixed32,1,opt,name=roll_deg,json=rollDeg,proto3" json:"roll_deg,omitempty"`            // Roll angle in degrees, positive is banking to the right
	PitchDeg      float32                `protobuf:"fixed32,2,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"`         // Pitch angle in degrees, positive is pitching nose up
	YawDeg        float32                `protobuf:"fixed32,3,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`               // Yaw angle in degrees, positive is clock-wise seen from above
	TimestampUs   uint64                 `protobuf:"varint,4,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"` // Timestamp in microseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EulerAngle) Reset() {
	*x = EulerAngle{}
	mi := &file_telemetry_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EulerAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EulerAngle) ProtoMessage() {}

func (x *EulerAngle) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EulerAngle.ProtoReflect.Descriptor instead.
func (*EulerAngle) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{118}
}

func (x *EulerAngle) GetRollDeg() float32 {
	if x != nil {
		return x.RollDeg
	}
	return 0
}

func (x *EulerAngle) GetPitchDeg() float32 {
	if x != nil {
		return x.PitchDeg
	}
	return 0
}

func (x *EulerAngle) GetYawDeg() float32 {
	if x != nil {
		return x.YawDeg
	}
	return 0
}

func (x *EulerAngle) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

// Angular velocity type.
type AngularVelocityBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollRadS      float32                `protobuf:"fixed32,1,opt,name=roll_rad_s,json=rollRadS,proto3" json:"roll_rad_s,omitempty"`    // Roll angular velocity
	PitchRadS     float32                `protobuf:"fixed32,2,opt,name=pitch_rad_s,json=pitchRadS,proto3" json:"pitch_rad_s,omitempty"` // Pitch angular velocity
	YawRadS       float32                `protobuf:"fixed32,3,opt,name=yaw_rad_s,json=yawRadS,proto3" json:"yaw_rad_s,omitempty"`       // Yaw angular velocity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AngularVelocityBody) Reset() {
	*x = AngularVelocityBody{}
	mi := &file_telemetry_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngularVelocityBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngularVelocityBody) ProtoMessage() {}

func (x *AngularVelocityBody) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngularVelocityBody.ProtoReflect.Descriptor instead.
func (*AngularVelocityBody) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{119}
}

func (x *AngularVelocityBody) GetRollRadS() float32 {
	if x != nil {
		return x.RollRadS
	}
	return 0
}

func (x *AngularVelocityBody) GetPitchRadS() float32 {
	if x != nil {
		return x.PitchRadS
	}
	return 0
}

func (x *AngularVelocityBody) GetYawRadS() float32 {
	if x != nil {
		return x.YawRadS
	}
	return 0
}

// GPS information type.
type GpsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumSatellites int32                  `protobuf:"varint,1,opt,name=num_satellites,json=numSatellites,proto3" json:"num_satellites,omitempty"`                 // Number of visible satellites in use
	FixType       FixType                `protobuf:"varint,2,opt,name=fix_type,json=fixType,proto3,enum=mavsdk.rpc.telemetry.FixType" json:"fix_type,omitempty"` // Fix type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpsInfo) Reset() {
	*x = GpsInfo{}
	mi := &file_telemetry_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsInfo) ProtoMessage() {}

func (x *GpsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsInfo.ProtoReflect.Descriptor instead.
func (*GpsInfo) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{120}
}

func (x *GpsInfo) GetNumSatellites() int32 {
	if x != nil {
		return x.NumSatellites
	}
	return 0
}

func (x *GpsInfo) GetFixType() FixType {
	if x != nil {
		return x.FixType
	}
	return FixType_FIX_TYPE_NO_GPS
}

// Raw GPS information type.
//
// Warning: this is an advanced type! If you want the location of the drone, use
// the position instead. This message exposes the raw values of the GNSS sensor.
type RawGps struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	TimestampUs            uint64                 `protobuf:"varint,1,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"`                                      // Timestamp in microseconds (UNIX Epoch time or time since system boot, to be inferred)
	LatitudeDeg            float64                `protobuf:"fixed64,2,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                                     // Latitude in degrees (WGS84, EGM96 ellipsoid)
	LongitudeDeg           float64                `protobuf:"fixed64,3,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                                  // Longitude in degrees (WGS84, EGM96 ellipsoid)
	AbsoluteAltitudeM      float32                `protobuf:"fixed32,4,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"`                 // Altitude AMSL (above mean sea level) in metres
	Hdop                   float32                `protobuf:"fixed32,5,opt,name=hdop,proto3" json:"hdop,omitempty"`                                                                      // GPS HDOP horizontal dilution of position (unitless). If unknown, set to NaN
	Vdop                   float32                `protobuf:"fixed32,6,opt,name=vdop,proto3" json:"vdop,omitempty"`                                                                      // GPS VDOP vertical dilution of position (unitless). If unknown, set to NaN
	VelocityMS             float32                `protobuf:"fixed32,7,opt,name=velocity_m_s,json=velocityMS,proto3" json:"velocity_m_s,omitempty"`                                      // Ground velocity in metres per second
	CogDeg                 float32                `protobuf:"fixed32,8,opt,name=cog_deg,json=cogDeg,proto3" json:"cog_deg,omitempty"`                                                    // Course over ground (NOT heading, but direction of movement) in degrees. If unknown, set to NaN
	AltitudeEllipsoidM     float32                `protobuf:"fixed32,9,opt,name=altitude_ellipsoid_m,json=altitudeEllipsoidM,proto3" json:"altitude_ellipsoid_m,omitempty"`              // Altitude in metres (above WGS84, EGM96 ellipsoid)
	HorizontalUncertaintyM float32                `protobuf:"fixed32,10,opt,name=horizontal_uncertainty_m,json=horizontalUncertaintyM,proto3" json:"horizontal_uncertainty_m,omitempty"` // Position uncertainty in metres
	VerticalUncertaintyM   float32                `protobuf:"fixed32,11,opt,name=vertical_uncertainty_m,json=verticalUncertaintyM,proto3" json:"vertical_uncertainty_m,omitempty"`       // Altitude uncertainty in metres
	VelocityUncertaintyMS  float32                `protobuf:"fixed32,12,opt,name=velocity_uncertainty_m_s,json=velocityUncertaintyMS,proto3" json:"velocity_uncertainty_m_s,omitempty"`  // Velocity uncertainty in metres per second
	HeadingUncertaintyDeg  float32                `protobuf:"fixed32,13,opt,name=heading_uncertainty_deg,json=headingUncertaintyDeg,proto3" json:"heading_uncertainty_deg,omitempty"`    // Heading uncertainty in degrees
	YawDeg                 float32                `protobuf:"fixed32,14,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`                                                   // Yaw in earth frame from north.
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RawGps) Reset() {
	*x = RawGps{}
	mi := &file_telemetry_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawGps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawGps) ProtoMessage() {}

func (x *RawGps) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawGps.ProtoReflect.Descriptor instead.
func (*RawGps) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{121}
}

func (x *RawGps) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

func (x *RawGps) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *RawGps) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *RawGps) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

func (x *RawGps) GetHdop() float32 {
	if x != nil {
		return x.Hdop
	}
	return 0
}

func (x *RawGps) GetVdop() float32 {
	if x != nil {
		return x.Vdop
	}
	return 0
}

func (x *RawGps) GetVelocityMS() float32 {
	if x != nil {
		return x.VelocityMS
	}
	return 0
}

func (x *RawGps) GetCogDeg() float32 {
	if x != nil {
		return x.CogDeg
	}
	return 0
}

func (x *RawGps) GetAltitudeEllipsoidM() float32 {
	if x != nil {
		return x.AltitudeEllipsoidM
	}
	return 0
}

func (x *RawGps) GetHorizontalUncertaintyM() float32 {
	if x != nil {
		return x.HorizontalUncertaintyM
	}
	return 0
}

func (x *RawGps) GetVerticalUncertaintyM() float32 {
	if x != nil {
		return x.VerticalUncertaintyM
	}
	return 0
}

func (x *RawGps) GetVelocityUncertaintyMS() float32 {
	if x != nil {
		return x.VelocityUncertaintyMS
	}
	return 0
}

func (x *RawGps) GetHeadingUncertaintyDeg() float32 {
	if x != nil {
		return x.HeadingUncertaintyDeg
	}
	return 0
}

func (x *RawGps) GetYawDeg() float32 {
	if x != nil {
		return x.YawDeg
	}
	return 0
}

// Battery type.
type Battery struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                              // Battery ID, for systems with multiple batteries
	TemperatureDegc    float32                `protobuf:"fixed32,2,opt,name=temperature_degc,json=temperatureDegc,proto3" json:"temperature_degc,omitempty"`            // Temperature of the battery in degrees Celsius. NAN for unknown temperature
	VoltageV           float32                `protobuf:"fixed32,3,opt,name=voltage_v,json=voltageV,proto3" json:"voltage_v,omitempty"`                                 // Voltage in volts
	CurrentBatteryA    float32                `protobuf:"fixed32,4,opt,name=current_battery_a,json=currentBatteryA,proto3" json:"current_battery_a,omitempty"`          // Battery current in Amps, NAN if autopilot does not measure the current
	CapacityConsumedAh float32                `protobuf:"fixed32,5,opt,name=capacity_consumed_ah,json=capacityConsumedAh,proto3" json:"capacity_consumed_ah,omitempty"` // Consumed charge in Amp hours, NAN if autopilot does not provide consumption estimate
	RemainingPercent   float32                `protobuf:"fixed32,6,opt,name=remaining_percent,json=remainingPercent,proto3" json:"remaining_percent,omitempty"`         // Estimated battery remaining (range: 0 to 100)
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Battery) Reset() {
	*x = Battery{}
	mi := &file_telemetry_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Battery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Battery) ProtoMessage() {}

func (x *Battery) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Battery.ProtoReflect.Descriptor instead.
func (*Battery) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{122}
}

func (x *Battery) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Battery) GetTemperatureDegc() float32 {
	if x != nil {
		return x.TemperatureDegc
	}
	return 0
}

func (x *Battery) GetVoltageV() float32 {
	if x != nil {
		return x.VoltageV
	}
	return 0
}

func (x *Battery) GetCurrentBatteryA() float32 {
	if x != nil {
		return x.CurrentBatteryA
	}
	return 0
}

func (x *Battery) GetCapacityConsumedAh() float32 {
	if x != nil {
		return x.CapacityConsumedAh
	}
	return 0
}

func (x *Battery) GetRemainingPercent() float32 {
	if x != nil {
		return x.RemainingPercent
	}
	return 0
}

// Health type.
type Health struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	IsGyrometerCalibrationOk     bool                   `protobuf:"varint,1,opt,name=is_gyrometer_calibration_ok,json=isGyrometerCalibrationOk,proto3" json:"is_gyrometer_calibration_ok,omitempty"`             // True if the gyrometer is calibrated
	IsAccelerometerCalibrationOk bool                   `protobuf:"varint,2,opt,name=is_accelerometer_calibration_ok,json=isAccelerometerCalibrationOk,proto3" json:"is_accelerometer_calibration_ok,omitempty"` // True if the accelerometer is calibrated
	IsMagnetometerCalibrationOk  bool                   `protobuf:"varint,3,opt,name=is_magnetometer_calibration_ok,json=isMagnetometerCalibrationOk,proto3" json:"is_magnetometer_calibration_ok,omitempty"`    // True if the magnetometer is calibrated
	IsLocalPositionOk            bool                   `protobuf:"varint,5,opt,name=is_local_position_ok,json=isLocalPositionOk,proto3" json:"is_local_position_ok,omitempty"`                                  // True if the local position estimate is good enough to fly in 'position control' mode
	IsGlobalPositionOk           bool                   `protobuf:"varint,6,opt,name=is_global_position_ok,json=isGlobalPositionOk,proto3" json:"is_global_position_ok,omitempty"`                               // True if the global position estimate is good enough to fly in 'position control' mode
	IsHomePositionOk             bool                   `protobuf:"varint,7,opt,name=is_home_position_ok,json=isHomePositionOk,proto3" json:"is_home_position_ok,omitempty"`                                     // True if the home position has been initialized properly
	IsArmable                    bool                   `protobuf:"varint,8,opt,name=is_armable,json=isArmable,proto3" json:"is_armable,omitempty"`                                                              // True if system can be armed
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *Health) Reset() {
	*x = Health{}
	mi := &file_telemetry_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{123}
}

func (x *Health) GetIsGyrometerCalibrationOk() bool {
	if x != nil {
		return x.IsGyrometerCalibrationOk
	}
	return false
}

func (x *Health) GetIsAccelerometerCalibrationOk() bool {
	if x != nil {
		return x.IsAccelerometerCalibrationOk
	}
	return false
}

func (x *Health) GetIsMagnetometerCalibrationOk() bool {
	if x != nil {
		return x.IsMagnetometerCalibrationOk
	}
	return false
}

func (x *Health) GetIsLocalPositionOk() bool {
	if x != nil {
		return x.IsLocalPositionOk
	}
	return false
}

func (x *Health) GetIsGlobalPositionOk() bool {
	if x != nil {
		return x.IsGlobalPositionOk
	}
	return false
}

func (x *Health) GetIsHomePositionOk() bool {
	if x != nil {
		return x.IsHomePositionOk
	}
	return false
}

func (x *Health) GetIsArmable() bool {
	if x != nil {
		return x.IsArmable
	}
	return false
}

// Remote control status type.
type RcStatus struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	WasAvailableOnce      bool                   `protobuf:"varint,1,opt,name=was_available_once,json=wasAvailableOnce,proto3" json:"was_available_once,omitempty"`                 // True if an RC signal has been available once
	IsAvailable           bool                   `protobuf:"varint,2,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`                                  // True if the RC signal is available now
	SignalStrengthPercent float32                `protobuf:"fixed32,3,opt,name=signal_strength_percent,json=signalStrengthPercent,proto3" json:"signal_strength_percent,omitempty"` // Signal strength (range: 0 to 100, NaN if unknown)
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RcStatus) Reset() {
	*x = RcStatus{}
	mi := &file_telemetry_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RcStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcStatus) ProtoMessage() {}

func (x *RcStatus) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcStatus.ProtoReflect.Descriptor instead.
func (*RcStatus) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{124}
}

func (x *RcStatus) GetWasAvailableOnce() bool {
	if x != nil {
		return x.WasAvailableOnce
	}
	return false
}

func (x *RcStatus) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *RcStatus) GetSignalStrengthPercent() float32 {
	if x != nil {
		return x.SignalStrengthPercent
	}
	return 0
}

// StatusText information type.
type StatusText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          StatusTextType         `protobuf:"varint,1,opt,name=type,proto3,enum=mavsdk.rpc.telemetry.StatusTextType" json:"type,omitempty"` // Message type
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                                           // MAVLink status message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusText) Reset() {
	*x = StatusText{}
	mi := &file_telemetry_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusText) ProtoMessage() {}

func (x *StatusText) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusText.ProtoReflect.Descriptor instead.
func (*StatusText) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{125}
}

func (x *StatusText) GetType() StatusTextType {
	if x != nil {
		return x.Type
	}
	return StatusTextType_STATUS_TEXT_TYPE_DEBUG
}

func (x *StatusText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Actuator control target type.
type ActuatorControlTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         int32                  `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`               // An actuator control group is e.g. 'attitude' for the core flight controls, or 'gimbal' for a payload.
	Controls      []float32              `protobuf:"fixed32,2,rep,packed,name=controls,proto3" json:"controls,omitempty"` // Controls normed from -1 to 1, where 0 is neutral position.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActuatorControlTarget) Reset() {
	*x = ActuatorControlTarget{}
	mi := &file_telemetry_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActuatorControlTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActuatorControlTarget) ProtoMessage() {}

func (x *ActuatorControlTarget) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActuatorControlTarget.ProtoReflect.Descriptor instead.
func (*ActuatorControlTarget) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{126}
}

func (x *ActuatorControlTarget) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *ActuatorControlTarget) GetControls() []float32 {
	if x != nil {
		return x.Controls
	}
	return nil
}

// Actuator output status type.
type ActuatorOutputStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Active        uint32                 `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`             // Active outputs
	Actuator      []float32              `protobuf:"fixed32,2,rep,packed,name=actuator,proto3" json:"actuator,omitempty"` // Servo/motor output values
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActuatorOutputStatus) Reset() {
	*x = ActuatorOutputStatus{}
	mi := &file_telemetry_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActuatorOutputStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActuatorOutputStatus) ProtoMessage() {}

func (x *ActuatorOutputStatus) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActuatorOutputStatus.ProtoReflect.Descriptor instead.
func (*ActuatorOutputStatus) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{127}
}

func (x *ActuatorOutputStatus) GetActive() uint32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ActuatorOutputStatus) GetActuator() []float32 {
	if x != nil {
		return x.Actuator
	}
	return nil
}

// Covariance type.
//
// Row-major representation of a 6x6 cross-covariance matrix
// upper right triangle.
// Set first to NaN if unknown.
type Covariance struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CovarianceMatrix []float32              `protobuf:"fixed32,1,rep,packed,name=covariance_matrix,json=covarianceMatrix,proto3" json:"covariance_matrix,omitempty"` // Representation of a covariance matrix.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Covariance) Reset() {
	*x = Covariance{}
	mi := &file_telemetry_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Covariance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Covariance) ProtoMessage() {}

func (x *Covariance) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Covariance.ProtoReflect.Descriptor instead.
func (*Covariance) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{128}
}

func (x *Covariance) GetCovarianceMatrix() []float32 {
	if x != nil {
		return x.CovarianceMatrix
	}
	return nil
}

// Velocity type, represented in the Body (X Y Z) frame and in metres/second.
type VelocityBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XMS           float32                `protobuf:"fixed32,1,opt,name=x_m_s,json=xMS,proto3" json:"x_m_s,omitempty"` // Velocity in X in metres/second
	YMS           float32                `protobuf:"fixed32,2,opt,name=y_m_s,json=yMS,proto3" json:"y_m_s,omitempty"` // Velocity in Y in metres/second
	ZMS           float32                `protobuf:"fixed32,3,opt,name=z_m_s,json=zMS,proto3" json:"z_m_s,omitempty"` // Velocity in Z in metres/second
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VelocityBody) Reset() {
	*x = VelocityBody{}
	mi := &file_telemetry_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VelocityBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityBody) ProtoMessage() {}

func (x *VelocityBody) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityBody.ProtoReflect.Descriptor instead.
func (*VelocityBody) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{129}
}

func (x *VelocityBody) GetXMS() float32 {
	if x != nil {
		return x.XMS
	}
	return 0
}

func (x *VelocityBody) GetYMS() float32 {
	if x != nil {
		return x.YMS
	}
	return 0
}

func (x *VelocityBody) GetZMS() float32 {
	if x != nil {
		return x.ZMS
	}
	return 0
}

// Position type, represented in the Body (X Y Z) frame
type PositionBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XM            float32                `protobuf:"fixed32,1,opt,name=x_m,json=xM,proto3" json:"x_m,omitempty"` // X Position in metres.
	YM            float32                `protobuf:"fixed32,2,opt,name=y_m,json=yM,proto3" json:"y_m,omitempty"` // Y Position in metres.
	ZM            float32                `protobuf:"fixed32,3,opt,name=z_m,json=zM,proto3" json:"z_m,omitempty"` // Z Position in metres.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionBody) Reset() {
	*x = PositionBody{}
	mi := &file_telemetry_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionBody) ProtoMessage() {}

func (x *PositionBody) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionBody.ProtoReflect.Descriptor instead.
func (*PositionBody) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{130}
}

func (x *PositionBody) GetXM() float32 {
	if x != nil {
		return x.XM
	}
	return 0
}

func (x *PositionBody) GetYM() float32 {
	if x != nil {
		return x.YM
	}
	return 0
}

func (x *PositionBody) GetZM() float32 {
	if x != nil {
		return x.ZM
	}
	return 0
}

// Odometry message type.
type Odometry struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TimeUsec            uint64                 `protobuf:"varint,1,opt,name=time_usec,json=timeUsec,proto3" json:"time_usec,omitempty"`                                                           // Timestamp (0 to use Backend timestamp).
	FrameId             Odometry_MavFrame      `protobuf:"varint,2,opt,name=frame_id,json=frameId,proto3,enum=mavsdk.rpc.telemetry.Odometry_MavFrame" json:"frame_id,omitempty"`                  // Coordinate frame of reference for the pose data.
	ChildFrameId        Odometry_MavFrame      `protobuf:"varint,3,opt,name=child_frame_id,json=childFrameId,proto3,enum=mavsdk.rpc.telemetry.Odometry_MavFrame" json:"child_frame_id,omitempty"` // Coordinate frame of reference for the velocity in free space (twist) data.
	PositionBody        *PositionBody          `protobuf:"bytes,4,opt,name=position_body,json=positionBody,proto3" json:"position_body,omitempty"`                                                // Position.
	Q                   *Quaternion            `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`                                                                                          // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
	VelocityBody        *VelocityBody          `protobuf:"bytes,6,opt,name=velocity_body,json=velocityBody,proto3" json:"velocity_body,omitempty"`                                                // Linear velocity (m/s).
	AngularVelocityBody *AngularVelocityBody   `protobuf:"bytes,7,opt,name=angular_velocity_body,json=angularVelocityBody,proto3" json:"angular_velocity_body,omitempty"`                         // Angular velocity (rad/s).
	PoseCovariance      *Covariance            `protobuf:"bytes,8,opt,name=pose_covariance,json=poseCovariance,proto3" json:"pose_covariance,omitempty"`                                          // Pose cross-covariance matrix.
	VelocityCovariance  *Covariance            `protobuf:"bytes,9,opt,name=velocity_covariance,json=velocityCovariance,proto3" json:"velocity_covariance,omitempty"`                              // Velocity cross-covariance matrix.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Odometry) Reset() {
	*x = Odometry{}
	mi := &file_telemetry_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Odometry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Odometry) ProtoMessage() {}

func (x *Odometry) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Odometry.ProtoReflect.Descriptor instead.
func (*Odometry) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{131}
}

func (x *Odometry) GetTimeUsec() uint64 {
	if x != nil {
		return x.TimeUsec
	}
	return 0
}

func (x *Odometry) GetFrameId() Odometry_MavFrame {
	if x != nil {
		return x.FrameId
	}
	return Odometry_MAV_FRAME_UNDEF
}

func (x *Odometry) GetChildFrameId() Odometry_MavFrame {
	if x != nil {
		return x.ChildFrameId
	}
	return Odometry_MAV_FRAME_UNDEF
}

func (x *Odometry) GetPositionBody() *PositionBody {
	if x != nil {
		return x.PositionBody
	}
	return nil
}

func (x *Odometry) GetQ() *Quaternion {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *Odometry) GetVelocityBody() *VelocityBody {
	if x != nil {
		return x.VelocityBody
	}
	return nil
}

func (x *Odometry) GetAngularVelocityBody() *AngularVelocityBody {
	if x != nil {
		return x.AngularVelocityBody
	}
	return nil
}

func (x *Odometry) GetPoseCovariance() *Covariance {
	if x != nil {
		return x.PoseCovariance
	}
	return nil
}

func (x *Odometry) GetVelocityCovariance() *Covariance {
	if x != nil {
		return x.VelocityCovariance
	}
	return nil
}

// DistanceSensor message type.
type DistanceSensor struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MinimumDistanceM float32                `protobuf:"fixed32,1,opt,name=minimum_distance_m,json=minimumDistanceM,proto3" json:"minimum_distance_m,omitempty"` // Minimum distance the sensor can measure, NaN if unknown.
	MaximumDistanceM float32                `protobuf:"fixed32,2,opt,name=maximum_distance_m,json=maximumDistanceM,proto3" json:"maximum_distance_m,omitempty"` // Maximum distance the sensor can measure, NaN if unknown.
	CurrentDistanceM float32                `protobuf:"fixed32,3,opt,name=current_distance_m,json=currentDistanceM,proto3" json:"current_distance_m,omitempty"` // Current distance reading, NaN if unknown.
	Orientation      *EulerAngle            `protobuf:"bytes,4,opt,name=orientation,proto3" json:"orientation,omitempty"`                                       // Sensor Orientation reading.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DistanceSensor) Reset() {
	*x = DistanceSensor{}
	mi := &file_telemetry_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistanceSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistanceSensor) ProtoMessage() {}

func (x *DistanceSensor) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistanceSensor.ProtoReflect.Descriptor instead.
func (*DistanceSensor) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{132}
}

func (x *DistanceSensor) GetMinimumDistanceM() float32 {
	if x != nil {
		return x.MinimumDistanceM
	}
	return 0
}

func (x *DistanceSensor) GetMaximumDistanceM() float32 {
	if x != nil {
		return x.MaximumDistanceM
	}
	return 0
}

func (x *DistanceSensor) GetCurrentDistanceM() float32 {
	if x != nil {
		return x.CurrentDistanceM
	}
	return 0
}

func (x *DistanceSensor) GetOrientation() *EulerAngle {
	if x != nil {
		return x.Orientation
	}
	return nil
}

// Scaled Pressure message type.
type ScaledPressure struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	TimestampUs                        uint64                 `protobuf:"varint,1,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"`                                                                           // Timestamp (time since system boot)
	AbsolutePressureHpa                float32                `protobuf:"fixed32,2,opt,name=absolute_pressure_hpa,json=absolutePressureHpa,proto3" json:"absolute_pressure_hpa,omitempty"`                                                // Absolute pressure in hPa
	DifferentialPressureHpa            float32                `protobuf:"fixed32,3,opt,name=differential_pressure_hpa,json=differentialPressureHpa,proto3" json:"differential_pressure_hpa,omitempty"`                                    // Differential pressure 1 in hPa
	TemperatureDeg                     float32                `protobuf:"fixed32,4,opt,name=temperature_deg,json=temperatureDeg,proto3" json:"temperature_deg,omitempty"`                                                                 // Absolute pressure temperature (in celsius)
	DifferentialPressureTemperatureDeg float32                `protobuf:"fixed32,5,opt,name=differential_pressure_temperature_deg,json=differentialPressureTemperatureDeg,proto3" json:"differential_pressure_temperature_deg,omitempty"` // Differential pressure temperature (in celsius, 0 if not available)
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *ScaledPressure) Reset() {
	*x = ScaledPressure{}
	mi := &file_telemetry_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaledPressure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaledPressure) ProtoMessage() {}

func (x *ScaledPressure) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaledPressure.ProtoReflect.Descriptor instead.
func (*ScaledPressure) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{133}
}

func (x *ScaledPressure) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

func (x *ScaledPressure) GetAbsolutePressureHpa() float32 {
	if x != nil {
		return x.AbsolutePressureHpa
	}
	return 0
}

func (x *ScaledPressure) GetDifferentialPressureHpa() float32 {
	if x != nil {
		return x.DifferentialPressureHpa
	}
	return 0
}

func (x *ScaledPressure) GetTemperatureDeg() float32 {
	if x != nil {
		return x.TemperatureDeg
	}
	return 0
}

func (x *ScaledPressure) GetDifferentialPressureTemperatureDeg() float32 {
	if x != nil {
		return x.DifferentialPressureTemperatureDeg
	}
	return 0
}

// PositionNed message type.
type PositionNed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NorthM        float32                `protobuf:"fixed32,1,opt,name=north_m,json=northM,proto3" json:"north_m,omitempty"` // Position along north direction in metres
	EastM         float32                `protobuf:"fixed32,2,opt,name=east_m,json=eastM,proto3" json:"east_m,omitempty"`    // Position along east direction in metres
	DownM         float32                `protobuf:"fixed32,3,opt,name=down_m,json=downM,proto3" json:"down_m,omitempty"`    // Position along down direction in metres
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionNed) Reset() {
	*x = PositionNed{}
	mi := &file_telemetry_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionNed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionNed) ProtoMessage() {}

func (x *PositionNed) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionNed.ProtoReflect.Descriptor instead.
func (*PositionNed) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{134}
}

func (x *PositionNed) GetNorthM() float32 {
	if x != nil {
		return x.NorthM
	}
	return 0
}

func (x *PositionNed) GetEastM() float32 {
	if x != nil {
		return x.EastM
	}
	return 0
}

func (x *PositionNed) GetDownM() float32 {
	if x != nil {
		return x.DownM
	}
	return 0
}

// VelocityNed message type.
type VelocityNed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NorthMS       float32                `protobuf:"fixed32,1,opt,name=north_m_s,json=northMS,proto3" json:"north_m_s,omitempty"` // Velocity along north direction in metres per second
	EastMS        float32                `protobuf:"fixed32,2,opt,name=east_m_s,json=eastMS,proto3" json:"east_m_s,omitempty"`    // Velocity along east direction in metres per second
	DownMS        float32                `protobuf:"fixed32,3,opt,name=down_m_s,json=downMS,proto3" json:"down_m_s,omitempty"`    // Velocity along down direction in metres per second
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VelocityNed) Reset() {
	*x = VelocityNed{}
	mi := &file_telemetry_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VelocityNed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityNed) ProtoMessage() {}

func (x *VelocityNed) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityNed.ProtoReflect.Descriptor instead.
func (*VelocityNed) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{135}
}

func (x *VelocityNed) GetNorthMS() float32 {
	if x != nil {
		return x.NorthMS
	}
	return 0
}

func (x *VelocityNed) GetEastMS() float32 {
	if x != nil {
		return x.EastMS
	}
	return 0
}

func (x *VelocityNed) GetDownMS() float32 {
	if x != nil {
		return x.DownMS
	}
	return 0
}

// PositionVelocityNed message type.
type PositionVelocityNed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      *PositionNed           `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"` // Position (NED)
	Velocity      *VelocityNed           `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"` // Velocity (NED)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionVelocityNed) Reset() {
	*x = PositionVelocityNed{}
	mi := &file_telemetry_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionVelocityNed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionVelocityNed) ProtoMessage() {}

func (x *PositionVelocityNed) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionVelocityNed.ProtoReflect.Descriptor instead.
func (*PositionVelocityNed) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{136}
}

func (x *PositionVelocityNed) GetPosition() *PositionNed {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PositionVelocityNed) GetVelocity() *VelocityNed {
	if x != nil {
		return x.Velocity
	}
	return nil
}

// GroundTruth message type.
type GroundTruth struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LatitudeDeg       float64                `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                     // Latitude in degrees (range: -90 to +90)
	LongitudeDeg      float64                `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                  // Longitude in degrees (range: -180 to 180)
	AbsoluteAltitudeM float32                `protobuf:"fixed32,3,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"` // Altitude AMSL (above mean sea level) in metres
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GroundTruth) Reset() {
	*x = GroundTruth{}
	mi := &file_telemetry_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroundTruth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroundTruth) ProtoMessage() {}

func (x *GroundTruth) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroundTruth.ProtoReflect.Descriptor instead.
func (*GroundTruth) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{137}
}

func (x *GroundTruth) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *GroundTruth) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *GroundTruth) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

// FixedwingMetrics message type.
type FixedwingMetrics struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AirspeedMS         float32                `protobuf:"fixed32,1,opt,name=airspeed_m_s,json=airspeedMS,proto3" json:"airspeed_m_s,omitempty"`                       // Current indicated airspeed (IAS) in metres per second
	ThrottlePercentage float32                `protobuf:"fixed32,2,opt,name=throttle_percentage,json=throttlePercentage,proto3" json:"throttle_percentage,omitempty"` // Current throttle setting (0 to 100)
	ClimbRateMS        float32                `protobuf:"fixed32,3,opt,name=climb_rate_m_s,json=climbRateMS,proto3" json:"climb_rate_m_s,omitempty"`                  // Current climb rate in metres per second
	GroundspeedMS      float32                `protobuf:"fixed32,4,opt,name=groundspeed_m_s,json=groundspeedMS,proto3" json:"groundspeed_m_s,omitempty"`              // Current groundspeed metres per second
	HeadingDeg         float32                `protobuf:"fixed32,5,opt,name=heading_deg,json=headingDeg,proto3" json:"heading_deg,omitempty"`                         // Current heading in compass units (0-360, 0=north)
	AbsoluteAltitudeM  float32                `protobuf:"fixed32,6,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"`  // Current altitude in metres (MSL)
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FixedwingMetrics) Reset() {
	*x = FixedwingMetrics{}
	mi := &file_telemetry_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedwingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedwingMetrics) ProtoMessage() {}

func (x *FixedwingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedwingMetrics.ProtoReflect.Descriptor instead.
func (*FixedwingMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{138}
}

func (x *FixedwingMetrics) GetAirspeedMS() float32 {
	if x != nil {
		return x.AirspeedMS
	}
	return 0
}

func (x *FixedwingMetrics) GetThrottlePercentage() float32 {
	if x != nil {
		return x.ThrottlePercentage
	}
	return 0
}

func (x *FixedwingMetrics) GetClimbRateMS() float32 {
	if x != nil {
		return x.ClimbRateMS
	}
	return 0
}

func (x *FixedwingMetrics) GetGroundspeedMS() float32 {
	if x != nil {
		return x.GroundspeedMS
	}
	return 0
}

func (x *FixedwingMetrics) GetHeadingDeg() float32 {
	if x != nil {
		return x.HeadingDeg
	}
	return 0
}

func (x *FixedwingMetrics) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

// AccelerationFrd message type.
type AccelerationFrd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForwardMS2    float32                `protobuf:"fixed32,1,opt,name=forward_m_s2,json=forwardMS2,proto3" json:"forward_m_s2,omitempty"` // Acceleration in forward direction in metres per second^2
	RightMS2      float32                `protobuf:"fixed32,2,opt,name=right_m_s2,json=rightMS2,proto3" json:"right_m_s2,omitempty"`       // Acceleration in right direction in metres per second^2
	DownMS2       float32                `protobuf:"fixed32,3,opt,name=down_m_s2,json=downMS2,proto3" json:"down_m_s2,omitempty"`          // Acceleration in down direction in metres per second^2
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccelerationFrd) Reset() {
	*x = AccelerationFrd{}
	mi := &file_telemetry_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccelerationFrd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelerationFrd) ProtoMessage() {}

func (x *AccelerationFrd) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelerationFrd.ProtoReflect.Descriptor instead.
func (*AccelerationFrd) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{139}
}

func (x *AccelerationFrd) GetForwardMS2() float32 {
	if x != nil {
		return x.ForwardMS2
	}
	return 0
}

func (x *AccelerationFrd) GetRightMS2() float32 {
	if x != nil {
		return x.RightMS2
	}
	return 0
}

func (x *AccelerationFrd) GetDownMS2() float32 {
	if x != nil {
		return x.DownMS2
	}
	return 0
}

// AngularVelocityFrd message type.
type AngularVelocityFrd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForwardRadS   float32                `protobuf:"fixed32,1,opt,name=forward_rad_s,json=forwardRadS,proto3" json:"forward_rad_s,omitempty"` // Angular velocity in forward direction in radians per second
	RightRadS     float32                `protobuf:"fixed32,2,opt,name=right_rad_s,json=rightRadS,proto3" json:"right_rad_s,omitempty"`       // Angular velocity in right direction in radians per second
	DownRadS      float32                `protobuf:"fixed32,3,opt,name=down_rad_s,json=downRadS,proto3" json:"down_rad_s,omitempty"`          // Angular velocity in Down direction in radians per second
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AngularVelocityFrd) Reset() {
	*x = AngularVelocityFrd{}
	mi := &file_telemetry_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngularVelocityFrd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngularVelocityFrd) ProtoMessage() {}

func (x *AngularVelocityFrd) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngularVelocityFrd.ProtoReflect.Descriptor instead.
func (*AngularVelocityFrd) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{140}
}

func (x *AngularVelocityFrd) GetForwardRadS() float32 {
	if x != nil {
		return x.ForwardRadS
	}
	return 0
}

func (x *AngularVelocityFrd) GetRightRadS() float32 {
	if x != nil {
		return x.RightRadS
	}
	return 0
}

func (x *AngularVelocityFrd) GetDownRadS() float32 {
	if x != nil {
		return x.DownRadS
	}
	return 0
}

// MagneticFieldFrd message type.
type MagneticFieldFrd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForwardGauss  float32                `protobuf:"fixed32,1,opt,name=forward_gauss,json=forwardGauss,proto3" json:"forward_gauss,omitempty"` // Magnetic field in forward direction measured in Gauss
	RightGauss    float32                `protobuf:"fixed32,2,opt,name=right_gauss,json=rightGauss,proto3" json:"right_gauss,omitempty"`       // Magnetic field in East direction measured in Gauss
	DownGauss     float32                `protobuf:"fixed32,3,opt,name=down_gauss,json=downGauss,proto3" json:"down_gauss,omitempty"`          // Magnetic field in Down direction measured in Gauss
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MagneticFieldFrd) Reset() {
	*x = MagneticFieldFrd{}
	mi := &file_telemetry_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagneticFieldFrd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagneticFieldFrd) ProtoMessage() {}

func (x *MagneticFieldFrd) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagneticFieldFrd.ProtoReflect.Descriptor instead.
func (*MagneticFieldFrd) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{141}
}

func (x *MagneticFieldFrd) GetForwardGauss() float32 {
	if x != nil {
		return x.ForwardGauss
	}
	return 0
}

func (x *MagneticFieldFrd) GetRightGauss() float32 {
	if x != nil {
		return x.RightGauss
	}
	return 0
}

func (x *MagneticFieldFrd) GetDownGauss() float32 {
	if x != nil {
		return x.DownGauss
	}
	return 0
}

// Imu message type.
type Imu struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AccelerationFrd    *AccelerationFrd       `protobuf:"bytes,1,opt,name=acceleration_frd,json=accelerationFrd,proto3" json:"acceleration_frd,omitempty"`            // Acceleration
	AngularVelocityFrd *AngularVelocityFrd    `protobuf:"bytes,2,opt,name=angular_velocity_frd,json=angularVelocityFrd,proto3" json:"angular_velocity_frd,omitempty"` // Angular velocity
	MagneticFieldFrd   *MagneticFieldFrd      `protobuf:"bytes,3,opt,name=magnetic_field_frd,json=magneticFieldFrd,proto3" json:"magnetic_field_frd,omitempty"`       // Magnetic field
	TemperatureDegc    float32                `protobuf:"fixed32,4,opt,name=temperature_degc,json=temperatureDegc,proto3" json:"temperature_degc,omitempty"`          // Temperature
	TimestampUs        uint64                 `protobuf:"varint,5,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"`                       // Timestamp in microseconds
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Imu) Reset() {
	*x = Imu{}
	mi := &file_telemetry_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Imu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Imu) ProtoMessage() {}

func (x *Imu) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Imu.ProtoReflect.Descriptor instead.
func (*Imu) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{142}
}

func (x *Imu) GetAccelerationFrd() *AccelerationFrd {
	if x != nil {
		return x.AccelerationFrd
	}
	return nil
}

func (x *Imu) GetAngularVelocityFrd() *AngularVelocityFrd {
	if x != nil {
		return x.AngularVelocityFrd
	}
	return nil
}

func (x *Imu) GetMagneticFieldFrd() *MagneticFieldFrd {
	if x != nil {
		return x.MagneticFieldFrd
	}
	return nil
}

func (x *Imu) GetTemperatureDegc() float32 {
	if x != nil {
		return x.TemperatureDegc
	}
	return 0
}

func (x *Imu) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

// Gps global origin type.
type GpsGlobalOrigin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LatitudeDeg   float64                `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`    // Latitude of the origin
	LongitudeDeg  float64                `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"` // Longitude of the origin
	AltitudeM     float32                `protobuf:"fixed32,3,opt,name=altitude_m,json=altitudeM,proto3" json:"altitude_m,omitempty"`          // Altitude AMSL (above mean sea level) in metres
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpsGlobalOrigin) Reset() {
	*x = GpsGlobalOrigin{}
	mi := &file_telemetry_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpsGlobalOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsGlobalOrigin) ProtoMessage() {}

func (x *GpsGlobalOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsGlobalOrigin.ProtoReflect.Descriptor instead.
func (*GpsGlobalOrigin) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{143}
}

func (x *GpsGlobalOrigin) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *GpsGlobalOrigin) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *GpsGlobalOrigin) GetAltitudeM() float32 {
	if x != nil {
		return x.AltitudeM
	}
	return 0
}

// Altitude message type
type Altitude struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AltitudeMonotonicM float32                `protobuf:"fixed32,1,opt,name=altitude_monotonic_m,json=altitudeMonotonicM,proto3" json:"altitude_monotonic_m,omitempty"` // Altitude in meters is initialized on system boot and monotonic
	AltitudeAmslM      float32                `protobuf:"fixed32,2,opt,name=altitude_amsl_m,json=altitudeAmslM,proto3" json:"altitude_amsl_m,omitempty"`                //  Altitude AMSL (above mean sea level) in meters
	AltitudeLocalM     float32                `protobuf:"fixed32,3,opt,name=altitude_local_m,json=altitudeLocalM,proto3" json:"altitude_local_m,omitempty"`             // Local altitude in meters
	AltitudeRelativeM  float32                `protobuf:"fixed32,4,opt,name=altitude_relative_m,json=altitudeRelativeM,proto3" json:"altitude_relative_m,omitempty"`    // Altitude above home position in meters
	AltitudeTerrainM   float32                `protobuf:"fixed32,5,opt,name=altitude_terrain_m,json=altitudeTerrainM,proto3" json:"altitude_terrain_m,omitempty"`       // Altitude above terrain in meters
	BottomClearanceM   float32                `protobuf:"fixed32,6,opt,name=bottom_clearance_m,json=bottomClearanceM,proto3" json:"bottom_clearance_m,omitempty"`       // This is not the altitude, but the clear space below the system according to the fused clearance estimate in meters.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Altitude) Reset() {
	*x = Altitude{}
	mi := &file_telemetry_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Altitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Altitude) ProtoMessage() {}

func (x *Altitude) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Altitude.ProtoReflect.Descriptor instead.
func (*Altitude) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{144}
}

func (x *Altitude) GetAltitudeMonotonicM() float32 {
	if x != nil {
		return x.AltitudeMonotonicM
	}
	return 0
}

func (x *Altitude) GetAltitudeAmslM() float32 {
	if x != nil {
		return x.AltitudeAmslM
	}
	return 0
}

func (x *Altitude) GetAltitudeLocalM() float32 {
	if x != nil {
		return x.AltitudeLocalM
	}
	return 0
}

func (x *Altitude) GetAltitudeRelativeM() float32 {
	if x != nil {
		return x.AltitudeRelativeM
	}
	return 0
}

func (x *Altitude) GetAltitudeTerrainM() float32 {
	if x != nil {
		return x.AltitudeTerrainM
	}
	return 0
}

func (x *Altitude) GetBottomClearanceM() float32 {
	if x != nil {
		return x.BottomClearanceM
	}
	return 0
}

// Result type.
type TelemetryResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        TelemetryResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.telemetry.TelemetryResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr     string                 `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                            // Human-readable English string describing the result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryResult) Reset() {
	*x = TelemetryResult{}
	mi := &file_telemetry_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryResult) ProtoMessage() {}

func (x *TelemetryResult) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryResult.ProtoReflect.Descriptor instead.
func (*TelemetryResult) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{145}
}

func (x *TelemetryResult) GetResult() TelemetryResult_Result {
	if x != nil {
		return x.Result
	}
	return TelemetryResult_RESULT_UNKNOWN
}

func (x *TelemetryResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_telemetry_proto protoreflect.FileDescriptor

const file_telemetry_proto_rawDesc = "" +
	"\n" +
	"\x0ftelemetry.proto\x12\x14mavsdk.rpc.telemetry\x1a\x14mavsdk_options.proto\"\x1a\n" +
	"\x18SubscribePositionRequest\"N\n" +
	"\x10PositionResponse\x12:\n" +
	"\bposition\x18\x01 \x01(\v2\x1e.mavsdk.rpc.telemetry.PositionR\bposition\"\x16\n" +
	"\x14SubscribeHomeRequest\"B\n" +
	"\fHomeResponse\x122\n" +
	"\x04home\x18\x01 \x01(\v2\x1e.mavsdk.rpc.telemetry.PositionR\x04home\"\x17\n" +
	"\x15SubscribeInAirRequest\"+\n" +
	"\rInAirResponse\x12\x1a\n" +
	"\tis_in_air\x18\x01 \x01(\bR\aisInAir\"\x1d\n" +
	"\x1bSubscribeLandedStateRequest\"[\n" +
	"\x13LandedStateResponse\x12D\n" +
	"\flanded_state\x18\x01 \x01(\x0e2!.mavsdk.rpc.telemetry.LandedStateR\vlandedState\"\x17\n" +
	"\x15SubscribeArmedRequest\"*\n" +
	"\rArmedResponse\x12\x19\n" +
	"\bis_armed\x18\x01 \x01(\bR\aisArmed\"\x1b\n" +
	"\x19SubscribeVtolStateRequest\"S\n" +
	"\x11VtolStateResponse\x12>\n" +
	"\n" +
	"vtol_state\x18\x01 \x01(\x0e2\x1f.mavsdk.rpc.telemetry.VtolStateR\tvtolState\"$\n" +
	"\"SubscribeAttitudeQuaternionRequest\"o\n" +
	"\x1aAttitudeQuaternionResponse\x12Q\n" +
	"\x13attitude_quaternion\x18\x01 \x01(\v2 .mavsdk.rpc.telemetry.QuaternionR\x12attitudeQuaternion\"\x1f\n" +
	"\x1dSubscribeAttitudeEulerRequest\"`\n" +
	"\x15AttitudeEulerResponse\x12G\n" +
	"\x0eattitude_euler\x18\x01 \x01(\v2 .mavsdk.rpc.telemetry.EulerAngleR\rattitudeEuler\"-\n" +
	"+SubscribeAttitudeAngularVelocityBodyRequest\"\x95\x01\n" +
	"#AttitudeAngularVelocityBodyResponse\x12n\n" +
	"\x1eattitude_angular_velocity_body\x18\x01 \x01(\v2).mavsdk.rpc.telemetry.AngularVelocityBodyR\x1battitudeAngularVelocityBody\"\x1d\n" +
	"\x1bSubscribeVelocityNedRequest\"[\n" +
	"\x13VelocityNedResponse\x12D\n" +
	"\fvelocity_ned\x18\x01 \x01(\v2!.mavsdk.rpc.telemetry.VelocityNedR\vvelocityNed\"\x19\n" +
	"\x17SubscribeGpsInfoRequest\"K\n" +
	"\x0fGpsInfoResponse\x128\n" +
	"\bgps_info\x18\x01 \x01(\v2\x1d.mavsdk.rpc.telemetry.GpsInfoR\agpsInfo\"\x18\n" +
	"\x16SubscribeRawGpsRequest\"G\n" +
	"\x0eRawGpsResponse\x125\n" +
	"\araw_gps\x18\x01 \x01(\v2\x1c.mavsdk.rpc.telemetry.RawGpsR\x06rawGps\"\x19\n" +
	"\x17SubscribeBatteryRequest\"J\n" +
	"\x0fBatteryResponse\x127\n" +
	"\abattery\x18\x01 \x01(\v2\x1d.mavsdk.rpc.telemetry.BatteryR\abattery\"\x1c\n" +
	"\x1aSubscribeFlightModeRequest\"W\n" +
	"\x12FlightModeResponse\x12A\n" +
	"\vflight_mode\x18\x01 \x01(\x0e2 .mavsdk.rpc.telemetry.FlightModeR\n" +
	"flightMode\"\x18\n" +
	"\x16SubscribeHealthRequest\"F\n" +
	"\x0eHealthResponse\x124\n" +
	"\x06health\x18\x01 \x01(\v2\x1c.mavsdk.rpc.telemetry.HealthR\x06health\"\x1a\n" +
	"\x18SubscribeRcStatusRequest\"O\n" +
	"\x10RcStatusResponse\x12;\n" +
	"\trc_status\x18\x01 \x01(\v2\x1e.mavsdk.rpc.telemetry.RcStatusR\brcStatus\"\x1c\n" +
	"\x1aSubscribeStatusTextRequest\"W\n" +
	"\x12StatusTextResponse\x12A\n" +
	"\vstatus_text\x18\x01 \x01(\v2 .mavsdk.rpc.telemetry.StatusTextR\n" +
	"statusText\"'\n" +
	"%SubscribeActuatorControlTargetRequest\"\x84\x01\n" +
	"\x1dActuatorControlTargetResponse\x12c\n" +
	"\x17actuator_control_target\x18\x01 \x01(\v2+.mavsdk.rpc.telemetry.ActuatorControlTargetR\x15actuatorControlTarget\"&\n" +
	"$SubscribeActuatorOutputStatusRequest\"\x80\x01\n" +
	"\x1cActuatorOutputStatusResponse\x12`\n" +
	"\x16actuator_output_status\x18\x01 \x01(\v2*.mavsdk.rpc.telemetry.ActuatorOutputStatusR\x14actuatorOutputStatus\"\x1a\n" +
	"\x18SubscribeOdometryRequest\"N\n" +
	"\x10OdometryResponse\x12:\n" +
	"\bodometry\x18\x01 \x01(\v2\x1e.mavsdk.rpc.telemetry.OdometryR\bodometry\"%\n" +
	"#SubscribePositionVelocityNedRequest\"|\n" +
	"\x1bPositionVelocityNedResponse\x12]\n" +
	"\x15position_velocity_ned\x18\x01 \x01(\v2).mavsdk.rpc.telemetry.PositionVelocityNedR\x13positionVelocityNed\"\x1d\n" +
	"\x1bSubscribeGroundTruthRequest\"[\n" +
	"\x13GroundTruthResponse\x12D\n" +
	"\fground_truth\x18\x01 \x01(\v2!.mavsdk.rpc.telemetry.GroundTruthR\vgroundTruth\"\"\n" +
	" SubscribeFixedwingMetricsRequest\"o\n" +
	"\x18FixedwingMetricsResponse\x12S\n" +
	"\x11fixedwing_metrics\x18\x01 \x01(\v2&.mavsdk.rpc.telemetry.FixedwingMetricsR\x10fixedwingMetrics\"\x15\n" +
	"\x13SubscribeImuRequest\":\n" +
	"\vImuResponse\x12+\n" +
	"\x03imu\x18\x01 \x01(\v2\x19.mavsdk.rpc.telemetry.ImuR\x03imu\"\x1b\n" +
	"\x19SubscribeScaledImuRequest\"@\n" +
	"\x11ScaledImuResponse\x12+\n" +
	"\x03imu\x18\x01 \x01(\v2\x19.mavsdk.rpc.telemetry.ImuR\x03imu\"\x18\n" +
	"\x16SubscribeRawImuRequest\"=\n" +
	"\x0eRawImuResponse\x12+\n" +
	"\x03imu\x18\x01 \x01(\v2\x19.mavsdk.rpc.telemetry.ImuR\x03imu\"\x1d\n" +
	"\x1bSubscribeHealthAllOkRequest\">\n" +
	"\x13HealthAllOkResponse\x12'\n" +
	"\x10is_health_all_ok\x18\x01 \x01(\bR\risHealthAllOk\"\x1f\n" +
	"\x1dSubscribeUnixEpochTimeRequest\"0\n" +
	"\x15UnixEpochTimeResponse\x12\x17\n" +
	"\atime_us\x18\x01 \x01(\x04R\x06timeUs\" \n" +
	"\x1eSubscribeDistanceSensorRequest\"g\n" +
	"\x16DistanceSensorResponse\x12M\n" +
	"\x0fdistance_sensor\x18\x01 \x01(\v2$.mavsdk.rpc.telemetry.DistanceSensorR\x0edistanceSensor\" \n" +
	"\x1eSubscribeScaledPressureRequest\"g\n" +
	"\x16ScaledPressureResponse\x12M\n" +
	"\x0fscaled_pressure\x18\x01 \x01(\v2$.mavsdk.rpc.telemetry.ScaledPressureR\x0escaledPressure\"\x19\n" +
	"\x17SubscribeHeadingRequest\"Q\n" +
	"\x0fHeadingResponse\x12>\n" +
	"\vheading_deg\x18\x01 \x01(\v2\x1d.mavsdk.rpc.telemetry.HeadingR\n" +
	"headingDeg\"\x1a\n" +
	"\x18SubscribeAltitudeRequest\"N\n" +
	"\x10AltitudeResponse\x12:\n" +
	"\baltitude\x18\x01 \x01(\v2\x1e.mavsdk.rpc.telemetry.AltitudeR\baltitude\"1\n" +
	"\x16SetRatePositionRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"k\n" +
	"\x17SetRatePositionResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"-\n" +
	"\x12SetRateHomeRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"g\n" +
	"\x13SetRateHomeResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\".\n" +
	"\x13SetRateInAirRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"h\n" +
	"\x14SetRateInAirResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"4\n" +
	"\x19SetRateLandedStateRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"n\n" +
	"\x1aSetRateLandedStateResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"2\n" +
	"\x17SetRateVtolStateRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"l\n" +
	"\x18SetRateVtolStateResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"6\n" +
	"\x1bSetRateAttitudeEulerRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"p\n" +
	"\x1cSetRateAttitudeEulerResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\";\n" +
	" SetRateAttitudeQuaternionRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"u\n" +
	"!SetRateAttitudeQuaternionResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"D\n" +
	")SetRateAttitudeAngularVelocityBodyRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"~\n" +
	"*SetRateAttitudeAngularVelocityBodyResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"4\n" +
	"\x19SetRateVelocityNedRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"n\n" +
	"\x1aSetRateVelocityNedResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"0\n" +
	"\x15SetRateGpsInfoRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"j\n" +
	"\x16SetRateGpsInfoResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"/\n" +
	"\x14SetRateRawGpsRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"0\n" +
	"\x15SetRateBatteryRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"j\n" +
	"\x16SetRateBatteryResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"1\n" +
	"\x16SetRateRcStatusRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"k\n" +
	"\x17SetRateRcStatusResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\">\n" +
	"#SetRateActuatorControlTargetRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"x\n" +
	"$SetRateActuatorControlTargetResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"=\n" +
	"\"SetRateActuatorOutputStatusRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"w\n" +
	"#SetRateActuatorOutputStatusResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"1\n" +
	"\x16SetRateOdometryRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"k\n" +
	"\x17SetRateOdometryResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"<\n" +
	"!SetRatePositionVelocityNedRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"v\n" +
	"\"SetRatePositionVelocityNedResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"4\n" +
	"\x19SetRateGroundTruthRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"n\n" +
	"\x1aSetRateGroundTruthResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"9\n" +
	"\x1eSetRateFixedwingMetricsRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"s\n" +
	"\x1fSetRateFixedwingMetricsResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\",\n" +
	"\x11SetRateImuRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"f\n" +
	"\x12SetRateImuResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"2\n" +
	"\x17SetRateScaledImuRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"l\n" +
	"\x18SetRateScaledImuResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"/\n" +
	"\x14SetRateRawImuRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"i\n" +
	"\x15SetRateRawImuResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"6\n" +
	"\x1bSetRateUnixEpochTimeRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"p\n" +
	"\x1cSetRateUnixEpochTimeResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"7\n" +
	"\x1cSetRateDistanceSensorRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"q\n" +
	"\x1dSetRateDistanceSensorResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"\x1b\n" +
	"\x19GetGpsGlobalOriginRequest\"\xc1\x01\n" +
	"\x1aGetGpsGlobalOriginResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\x12Q\n" +
	"\x11gps_global_origin\x18\x02 \x01(\v2%.mavsdk.rpc.telemetry.GpsGlobalOriginR\x0fgpsGlobalOrigin\"1\n" +
	"\x16SetRateAltitudeRequest\x12\x17\n" +
	"\arate_hz\x18\x01 \x01(\x01R\x06rateHz\"k\n" +
	"\x17SetRateAltitudeResponse\x12P\n" +
	"\x10telemetry_result\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.TelemetryResultR\x0ftelemetryResult\"\xd6\x01\n" +
	"\bPosition\x12*\n" +
	"\flatitude_deg\x18\x01 \x01(\x01B\a\x82\xb5\x18\x03NaNR\vlatitudeDeg\x12,\n" +
	"\rlongitude_deg\x18\x02 \x01(\x01B\a\x82\xb5\x18\x03NaNR\flongitudeDeg\x127\n" +
	"\x13absolute_altitude_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11absoluteAltitudeM\x127\n" +
	"\x13relative_altitude_m\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11relativeAltitudeM\"3\n" +
	"\aHeading\x12(\n" +
	"\vheading_deg\x18\x01 \x01(\x01B\a\x82\xb5\x18\x03NaNR\n" +
	"headingDeg\"\x8b\x01\n" +
	"\n" +
	"Quaternion\x12\x15\n" +
	"\x01w\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01w\x12\x15\n" +
	"\x01x\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01x\x12\x15\n" +
	"\x01y\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01y\x12\x15\n" +
	"\x01z\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01z\x12!\n" +
	"\ftimestamp_us\x18\x05 \x01(\x04R\vtimestampUs\"\x9b\x01\n" +
	"\n" +
	"EulerAngle\x12\"\n" +
	"\broll_deg\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\arollDeg\x12$\n" +
	"\tpitch_deg\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\bpitchDeg\x12 \n" +
	"\ayaw_deg\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x06yawDeg\x12!\n" +
	"\ftimestamp_us\x18\x04 \x01(\x04R\vtimestampUs\"\x8a\x01\n" +
	"\x13AngularVelocityBody\x12%\n" +
	"\n" +
	"roll_rad_s\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\brollRadS\x12'\n" +
	"\vpitch_rad_s\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\tpitchRadS\x12#\n" +
	"\tyaw_rad_s\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\ayawRadS\"q\n" +
	"\aGpsInfo\x12,\n" +
	"\x0enum_satellites\x18\x01 \x01(\x05B\x05\x82\xb5\x18\x010R\rnumSatellites\x128\n" +
	"\bfix_type\x18\x02 \x01(\x0e2\x1d.mavsdk.rpc.telemetry.FixTypeR\afixType\"\xb2\x04\n" +
	"\x06RawGps\x12!\n" +
	"\ftimestamp_us\x18\x01 \x01(\x04R\vtimestampUs\x12!\n" +
	"\flatitude_deg\x18\x02 \x01(\x01R\vlatitudeDeg\x12#\n" +
	"\rlongitude_deg\x18\x03 \x01(\x01R\flongitudeDeg\x12.\n" +
	"\x13absolute_altitude_m\x18\x04 \x01(\x02R\x11absoluteAltitudeM\x12\x12\n" +
	"\x04hdop\x18\x05 \x01(\x02R\x04hdop\x12\x12\n" +
	"\x04vdop\x18\x06 \x01(\x02R\x04vdop\x12 \n" +
	"\fvelocity_m_s\x18\a \x01(\x02R\n" +
	"velocityMS\x12\x17\n" +
	"\acog_deg\x18\b \x01(\x02R\x06cogDeg\x120\n" +
	"\x14altitude_ellipsoid_m\x18\t \x01(\x02R\x12altitudeEllipsoidM\x128\n" +
	"\x18horizontal_uncertainty_m\x18\n" +
	" \x01(\x02R\x16horizontalUncertaintyM\x124\n" +
	"\x16vertical_uncertainty_m\x18\v \x01(\x02R\x14verticalUncertaintyM\x127\n" +
	"\x18velocity_uncertainty_m_s\x18\f \x01(\x02R\x15velocityUncertaintyMS\x126\n" +
	"\x17heading_uncertainty_deg\x18\r \x01(\x02R\x15headingUncertaintyDeg\x12\x17\n" +
	"\ayaw_deg\x18\x0e \x01(\x02R\x06yawDeg\"\xa0\x02\n" +
	"\aBattery\x12\x15\n" +
	"\x02id\x18\x01 \x01(\rB\x05\x82\xb5\x18\x010R\x02id\x122\n" +
	"\x10temperature_degc\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x0ftemperatureDegc\x12$\n" +
	"\tvoltage_v\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\bvoltageV\x123\n" +
	"\x11current_battery_a\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x0fcurrentBatteryA\x129\n" +
	"\x14capacity_consumed_ah\x18\x05 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x12capacityConsumedAh\x124\n" +
	"\x11remaining_percent\x18\x06 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10remainingPercent\"\xd2\x03\n" +
	"\x06Health\x12H\n" +
	"\x1bis_gyrometer_calibration_ok\x18\x01 \x01(\bB\t\x82\xb5\x18\x05falseR\x18isGyrometerCalibrationOk\x12P\n" +
	"\x1fis_accelerometer_calibration_ok\x18\x02 \x01(\bB\t\x82\xb5\x18\x05falseR\x1cisAccelerometerCalibrationOk\x12N\n" +
	"\x1eis_magnetometer_calibration_ok\x18\x03 \x01(\bB\t\x82\xb5\x18\x05falseR\x1bisMagnetometerCalibrationOk\x12:\n" +
	"\x14is_local_position_ok\x18\x05 \x01(\bB\t\x82\xb5\x18\x05falseR\x11isLocalPositionOk\x12<\n" +
	"\x15is_global_position_ok\x18\x06 \x01(\bB\t\x82\xb5\x18\x05falseR\x12isGlobalPositionOk\x128\n" +
	"\x13is_home_position_ok\x18\a \x01(\bB\t\x82\xb5\x18\x05falseR\x10isHomePositionOk\x12(\n" +
	"\n" +
	"is_armable\x18\b \x01(\bB\t\x82\xb5\x18\x05falseR\tisArmable\"\xb2\x01\n" +
	"\bRcStatus\x127\n" +
	"\x12was_available_once\x18\x01 \x01(\bB\t\x82\xb5\x18\x05falseR\x10wasAvailableOnce\x12,\n" +
	"\fis_available\x18\x02 \x01(\bB\t\x82\xb5\x18\x05falseR\visAvailable\x12?\n" +
	"\x17signal_strength_percent\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x15signalStrengthPercent\"Z\n" +
	"\n" +
	"StatusText\x128\n" +
	"\x04type\x18\x01 \x01(\x0e2$.mavsdk.rpc.telemetry.StatusTextTypeR\x04type\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"P\n" +
	"\x15ActuatorControlTarget\x12\x1b\n" +
	"\x05group\x18\x01 \x01(\x05B\x05\x82\xb5\x18\x010R\x05group\x12\x1a\n" +
	"\bcontrols\x18\x02 \x03(\x02R\bcontrols\"Q\n" +
	"\x14ActuatorOutputStatus\x12\x1d\n" +
	"\x06active\x18\x01 \x01(\rB\x05\x82\xb5\x18\x010R\x06active\x12\x1a\n" +
	"\bactuator\x18\x02 \x03(\x02R\bactuator\"9\n" +
	"\n" +
	"Covariance\x12+\n" +
	"\x11covariance_matrix\x18\x01 \x03(\x02R\x10covarianceMatrix\"J\n" +
	"\fVelocityBody\x12\x12\n" +
	"\x05x_m_s\x18\x01 \x01(\x02R\x03xMS\x12\x12\n" +
	"\x05y_m_s\x18\x02 \x01(\x02R\x03yMS\x12\x12\n" +
	"\x05z_m_s\x18\x03 \x01(\x02R\x03zMS\"A\n" +
	"\fPositionBody\x12\x0f\n" +
	"\x03x_m\x18\x01 \x01(\x02R\x02xM\x12\x0f\n" +
	"\x03y_m\x18\x02 \x01(\x02R\x02yM\x12\x0f\n" +
	"\x03z_m\x18\x03 \x01(\x02R\x02zM\"\xe5\x05\n" +
	"\bOdometry\x12\x1b\n" +
	"\ttime_usec\x18\x01 \x01(\x04R\btimeUsec\x12B\n" +
	"\bframe_id\x18\x02 \x01(\x0e2'.mavsdk.rpc.telemetry.Odometry.MavFrameR\aframeId\x12M\n" +
	"\x0echild_frame_id\x18\x03 \x01(\x0e2'.mavsdk.rpc.telemetry.Odometry.MavFrameR\fchildFrameId\x12G\n" +
	"\rposition_body\x18\x04 \x01(\v2\".mavsdk.rpc.telemetry.PositionBodyR\fpositionBody\x12.\n" +
	"\x01q\x18\x05 \x01(\v2 .mavsdk.rpc.telemetry.QuaternionR\x01q\x12G\n" +
	"\rvelocity_body\x18\x06 \x01(\v2\".mavsdk.rpc.telemetry.VelocityBodyR\fvelocityBody\x12]\n" +
	"\x15angular_velocity_body\x18\a \x01(\v2).mavsdk.rpc.telemetry.AngularVelocityBodyR\x13angularVelocityBody\x12I\n" +
	"\x0fpose_covariance\x18\b \x01(\v2 .mavsdk.rpc.telemetry.CovarianceR\x0eposeCovariance\x12Q\n" +
	"\x13velocity_covariance\x18\t \x01(\v2 .mavsdk.rpc.telemetry.CovarianceR\x12velocityCovariance\"j\n" +
	"\bMavFrame\x12\x13\n" +
	"\x0fMAV_FRAME_UNDEF\x10\x00\x12\x16\n" +
	"\x12MAV_FRAME_BODY_NED\x10\b\x12\x18\n" +
	"\x14MAV_FRAME_VISION_NED\x10\x10\x12\x17\n" +
	"\x13MAV_FRAME_ESTIM_NED\x10\x12\"\xf9\x01\n" +
	"\x0eDistanceSensor\x125\n" +
	"\x12minimum_distance_m\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10minimumDistanceM\x125\n" +
	"\x12maximum_distance_m\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10maximumDistanceM\x125\n" +
	"\x12current_distance_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10currentDistanceM\x12B\n" +
	"\vorientation\x18\x04 \x01(\v2 .mavsdk.rpc.telemetry.EulerAngleR\vorientation\"\x9f\x02\n" +
	"\x0eScaledPressure\x12!\n" +
	"\ftimestamp_us\x18\x01 \x01(\x04R\vtimestampUs\x122\n" +
	"\x15absolute_pressure_hpa\x18\x02 \x01(\x02R\x13absolutePressureHpa\x12:\n" +
	"\x19differential_pressure_hpa\x18\x03 \x01(\x02R\x17differentialPressureHpa\x12'\n" +
	"\x0ftemperature_deg\x18\x04 \x01(\x02R\x0etemperatureDeg\x12Q\n" +
	"%differential_pressure_temperature_deg\x18\x05 \x01(\x02R\"differentialPressureTemperatureDeg\"o\n" +
	"\vPositionNed\x12 \n" +
	"\anorth_m\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x06northM\x12\x1e\n" +
	"\x06east_m\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x05eastM\x12\x1e\n" +
	"\x06down_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x05downM\"]\n" +
	"\vVelocityNed\x12\x1a\n" +
	"\tnorth_m_s\x18\x01 \x01(\x02R\anorthMS\x12\x18\n" +
	"\beast_m_s\x18\x02 \x01(\x02R\x06eastMS\x12\x18\n" +
	"\bdown_m_s\x18\x03 \x01(\x02R\x06downMS\"\x93\x01\n" +
	"\x13PositionVelocityNed\x12=\n" +
	"\bposition\x18\x01 \x01(\v2!.mavsdk.rpc.telemetry.PositionNedR\bposition\x12=\n" +
	"\bvelocity\x18\x02 \x01(\v2!.mavsdk.rpc.telemetry.VelocityNedR\bvelocity\"\xa0\x01\n" +
	"\vGroundTruth\x12*\n" +
	"\flatitude_deg\x18\x01 \x01(\x01B\a\x82\xb5\x18\x03NaNR\vlatitudeDeg\x12,\n" +
	"\rlongitude_deg\x18\x02 \x01(\x01B\a\x82\xb5\x18\x03NaNR\flongitudeDeg\x127\n" +
	"\x13absolute_altitude_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11absoluteAltitudeM\"\xb9\x02\n" +
	"\x10FixedwingMetrics\x12)\n" +
	"\fairspeed_m_s\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\n" +
	"airspeedMS\x128\n" +
	"\x13throttle_percentage\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x12throttlePercentage\x12,\n" +
	"\x0eclimb_rate_m_s\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\vclimbRateMS\x12/\n" +
	"\x0fgroundspeed_m_s\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\rgroundspeedMS\x12(\n" +
	"\vheading_deg\x18\x05 \x01(\x02B\a\x82\xb5\x18\x03NaNR\n" +
	"headingDeg\x127\n" +
	"\x13absolute_altitude_m\x18\x06 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11absoluteAltitudeM\"\x88\x01\n" +
	"\x0fAccelerationFrd\x12)\n" +
	"\fforward_m_s2\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\n" +
	"forwardMS2\x12%\n" +
	"\n" +
	"right_m_s2\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\brightMS2\x12#\n" +
	"\tdown_m_s2\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\adownMS2\"\x91\x01\n" +
	"\x12AngularVelocityFrd\x12+\n" +
	"\rforward_rad_s\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\vforwardRadS\x12'\n" +
	"\vright_rad_s\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\trightRadS\x12%\n" +
	"\n" +
	"down_rad_s\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\bdownRadS\"\x92\x01\n" +
	"\x10MagneticFieldFrd\x12,\n" +
	"\rforward_gauss\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\fforwardGauss\x12(\n" +
	"\vright_gauss\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\n" +
	"rightGauss\x12&\n" +
	"\n" +
	"down_gauss\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\tdownGauss\"\xe0\x02\n" +
	"\x03Imu\x12P\n" +
	"\x10acceleration_frd\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry.AccelerationFrdR\x0faccelerationFrd\x12Z\n" +
	"\x14angular_velocity_frd\x18\x02 \x01(\v2(.mavsdk.rpc.telemetry.AngularVelocityFrdR\x12angularVelocityFrd\x12T\n" +
	"\x12magnetic_field_frd\x18\x03 \x01(\v2&.mavsdk.rpc.telemetry.MagneticFieldFrdR\x10magneticFieldFrd\x122\n" +
	"\x10temperature_degc\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x0ftemperatureDegc\x12!\n" +
	"\ftimestamp_us\x18\x05 \x01(\x04R\vtimestampUs\"\x93\x01\n" +
	"\x0fGpsGlobalOrigin\x12*\n" +
	"\flatitude_deg\x18\x01 \x01(\x01B\a\x82\xb5\x18\x03NaNR\vlatitudeDeg\x12,\n" +
	"\rlongitude_deg\x18\x02 \x01(\x01B\a\x82\xb5\x18\x03NaNR\flongitudeDeg\x12&\n" +
	"\n" +
	"altitude_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\taltitudeM\"\xd0\x02\n" +
	"\bAltitude\x129\n" +
	"\x14altitude_monotonic_m\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x12altitudeMonotonicM\x12/\n" +
	"\x0faltitude_amsl_m\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\raltitudeAmslM\x121\n" +
	"\x10altitude_local_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x0ealtitudeLocalM\x127\n" +
	"\x13altitude_relative_m\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11altitudeRelativeM\x125\n" +
	"\x12altitude_terrain_m\x18\x05 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10altitudeTerrainM\x125\n" +
	"\x12bottom_clearance_m\x18\x06 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10bottomClearanceM\"\xb4\x02\n" +
	"\x0fTelemetryResult\x12D\n" +
	"\x06result\x18\x01 \x01(\x0e2,.mavsdk.rpc.telemetry.TelemetryResult.ResultR\x06result\x12\x1d\n" +
	"\n" +
	"result_str\x18\x02 \x01(\tR\tresultStr\"\xbb\x01\n" +
	"\x06Result\x12\x12\n" +
	"\x0eRESULT_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eRESULT_SUCCESS\x10\x01\x12\x14\n" +
	"\x10RESULT_NO_SYSTEM\x10\x02\x12\x1b\n" +
	"\x17RESULT_CONNECTION_ERROR\x10\x03\x12\x0f\n" +
	"\vRESULT_BUSY\x10\x04\x12\x19\n" +
	"\x15RESULT_COMMAND_DENIED\x10\x05\x12\x12\n" +
	"\x0eRESULT_TIMEOUT\x10\x06\x12\x16\n" +
	"\x12RESULT_UNSUPPORTED\x10\a*\xa4\x01\n" +
	"\aFixType\x12\x13\n" +
	"\x0fFIX_TYPE_NO_GPS\x10\x00\x12\x13\n" +
	"\x0fFIX_TYPE_NO_FIX\x10\x01\x12\x13\n" +
	"\x0fFIX_TYPE_FIX_2D\x10\x02\x12\x13\n" +
	"\x0fFIX_TYPE_FIX_3D\x10\x03\x12\x15\n" +
	"\x11FIX_TYPE_FIX_DGPS\x10\x04\x12\x16\n" +
	"\x12FIX_TYPE_RTK_FLOAT\x10\x05\x12\x16\n" +
	"\x12FIX_TYPE_RTK_FIXED\x10\x06*\x86\x03\n" +
	"\n" +
	"FlightMode\x12\x17\n" +
	"\x13FLIGHT_MODE_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11FLIGHT_MODE_READY\x10\x01\x12\x17\n" +
	"\x13FLIGHT_MODE_TAKEOFF\x10\x02\x12\x14\n" +
	"\x10FLIGHT_MODE_HOLD\x10\x03\x12\x17\n" +
	"\x13FLIGHT_MODE_MISSION\x10\x04\x12 \n" +
	"\x1cFLIGHT_MODE_RETURN_TO_LAUNCH\x10\x05\x12\x14\n" +
	"\x10FLIGHT_MODE_LAND\x10\x06\x12\x18\n" +
	"\x14FLIGHT_MODE_OFFBOARD\x10\a\x12\x19\n" +
	"\x15FLIGHT_MODE_FOLLOW_ME\x10\b\x12\x16\n" +
	"\x12FLIGHT_MODE_MANUAL\x10\t\x12\x16\n" +
	"\x12FLIGHT_MODE_ALTCTL\x10\n" +
	"\x12\x16\n" +
	"\x12FLIGHT_MODE_POSCTL\x10\v\x12\x14\n" +
	"\x10FLIGHT_MODE_ACRO\x10\f\x12\x1a\n" +
	"\x16FLIGHT_MODE_STABILIZED\x10\r\x12\x19\n" +
	"\x15FLIGHT_MODE_RATTITUDE\x10\x0e*\xf9\x01\n" +
	"\x0eStatusTextType\x12\x1a\n" +
	"\x16STATUS_TEXT_TYPE_DEBUG\x10\x00\x12\x19\n" +
	"\x15STATUS_TEXT_TYPE_INFO\x10\x01\x12\x1b\n" +
	"\x17STATUS_TEXT_TYPE_NOTICE\x10\x02\x12\x1c\n" +
	"\x18STATUS_TEXT_TYPE_WARNING\x10\x03\x12\x1a\n" +
	"\x16STATUS_TEXT_TYPE_ERROR\x10\x04\x12\x1d\n" +
	"\x19STATUS_TEXT_TYPE_CRITICAL\x10\x05\x12\x1a\n" +
	"\x16STATUS_TEXT_TYPE_ALERT\x10\x06\x12\x1e\n" +
	"\x1aSTATUS_TEXT_TYPE_EMERGENCY\x10\a*\x93\x01\n" +
	"\vLandedState\x12\x18\n" +
	"\x14LANDED_STATE_UNKNOWN\x10\x00\x12\x1a\n" +
	"\x16LANDED_STATE_ON_GROUND\x10\x01\x12\x17\n" +
	"\x13LANDED_STATE_IN_AIR\x10\x02\x12\x1b\n" +
	"\x17LANDED_STATE_TAKING_OFF\x10\x03\x12\x18\n" +
	"\x14LANDED_STATE_LANDING\x10\x04*\x8d\x01\n" +
	"\tVtolState\x12\x18\n" +
	"\x14VTOL_STATE_UNDEFINED\x10\x00\x12\x1f\n" +
	"\x1bVTOL_STATE_TRANSITION_TO_FW\x10\x01\x12\x1f\n" +
	"\x1bVTOL_STATE_TRANSITION_TO_MC\x10\x02\x12\x11\n" +
	"\rVTOL_STATE_MC\x10\x03\x12\x11\n" +
	"\rVTOL_STATE_FW\x10\x042\xc75\n" +
	"\x10TelemetryService\x12o\n" +
	"\x11SubscribePosition\x12..mavsdk.rpc.telemetry.SubscribePositionRequest\x1a&.mavsdk.rpc.telemetry.PositionResponse\"\x000\x01\x12c\n" +
	"\rSubscribeHome\x12*.mavsdk.rpc.telemetry.SubscribeHomeRequest\x1a\".mavsdk.rpc.telemetry.HomeResponse\"\x000\x01\x12f\n" +
	"\x0eSubscribeInAir\x12+.mavsdk.rpc.telemetry.SubscribeInAirRequest\x1a#.mavsdk.rpc.telemetry.InAirResponse\"\x000\x01\x12x\n" +
	"\x14SubscribeLandedState\x121.mavsdk.rpc.telemetry.SubscribeLandedStateRequest\x1a).mavsdk.rpc.telemetry.LandedStateResponse\"\x000\x01\x12f\n" +
	"\x0eSubscribeArmed\x12+.mavsdk.rpc.telemetry.SubscribeArmedRequest\x1a#.mavsdk.rpc.telemetry.ArmedResponse\"\x000\x01\x12r\n" +
	"\x12SubscribeVtolState\x12/.mavsdk.rpc.telemetry.SubscribeVtolStateRequest\x1a'.mavsdk.rpc.telemetry.VtolStateResponse\"\x000\x01\x12\x8d\x01\n" +
	"\x1bSubscribeAttitudeQuaternion\x128.mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest\x1a0.mavsdk.rpc.telemetry.AttitudeQuaternionResponse\"\x000\x01\x12~\n" +
	"\x16SubscribeAttitudeEuler\x123.mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest\x1a+.mavsdk.rpc.telemetry.AttitudeEulerResponse\"\x000\x01\x12\xa8\x01\n" +
	"$SubscribeAttitudeAngularVelocityBody\x12A.mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest\x1a9.mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse\"\x000\x01\x12x\n" +
	"\x14SubscribeVelocityNed\x121.mavsdk.rpc.telemetry.SubscribeVelocityNedRequest\x1a).mavsdk.rpc.telemetry.VelocityNedResponse\"\x000\x01\x12l\n" +
	"\x10SubscribeGpsInfo\x12-.mavsdk.rpc.telemetry.SubscribeGpsInfoRequest\x1a%.mavsdk.rpc.telemetry.GpsInfoResponse\"\x000\x01\x12i\n" +
	"\x0fSubscribeRawGps\x12,.mavsdk.rpc.telemetry.SubscribeRawGpsRequest\x1a$.mavsdk.rpc.telemetry.RawGpsResponse\"\x000\x01\x12l\n" +
	"\x10SubscribeBattery\x12-.mavsdk.rpc.telemetry.SubscribeBatteryRequest\x1a%.mavsdk.rpc.telemetry.BatteryResponse\"\x000\x01\x12u\n" +
	"\x13SubscribeFlightMode\x120.mavsdk.rpc.telemetry.SubscribeFlightModeRequest\x1a(.mavsdk.rpc.telemetry.FlightModeResponse\"\x000\x01\x12i\n" +
	"\x0fSubscribeHealth\x12,.mavsdk.rpc.telemetry.SubscribeHealthRequest\x1a$.mavsdk.rpc.telemetry.HealthResponse\"\x000\x01\x12o\n" +
	"\x11SubscribeRcStatus\x12..mavsdk.rpc.telemetry.SubscribeRcStatusRequest\x1a&.mavsdk.rpc.telemetry.RcStatusResponse\"\x000\x01\x12u\n" +
	"\x13SubscribeStatusText\x120.mavsdk.rpc.telemetry.SubscribeStatusTextRequest\x1a(.mavsdk.rpc.telemetry.StatusTextResponse\"\x000\x01\x12\x96\x01\n" +
	"\x1eSubscribeActuatorControlTarget\x12;.mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest\x1a3.mavsdk.rpc.telemetry.ActuatorControlTargetResponse\"\x000\x01\x12\x93\x01\n" +
	"\x1dSubscribeActuatorOutputStatus\x12:.mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest\x1a2.mavsdk.rpc.telemetry.ActuatorOutputStatusResponse\"\x000\x01\x12o\n" +
	"\x11SubscribeOdometry\x12..mavsdk.rpc.telemetry.SubscribeOdometryRequest\x1a&.mavsdk.rpc.telemetry.OdometryResponse\"\x000\x01\x12\x90\x01\n" +
	"\x1cSubscribePositionVelocityNed\x129.mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest\x1a1.mavsdk.rpc.telemetry.PositionVelocityNedResponse\"\x000\x01\x12x\n" +
	"\x14SubscribeGroundTruth\x121.mavsdk.rpc.telemetry.SubscribeGroundTruthRequest\x1a).mavsdk.rpc.telemetry.GroundTruthResponse\"\x000\x01\x12\x87\x01\n" +
	"\x19SubscribeFixedwingMetrics\x126.mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest\x1a..mavsdk.rpc.telemetry.FixedwingMetricsResponse\"\x000\x01\x12`\n" +
	"\fSubscribeImu\x12).mavsdk.rpc.telemetry.SubscribeImuRequest\x1a!.mavsdk.rpc.telemetry.ImuResponse\"\x000\x01\x12r\n" +
	"\x12SubscribeScaledImu\x12/.mavsdk.rpc.telemetry.SubscribeScaledImuRequest\x1a'.mavsdk.rpc.telemetry.ScaledImuResponse\"\x000\x01\x12i\n" +
	"\x0fSubscribeRawImu\x12,.mavsdk.rpc.telemetry.SubscribeRawImuRequest\x1a$.mavsdk.rpc.telemetry.RawImuResponse\"\x000\x01\x12x\n" +
	"\x14SubscribeHealthAllOk\x121.mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest\x1a).mavsdk.rpc.telemetry.HealthAllOkResponse\"\x000\x01\x12~\n" +
	"\x16SubscribeUnixEpochTime\x123.mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest\x1a+.mavsdk.rpc.telemetry.UnixEpochTimeResponse\"\x000\x01\x12\x81\x01\n" +
	"\x17SubscribeDistanceSensor\x124.mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest\x1a,.mavsdk.rpc.telemetry.DistanceSensorResponse\"\x000\x01\x12\x81\x01\n" +
	"\x17SubscribeScaledPressure\x124.mavsdk.rpc.telemetry.SubscribeScaledPressureRequest\x1a,.mavsdk.rpc.telemetry.ScaledPressureResponse\"\x000\x01\x12l\n" +
	"\x10SubscribeHeading\x12-.mavsdk.rpc.telemetry.SubscribeHeadingRequest\x1a%.mavsdk.rpc.telemetry.HeadingResponse\"\x000\x01\x12o\n" +
	"\x11SubscribeAltitude\x12..mavsdk.rpc.telemetry.SubscribeAltitudeRequest\x1a&.mavsdk.rpc.telemetry.AltitudeResponse\"\x000\x01\x12p\n" +
	"\x0fSetRatePosition\x12,.mavsdk.rpc.telemetry.SetRatePositionRequest\x1a-.mavsdk.rpc.telemetry.SetRatePositionResponse\"\x00\x12d\n" +
	"\vSetRateHome\x12(.mavsdk.rpc.telemetry.SetRateHomeRequest\x1a).mavsdk.rpc.telemetry.SetRateHomeResponse\"\x00\x12g\n" +
	"\fSetRateInAir\x12).mavsdk.rpc.telemetry.SetRateInAirRequest\x1a*.mavsdk.rpc.telemetry.SetRateInAirResponse\"\x00\x12y\n" +
	"\x12SetRateLandedState\x12/.mavsdk.rpc.telemetry.SetRateLandedStateRequest\x1a0.mavsdk.rpc.telemetry.SetRateLandedStateResponse\"\x00\x12s\n" +
	"\x10SetRateVtolState\x12-.mavsdk.rpc.telemetry.SetRateVtolStateRequest\x1a..mavsdk.rpc.telemetry.SetRateVtolStateResponse\"\x00\x12\x8e\x01\n" +
	"\x19SetRateAttitudeQuaternion\x126.mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest\x1a7.mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse\"\x00\x12\x7f\n" +
	"\x14SetRateAttitudeEuler\x121.mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest\x1a2.mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse\"\x00\x12y\n" +
	"\x12SetRateVelocityNed\x12/.mavsdk.rpc.telemetry.SetRateVelocityNedRequest\x1a0.mavsdk.rpc.telemetry.SetRateVelocityNedResponse\"\x00\x12m\n" +
	"\x0eSetRateGpsInfo\x12+.mavsdk.rpc.telemetry.SetRateGpsInfoRequest\x1a,.mavsdk.rpc.telemetry.SetRateGpsInfoResponse\"\x00\x12m\n" +
	"\x0eSetRateBattery\x12+.mavsdk.rpc.telemetry.SetRateBatteryRequest\x1a,.mavsdk.rpc.telemetry.SetRateBatteryResponse\"\x00\x12p\n" +
	"\x0fSetRateRcStatus\x12,.mavsdk.rpc.telemetry.SetRateRcStatusRequest\x1a-.mavsdk.rpc.telemetry.SetRateRcStatusResponse\"\x00\x12\x97\x01\n" +
	"\x1cSetRateActuatorControlTarget\x129.mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest\x1a:.mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse\"\x00\x12\x94\x01\n" +
	"\x1bSetRateActuatorOutputStatus\x128.mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest\x1a9.mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse\"\x00\x12p\n" +
	"\x0fSetRateOdometry\x12,.mavsdk.rpc.telemetry.SetRateOdometryRequest\x1a-.mavsdk.rpc.telemetry.SetRateOdometryResponse\"\x00\x12\x91\x01\n" +
	"\x1aSetRatePositionVelocityNed\x127.mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest\x1a8.mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse\"\x00\x12y\n" +
	"\x12SetRateGroundTruth\x12/.mavsdk.rpc.telemetry.SetRateGroundTruthRequest\x1a0.mavsdk.rpc.telemetry.SetRateGroundTruthResponse\"\x00\x12\x88\x01\n" +
	"\x17SetRateFixedwingMetrics\x124.mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest\x1a5.mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse\"\x00\x12a\n" +
	"\n" +
	"SetRateImu\x12'.mavsdk.rpc.telemetry.SetRateImuRequest\x1a(.mavsdk.rpc.telemetry.SetRateImuResponse\"\x00\x12s\n" +
	"\x10SetRateScaledImu\x12-.mavsdk.rpc.telemetry.SetRateScaledImuRequest\x1a..mavsdk.rpc.telemetry.SetRateScaledImuResponse\"\x00\x12j\n" +
	"\rSetRateRawImu\x12*.mavsdk.rpc.telemetry.SetRateRawImuRequest\x1a+.mavsdk.rpc.telemetry.SetRateRawImuResponse\"\x00\x12\x7f\n" +
	"\x14SetRateUnixEpochTime\x121.mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest\x1a2.mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse\"\x00\x12\x82\x01\n" +
	"\x15SetRateDistanceSensor\x122.mavsdk.rpc.telemetry.SetRateDistanceSensorRequest\x1a3.mavsdk.rpc.telemetry.SetRateDistanceSensorResponse\"\x00\x12p\n" +
	"\x0fSetRateAltitude\x12,.mavsdk.rpc.telemetry.SetRateAltitudeRequest\x1a-.mavsdk.rpc.telemetry.SetRateAltitudeResponse\"\x00\x12y\n" +
	"\x12GetGpsGlobalOrigin\x12/.mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest\x1a0.mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse\"\x00B\x1dB\x0eTelemetryProtoZ\v.;telemetryb\x06proto3"

var (
	file_telemetry_proto_rawDescOnce sync.Once
	file_telemetry_proto_rawDescData []byte
)

func file_telemetry_proto_rawDescGZIP() []byte {
	file_telemetry_proto_rawDescOnce.Do(func() {
		file_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_telemetry_proto_rawDesc), len(file_telemetry_proto_rawDesc)))
	})
	return file_telemetry_proto_rawDescData
}

var file_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 146)
var file_telemetry_proto_goTypes = []any{
	(FixType)(0),                                        // 0: mavsdk.rpc.telemetry.FixType
	(FlightMode)(0),                                     // 1: mavsdk.rpc.telemetry.FlightMode
	(StatusTextType)(0),                                 // 2: mavsdk.rpc.telemetry.StatusTextType
	(LandedState)(0),                                    // 3: mavsdk.rpc.telemetry.LandedState
	(VtolState)(0),                                      // 4: mavsdk.rpc.telemetry.VtolState
	(Odometry_MavFrame)(0),                              // 5: mavsdk.rpc.telemetry.Odometry.MavFrame
	(TelemetryResult_Result)(0),                         // 6: mavsdk.rpc.telemetry.TelemetryResult.Result
	(*SubscribePositionRequest)(nil),                    // 7: mavsdk.rpc.telemetry.SubscribePositionRequest
	(*PositionResponse)(nil),                            // 8: mavsdk.rpc.telemetry.PositionResponse
	(*SubscribeHomeRequest)(nil),                        // 9: mavsdk.rpc.telemetry.SubscribeHomeRequest
	(*HomeResponse)(nil),                                // 10: mavsdk.rpc.telemetry.HomeResponse
	(*SubscribeInAirRequest)(nil),                       // 11: mavsdk.rpc.telemetry.SubscribeInAirRequest
	(*InAirResponse)(nil),                               // 12: mavsdk.rpc.telemetry.InAirResponse
	(*SubscribeLandedStateRequest)(nil),                 // 13: mavsdk.rpc.telemetry.SubscribeLandedStateRequest
	(*LandedStateResponse)(nil),                         // 14: mavsdk.rpc.telemetry.LandedStateResponse
	(*SubscribeArmedRequest)(nil),                       // 15: mavsdk.rpc.telemetry.SubscribeArmedRequest
	(*ArmedResponse)(nil),                               // 16: mavsdk.rpc.telemetry.ArmedResponse
	(*SubscribeVtolStateRequest)(nil),                   // 17: mavsdk.rpc.telemetry.SubscribeVtolStateRequest
	(*VtolStateResponse)(nil),                           // 18: mavsdk.rpc.telemetry.VtolStateResponse
	(*SubscribeAttitudeQuaternionRequest)(nil),          // 19: mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest
	(*AttitudeQuaternionResponse)(nil),                  // 20: mavsdk.rpc.telemetry.AttitudeQuaternionResponse
	(*SubscribeAttitudeEulerRequest)(nil),               // 21: mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest
	(*AttitudeEulerResponse)(nil),                       // 22: mavsdk.rpc.telemetry.AttitudeEulerResponse
	(*SubscribeAttitudeAngularVelocityBodyRequest)(nil), // 23: mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest
	(*AttitudeAngularVelocityBodyResponse)(nil),         // 24: mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse
	(*SubscribeVelocityNedRequest)(nil),                 // 25: mavsdk.rpc.telemetry.SubscribeVelocityNedRequest
	(*VelocityNedResponse)(nil),                         // 26: mavsdk.rpc.telemetry.VelocityNedResponse
	(*SubscribeGpsInfoRequest)(nil),                     // 27: mavsdk.rpc.telemetry.SubscribeGpsInfoRequest
	(*GpsInfoResponse)(nil),                             // 28: mavsdk.rpc.telemetry.GpsInfoResponse
	(*SubscribeRawGpsRequest)(nil),                      // 29: mavsdk.rpc.telemetry.SubscribeRawGpsRequest
	(*RawGpsResponse)(nil),                              // 30: mavsdk.rpc.telemetry.RawGpsResponse
	(*SubscribeBatteryRequest)(nil),                     // 31: mavsdk.rpc.telemetry.SubscribeBatteryRequest
	(*BatteryResponse)(nil),                             // 32: mavsdk.rpc.telemetry.BatteryResponse
	(*SubscribeFlightModeRequest)(nil),                  // 33: mavsdk.rpc.telemetry.SubscribeFlightModeRequest
	(*FlightModeResponse)(nil),                          // 34: mavsdk.rpc.telemetry.FlightModeResponse
	(*SubscribeHealthRequest)(nil),                      // 35: mavsdk.rpc.telemetry.SubscribeHealthRequest
	(*HealthResponse)(nil),                              // 36: mavsdk.rpc.telemetry.HealthResponse
	(*SubscribeRcStatusRequest)(nil),                    // 37: mavsdk.rpc.telemetry.SubscribeRcStatusRequest
	(*RcStatusResponse)(nil),                            // 38: mavsdk.rpc.telemetry.RcStatusResponse
	(*SubscribeStatusTextRequest)(nil),                  // 39: mavsdk.rpc.telemetry.SubscribeStatusTextRequest
	(*StatusTextResponse)(nil),                          // 40: mavsdk.rpc.telemetry.StatusTextResponse
	(*SubscribeActuatorControlTargetRequest)(nil),       // 41: mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest
	(*ActuatorControlTargetResponse)(nil),               // 42: mavsdk.rpc.telemetry.ActuatorControlTargetResponse
	(*SubscribeActuatorOutputStatusRequest)(nil),        // 43: mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest
	(*ActuatorOutputStatusResponse)(nil),                // 44: mavsdk.rpc.telemetry.ActuatorOutputStatusResponse
	(*SubscribeOdometryRequest)(nil),                    // 45: mavsdk.rpc.telemetry.SubscribeOdometryRequest
	(*OdometryResponse)(nil),                            // 46: mavsdk.rpc.telemetry.OdometryResponse
	(*SubscribePositionVelocityNedRequest)(nil),         // 47: mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest
	(*PositionVelocityNedResponse)(nil),                 // 48: mavsdk.rpc.telemetry.PositionVelocityNedResponse
	(*SubscribeGroundTruthRequest)(nil),                 // 49: mavsdk.rpc.telemetry.SubscribeGroundTruthRequest
	(*GroundTruthResponse)(nil),                         // 50: mavsdk.rpc.telemetry.GroundTruthResponse
	(*SubscribeFixedwingMetricsRequest)(nil),            // 51: mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest
	(*FixedwingMetricsResponse)(nil),                    // 52: mavsdk.rpc.telemetry.FixedwingMetricsResponse
	(*SubscribeImuRequest)(nil),                         // 53: mavsdk.rpc.telemetry.SubscribeImuRequest
	(*ImuResponse)(nil),                                 // 54: mavsdk.rpc.telemetry.ImuResponse
	(*SubscribeScaledImuRequest)(nil),                   // 55: mavsdk.rpc.telemetry.SubscribeScaledImuRequest
	(*ScaledImuResponse)(nil),                           // 56: mavsdk.rpc.telemetry.ScaledImuResponse
	(*SubscribeRawImuRequest)(nil),                      // 57: mavsdk.rpc.telemetry.SubscribeRawImuRequest
	(*RawImuResponse)(nil),                              // 58: mavsdk.rpc.telemetry.RawImuResponse
	(*SubscribeHealthAllOkRequest)(nil),                 // 59: mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest
	(*HealthAllOkResponse)(nil),                         // 60: mavsdk.rpc.telemetry.HealthAllOkResponse
	(*SubscribeUnixEpochTimeRequest)(nil),               // 61: mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest
	(*UnixEpochTimeResponse)(nil),                       // 62: mavsdk.rpc.telemetry.UnixEpochTimeResponse
	(*SubscribeDistanceSensorRequest)(nil),              // 63: mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest
	(*DistanceSensorResponse)(nil),                      // 64: mavsdk.rpc.telemetry.DistanceSensorResponse
	(*SubscribeScaledPressureRequest)(nil),              // 65: mavsdk.rpc.telemetry.SubscribeScaledPressureRequest
	(*ScaledPressureResponse)(nil),                      // 66: mavsdk.rpc.telemetry.ScaledPressureResponse
	(*SubscribeHeadingRequest)(nil),                     // 67: mavsdk.rpc.telemetry.SubscribeHeadingRequest
	(*HeadingResponse)(nil),                             // 68: mavsdk.rpc.telemetry.HeadingResponse
	(*SubscribeAltitudeRequest)(nil),                    // 69: mavsdk.rpc.telemetry.SubscribeAltitudeRequest
	(*AltitudeResponse)(nil),                            // 70: mavsdk.rpc.telemetry.AltitudeResponse
	(*SetRatePositionRequest)(nil),                      // 71: mavsdk.rpc.telemetry.SetRatePositionRequest
	(*SetRatePositionResponse)(nil),                     // 72: mavsdk.rpc.telemetry.SetRatePositionResponse
	(*SetRateHomeRequest)(nil),                          // 73: mavsdk.rpc.telemetry.SetRateHomeRequest
	(*SetRateHomeResponse)(nil),                         // 74: mavsdk.rpc.telemetry.SetRateHomeResponse
	(*SetRateInAirRequest)(nil),                         // 75: mavsdk.rpc.telemetry.SetRateInAirRequest
	(*SetRateInAirResponse)(nil),                        // 76: mavsdk.rpc.telemetry.SetRateInAirResponse
	(*SetRateLandedStateRequest)(nil),                   // 77: mavsdk.rpc.telemetry.SetRateLandedStateRequest
	(*SetRateLandedStateResponse)(nil),                  // 78: mavsdk.rpc.telemetry.SetRateLandedStateResponse
	(*SetRateVtolStateRequest)(nil),                     // 79: mavsdk.rpc.telemetry.SetRateVtolStateRequest
	(*SetRateVtolStateResponse)(nil),                    // 80: mavsdk.rpc.telemetry.SetRateVtolStateResponse
	(*SetRateAttitudeEulerRequest)(nil),                 // 81: mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest
	(*SetRateAttitudeEulerResponse)(nil),                // 82: mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse
	(*SetRateAttitudeQuaternionRequest)(nil),            // 83: mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest
	(*SetRateAttitudeQuaternionResponse)(nil),           // 84: mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse
	(*SetRateAttitudeAngularVelocityBodyRequest)(nil),   // 85: mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest
	(*SetRateAttitudeAngularVelocityBodyResponse)(nil),  // 86: mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse
	(*SetRateVelocityNedRequest)(nil),                   // 87: mavsdk.rpc.telemetry.SetRateVelocityNedRequest
	(*SetRateVelocityNedResponse)(nil),                  // 88: mavsdk.rpc.telemetry.SetRateVelocityNedResponse
	(*SetRateGpsInfoRequest)(nil),                       // 89: mavsdk.rpc.telemetry.SetRateGpsInfoRequest
	(*SetRateGpsInfoResponse)(nil),                      // 90: mavsdk.rpc.telemetry.SetRateGpsInfoResponse
	(*SetRateRawGpsRequest)(nil),                        // 91: mavsdk.rpc.telemetry.SetRateRawGpsRequest
	(*SetRateBatteryRequest)(nil),                       // 92: mavsdk.rpc.telemetry.SetRateBatteryRequest
	(*SetRateBatteryResponse)(nil),                      // 93: mavsdk.rpc.telemetry.SetRateBatteryResponse
	(*SetRateRcStatusRequest)(nil),                      // 94: mavsdk.rpc.telemetry.SetRateRcStatusRequest
	(*SetRateRcStatusResponse)(nil),                     // 95: mavsdk.rpc.telemetry.SetRateRcStatusResponse
	(*SetRateActuatorControlTargetRequest)(nil),         // 96: mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest
	(*SetRateActuatorControlTargetResponse)(nil),        // 97: mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse
	(*SetRateActuatorOutputStatusRequest)(nil),          // 98: mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest
	(*SetRateActuatorOutputStatusResponse)(nil),         // 99: mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse
	(*SetRateOdometryRequest)(nil),                      // 100: mavsdk.rpc.telemetry.SetRateOdometryRequest
	(*SetRateOdometryResponse)(nil),                     // 101: mavsdk.rpc.telemetry.SetRateOdometryResponse
	(*SetRatePositionVelocityNedRequest)(nil),           // 102: mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest
	(*SetRatePositionVelocityNedResponse)(nil),          // 103: mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse
	(*SetRateGroundTruthRequest)(nil),                   // 104: mavsdk.rpc.telemetry.SetRateGroundTruthRequest
	(*SetRateGroundTruthResponse)(nil),                  // 105: mavsdk.rpc.telemetry.SetRateGroundTruthResponse
	(*SetRateFixedwingMetricsRequest)(nil),              // 106: mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest
	(*SetRateFixedwingMetricsResponse)(nil),             // 107: mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse
	(*SetRateImuRequest)(nil),                           // 108: mavsdk.rpc.telemetry.SetRateImuRequest
	(*SetRateImuResponse)(nil),                          // 109: mavsdk.rpc.telemetry.SetRateImuResponse
	(*SetRateScaledImuRequest)(nil),                     // 110: mavsdk.rpc.telemetry.SetRateScaledImuRequest
	(*SetRateScaledImuResponse)(nil),                    // 111: mavsdk.rpc.telemetry.SetRateScaledImuResponse
	(*SetRateRawImuRequest)(nil),                        // 112: mavsdk.rpc.telemetry.SetRateRawImuRequest
	(*SetRateRawImuResponse)(nil),                       // 113: mavsdk.rpc.telemetry.SetRateRawImuResponse
	(*SetRateUnixEpochTimeRequest)(nil),                 // 114: mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest
	(*SetRateUnixEpochTimeResponse)(nil),                // 115: mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse
	(*SetRateDistanceSensorRequest)(nil),                // 116: mavsdk.rpc.telemetry.SetRateDistanceSensorRequest
	(*SetRateDistanceSensorResponse)(nil),               // 117: mavsdk.rpc.telemetry.SetRateDistanceSensorResponse
	(*GetGpsGlobalOriginRequest)(nil),                   // 118: mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest
	(*GetGpsGlobalOriginResponse)(nil),                  // 119: mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse
	(*SetRateAltitudeRequest)(nil),                      // 120: mavsdk.rpc.telemetry.SetRateAltitudeRequest
	(*SetRateAltitudeResponse)(nil),                     // 121: mavsdk.rpc.telemetry.SetRateAltitudeResponse
	(*Position)(nil),                                    // 122: mavsdk.rpc.telemetry.Position
	(*Heading)(nil),                                     // 123: mavsdk.rpc.telemetry.Heading
	(*Quaternion)(nil),                                  // 124: mavsdk.rpc.telemetry.Quaternion
	(*EulerAngle)(nil),                                  // 125: mavsdk.rpc.telemetry.EulerAngle
	(*AngularVelocityBody)(nil),                         // 126: mavsdk.rpc.telemetry.AngularVelocityBody
	(*GpsInfo)(nil),                                     // 127: mavsdk.rpc.telemetry.GpsInfo
	(*RawGps)(nil),                                      // 128: mavsdk.rpc.telemetry.RawGps
	(*Battery)(nil),                                     // 129: mavsdk.rpc.telemetry.Battery
	(*Health)(nil),                                      // 130: mavsdk.rpc.telemetry.Health
	(*RcStatus)(nil),                                    // 131: mavsdk.rpc.telemetry.RcStatus
	(*StatusText)(nil),                                  // 132: mavsdk.rpc.telemetry.StatusText
	(*ActuatorControlTarget)(nil),                       // 133: mavsdk.rpc.telemetry.ActuatorControlTarget
	(*ActuatorOutputStatus)(nil),                        // 134: mavsdk.rpc.telemetry.ActuatorOutputStatus
	(*Covariance)(nil),                                  // 135: mavsdk.rpc.telemetry.Covariance
	(*VelocityBody)(nil),                                // 136: mavsdk.rpc.telemetry.VelocityBody
	(*PositionBody)(nil),                                // 137: mavsdk.rpc.telemetry.PositionBody
	(*Odometry)(nil),                                    // 138: mavsdk.rpc.telemetry.Odometry
	(*DistanceSensor)(nil),                              // 139: mavsdk.rpc.telemetry.DistanceSensor
	(*ScaledPressure)(nil),                              // 140: mavsdk.rpc.telemetry.ScaledPressure
	(*PositionNed)(nil),                                 // 141: mavsdk.rpc.telemetry.PositionNed
	(*VelocityNed)(nil),                                 // 142: mavsdk.rpc.telemetry.VelocityNed
	(*PositionVelocityNed)(nil),                         // 143: mavsdk.rpc.telemetry.PositionVelocityNed
	(*GroundTruth)(nil),                                 // 144: mavsdk.rpc.telemetry.GroundTruth
	(*FixedwingMetrics)(nil),                            // 145: mavsdk.rpc.telemetry.FixedwingMetrics
	(*AccelerationFrd)(nil),                             // 146: mavsdk.rpc.telemetry.AccelerationFrd
	(*AngularVelocityFrd)(nil),                          // 147: mavsdk.rpc.telemetry.AngularVelocityFrd
	(*MagneticFieldFrd)(nil),                            // 148: mavsdk.rpc.telemetry.MagneticFieldFrd
	(*Imu)(nil),                                         // 149: mavsdk.rpc.telemetry.Imu
	(*GpsGlobalOrigin)(nil),                             // 150: mavsdk.rpc.telemetry.GpsGlobalOrigin
	(*Altitude)(nil),                                    // 151: mavsdk.rpc.telemetry.Altitude
	(*TelemetryResult)(nil),                             // 152: mavsdk.rpc.telemetry.TelemetryResult
}
var file_telemetry_proto_depIdxs = []int32{
	122, // 0: mavsdk.rpc.telemetry.PositionResponse.position:type_name -> mavsdk.rpc.telemetry.Position
	122, // 1: mavsdk.rpc.telemetry.HomeResponse.home:type_name -> mavsdk.rpc.telemetry.Position
	3,   // 2: mavsdk.rpc.telemetry.LandedStateResponse.landed_state:type_name -> mavsdk.rpc.telemetry.LandedState
	4,   // 3: mavsdk.rpc.telemetry.VtolStateResponse.vtol_state:type_name -> mavsdk.rpc.telemetry.VtolState
	124, // 4: mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion:type_name -> mavsdk.rpc.telemetry.Quaternion
	125, // 5: mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler:type_name -> mavsdk.rpc.telemetry.EulerAngle
	126, // 6: mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body:type_name -> mavsdk.rpc.telemetry.AngularVelocityBody
	142, // 7: mavsdk.rpc.telemetry.VelocityNedResponse.velocity_ned:type_name -> mavsdk.rpc.telemetry.VelocityNed
	127, // 8: mavsdk.rpc.telemetry.GpsInfoResponse.gps_info:type_name -> mavsdk.rpc.telemetry.GpsInfo
	128, // 9: mavsdk.rpc.telemetry.RawGpsResponse.raw_gps:type_name -> mavsdk.rpc.telemetry.RawGps
	129, // 10: mavsdk.rpc.telemetry.BatteryResponse.battery:type_name -> mavsdk.rpc.telemetry.Battery
	1,   // 11: mavsdk.rpc.telemetry.FlightModeResponse.flight_mode:type_name -> mavsdk.rpc.telemetry.FlightMode
	130, // 12: mavsdk.rpc.telemetry.HealthResponse.health:type_name -> mavsdk.rpc.telemetry.Health
	131, // 13: mavsdk.rpc.telemetry.RcStatusResponse.rc_status:type_name -> mavsdk.rpc.telemetry.RcStatus
	132, // 14: mavsdk.rpc.telemetry.StatusTextResponse.status_text:type_name -> mavsdk.rpc.telemetry.StatusText
	133, // 15: mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target:type_name -> mavsdk.rpc.telemetry.ActuatorControlTarget
	134, // 16: mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status:type_name -> mavsdk.rpc.telemetry.ActuatorOutputStatus
	138, // 17: mavsdk.rpc.telemetry.OdometryResponse.odometry:type_name -> mavsdk.rpc.telemetry.Odometry
	143, // 18: mavsdk.rpc.telemetry.PositionVelocityNedResponse.position_velocity_ned:type_name -> mavsdk.rpc.telemetry.PositionVelocityNed
	144, // 19: mavsdk.rpc.telemetry.GroundTruthResponse.ground_truth:type_name -> mavsdk.rpc.telemetry.GroundTruth
	145, // 20: mavsdk.rpc.telemetry.FixedwingMetricsResponse.fixedwing_metrics:type_name -> mavsdk.rpc.telemetry.FixedwingMetrics
	149, // 21: mavsdk.rpc.telemetry.ImuResponse.imu:type_name -> mavsdk.rpc.telemetry.Imu
	149, // 22: mavsdk.rpc.telemetry.ScaledImuResponse.imu:type_name -> mavsdk.rpc.telemetry.Imu
	149, // 23: mavsdk.rpc.telemetry.RawImuResponse.imu:type_name -> mavsdk.rpc.telemetry.Imu
	139, // 24: mavsdk.rpc.telemetry.DistanceSensorResponse.distance_sensor:type_name -> mavsdk.rpc.telemetry.DistanceSensor
	140, // 25: mavsdk.rpc.telemetry.ScaledPressureResponse.scaled_pressure:type_name -> mavsdk.rpc.telemetry.ScaledPressure
	123, // 26: mavsdk.rpc.telemetry.HeadingResponse.heading_deg:type_name -> mavsdk.rpc.telemetry.Heading
	151, // 27: mavsdk.rpc.telemetry.AltitudeResponse.altitude:type_name -> mavsdk.rpc.telemetry.Altitude
	152, // 28: mavsdk.rpc.telemetry.SetRatePositionResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 29: mavsdk.rpc.telemetry.SetRateHomeResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 30: mavsdk.rpc.telemetry.SetRateInAirResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 31: mavsdk.rpc.telemetry.SetRateLandedStateResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 32: mavsdk.rpc.telemetry.SetRateVtolStateResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 33: mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 34: mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 35: mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 36: mavsdk.rpc.telemetry.SetRateVelocityNedResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 37: mavsdk.rpc.telemetry.SetRateGpsInfoResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 38: mavsdk.rpc.telemetry.SetRateBatteryResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 39: mavsdk.rpc.telemetry.SetRateRcStatusResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 40: mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 41: mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 42: mavsdk.rpc.telemetry.SetRateOdometryResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 43: mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 44: mavsdk.rpc.telemetry.SetRateGroundTruthResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 45: mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 46: mavsdk.rpc.telemetry.SetRateImuResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 47: mavsdk.rpc.telemetry.SetRateScaledImuResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 48: mavsdk.rpc.telemetry.SetRateRawImuResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 49: mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 50: mavsdk.rpc.telemetry.SetRateDistanceSensorResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	152, // 51: mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	150, // 52: mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse.gps_global_origin:type_name -> mavsdk.rpc.telemetry.GpsGlobalOrigin
	152, // 53: mavsdk.rpc.telemetry.SetRateAltitudeResponse.telemetry_result:type_name -> mavsdk.rpc.telemetry.TelemetryResult
	0,   // 54: mavsdk.rpc.telemetry.GpsInfo.fix_type:type_name -> mavsdk.rpc.telemetry.FixType
	2,   // 55: mavsdk.rpc.telemetry.StatusText.type:type_name -> mavsdk.rpc.telemetry.StatusTextType
	5,   // 56: mavsdk.rpc.telemetry.Odometry.frame_id:type_name -> mavsdk.rpc.telemetry.Odometry.MavFrame
	5,   // 57: mavsdk.rpc.telemetry.Odometry.child_frame_id:type_name -> mavsdk.rpc.telemetry.Odometry.MavFrame
	137, // 58: mavsdk.rpc.telemetry.Odometry.position_body:type_name -> mavsdk.rpc.telemetry.PositionBody
	124, // 59: mavsdk.rpc.telemetry.Odometry.q:type_name -> mavsdk.rpc.telemetry.Quaternion
	136, // 60: mavsdk.rpc.telemetry.Odometry.velocity_body:type_name -> mavsdk.rpc.telemetry.VelocityBody
	126, // 61: mavsdk.rpc.telemetry.Odometry.angular_velocity_body:type_name -> mavsdk.rpc.telemetry.AngularVelocityBody
	135, // 62: mavsdk.rpc.telemetry.Odometry.pose_covariance:type_name -> mavsdk.rpc.telemetry.Covariance
	135, // 63: mavsdk.rpc.telemetry.Odometry.velocity_covariance:type_name -> mavsdk.rpc.telemetry.Covariance
	125, // 64: mavsdk.rpc.telemetry.DistanceSensor.orientation:type_name -> mavsdk.rpc.telemetry.EulerAngle
	141, // 65: mavsdk.rpc.telemetry.PositionVelocityNed.position:type_name -> mavsdk.rpc.telemetry.PositionNed
	142, // 66: mavsdk.rpc.telemetry.PositionVelocityNed.velocity:type_name -> mavsdk.rpc.telemetry.VelocityNed
	146, // 67: mavsdk.rpc.telemetry.Imu.acceleration_frd:type_name -> mavsdk.rpc.telemetry.AccelerationFrd
	147, // 68: mavsdk.rpc.telemetry.Imu.angular_velocity_frd:type_name -> mavsdk.rpc.telemetry.AngularVelocityFrd
	148, // 69: mavsdk.rpc.telemetry.Imu.magnetic_field_frd:type_name -> mavsdk.rpc.telemetry.MagneticFieldFrd
	6,   // 70: mavsdk.rpc.telemetry.TelemetryResult.result:type_name -> mavsdk.rpc.telemetry.TelemetryResult.Result
	7,   // 71: mavsdk.rpc.telemetry.TelemetryService.SubscribePosition:input_type -> mavsdk.rpc.telemetry.SubscribePositionRequest
	9,   // 72: mavsdk.rpc.telemetry.TelemetryService.SubscribeHome:input_type -> mavsdk.rpc.telemetry.SubscribeHomeRequest
	11,  // 73: mavsdk.rpc.telemetry.TelemetryService.SubscribeInAir:input_type -> mavsdk.rpc.telemetry.SubscribeInAirRequest
	13,  // 74: mavsdk.rpc.telemetry.TelemetryService.SubscribeLandedState:input_type -> mavsdk.rpc.telemetry.SubscribeLandedStateRequest
	15,  // 75: mavsdk.rpc.telemetry.TelemetryService.SubscribeArmed:input_type -> mavsdk.rpc.telemetry.SubscribeArmedRequest
	17,  // 76: mavsdk.rpc.telemetry.TelemetryService.SubscribeVtolState:input_type -> mavsdk.rpc.telemetry.SubscribeVtolStateRequest
	19,  // 77: mavsdk.rpc.telemetry.TelemetryService.SubscribeAttitudeQuaternion:input_type -> mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest
	21,  // 78: mavsdk.rpc.telemetry.TelemetryService.SubscribeAttitudeEuler:input_type -> mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest
	23,  // 79: mavsdk.rpc.telemetry.TelemetryService.SubscribeAttitudeAngularVelocityBody:input_type -> mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest
	25,  // 80: mavsdk.rpc.telemetry.TelemetryService.SubscribeVelocityNed:input_type -> mavsdk.rpc.telemetry.SubscribeVelocityNedRequest
	27,  // 81: mavsdk.rpc.telemetry.TelemetryService.SubscribeGpsInfo:input_type -> mavsdk.rpc.telemetry.SubscribeGpsInfoRequest
	29,  // 82: mavsdk.rpc.telemetry.TelemetryService.SubscribeRawGps:input_type -> mavsdk.rpc.telemetry.SubscribeRawGpsRequest
	31,  // 83: mavsdk.rpc.telemetry.TelemetryService.SubscribeBattery:input_type -> mavsdk.rpc.telemetry.SubscribeBatteryRequest
	33,  // 84: mavsdk.rpc.telemetry.TelemetryService.SubscribeFlightMode:input_type -> mavsdk.rpc.telemetry.SubscribeFlightModeRequest
	35,  // 85: mavsdk.rpc.telemetry.TelemetryService.SubscribeHealth:input_type -> mavsdk.rpc.telemetry.SubscribeHealthRequest
	37,  // 86: mavsdk.rpc.telemetry.TelemetryService.SubscribeRcStatus:input_type -> mavsdk.rpc.telemetry.SubscribeRcStatusRequest
	39,  // 87: mavsdk.rpc.telemetry.TelemetryService.SubscribeStatusText:input_type -> mavsdk.rpc.telemetry.SubscribeStatusTextRequest
	41,  // 88: mavsdk.rpc.telemetry.TelemetryService.SubscribeActuatorControlTarget:input_type -> mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest
	43,  // 89: mavsdk.rpc.telemetry.TelemetryService.SubscribeActuatorOutputStatus:input_type -> mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest
	45,  // 90: mavsdk.rpc.telemetry.TelemetryService.SubscribeOdometry:input_type -> mavsdk.rpc.telemetry.SubscribeOdometryRequest
	47,  // 91: mavsdk.rpc.telemetry.TelemetryService.SubscribePositionVelocityNed:input_type -> mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest
	49,  // 92: mavsdk.rpc.telemetry.TelemetryService.SubscribeGroundTruth:input_type -> mavsdk.rpc.telemetry.SubscribeGroundTruthRequest
	51,  // 93: mavsdk.rpc.telemetry.TelemetryService.SubscribeFixedwingMetrics:input_type -> mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest
	53,  // 94: mavsdk.rpc.telemetry.TelemetryService.SubscribeImu:input_type -> mavsdk.rpc.telemetry.SubscribeImuRequest
	55,  // 95: mavsdk.rpc.telemetry.TelemetryService.SubscribeScaledImu:input_type -> mavsdk.rpc.telemetry.SubscribeScaledImuRequest
	57,  // 96: mavsdk.rpc.telemetry.TelemetryService.SubscribeRawImu:input_type -> mavsdk.rpc.telemetry.SubscribeRawImuRequest
	59,  // 97: mavsdk.rpc.telemetry.TelemetryService.SubscribeHealthAllOk:input_type -> mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest
	61,  // 98: mavsdk.rpc.telemetry.TelemetryService.SubscribeUnixEpochTime:input_type -> mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest
	63,  // 99: mavsdk.rpc.telemetry.TelemetryService.SubscribeDistanceSensor:input_type -> mavsdk.rpc.telemetry.SubscribeDistanceSensorRequest
	65,  // 100: mavsdk.rpc.telemetry.TelemetryService.SubscribeScaledPressure:input_type -> mavsdk.rpc.telemetry.SubscribeScaledPressureRequest
	67,  // 101: mavsdk.rpc.telemetry.TelemetryService.SubscribeHeading:input_type -> mavsdk.rpc.telemetry.SubscribeHeadingRequest
	69,  // 102: mavsdk.rpc.telemetry.TelemetryService.SubscribeAltitude:input_type -> mavsdk.rpc.telemetry.SubscribeAltitudeRequest
	71,  // 103: mavsdk.rpc.telemetry.TelemetryService.SetRatePosition:input_type -> mavsdk.rpc.telemetry.SetRatePositionRequest
	73,  // 104: mavsdk.rpc.telemetry.TelemetryService.SetRateHome:input_type -> mavsdk.rpc.telemetry.SetRateHomeRequest
	75,  // 105: mavsdk.rpc.telemetry.TelemetryService.SetRateInAir:input_type -> mavsdk.rpc.telemetry.SetRateInAirRequest
	77,  // 106: mavsdk.rpc.telemetry.TelemetryService.SetRateLandedState:input_type -> mavsdk.rpc.telemetry.SetRateLandedStateRequest
	79,  // 107: mavsdk.rpc.telemetry.TelemetryService.SetRateVtolState:input_type -> mavsdk.rpc.telemetry.SetRateVtolStateRequest
	83,  // 108: mavsdk.rpc.telemetry.TelemetryService.SetRateAttitudeQuaternion:input_type -> mavsdk.rpc.telemetry.SetRateAttitudeQuaternionRequest
	81,  // 109: mavsdk.rpc.telemetry.TelemetryService.SetRateAttitudeEuler:input_type -> mavsdk.rpc.telemetry.SetRateAttitudeEulerRequest
	87,  // 110: mavsdk.rpc.telemetry.TelemetryService.SetRateVelocityNed:input_type -> mavsdk.rpc.telemetry.SetRateVelocityNedRequest
	89,  // 111: mavsdk.rpc.telemetry.TelemetryService.SetRateGpsInfo:input_type -> mavsdk.rpc.telemetry.SetRateGpsInfoRequest
	92,  // 112: mavsdk.rpc.telemetry.TelemetryService.SetRateBattery:input_type -> mavsdk.rpc.telemetry.SetRateBatteryRequest
	94,  // 113: mavsdk.rpc.telemetry.TelemetryService.SetRateRcStatus:input_type -> mavsdk.rpc.telemetry.SetRateRcStatusRequest
	96,  // 114: mavsdk.rpc.telemetry.TelemetryService.SetRateActuatorControlTarget:input_type -> mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest
	98,  // 115: mavsdk.rpc.telemetry.TelemetryService.SetRateActuatorOutputStatus:input_type -> mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest
	100, // 116: mavsdk.rpc.telemetry.TelemetryService.SetRateOdometry:input_type -> mavsdk.rpc.telemetry.SetRateOdometryRequest
	102, // 117: mavsdk.rpc.telemetry.TelemetryService.SetRatePositionVelocityNed:input_type -> mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest
	104, // 118: mavsdk.rpc.telemetry.TelemetryService.SetRateGroundTruth:input_type -> mavsdk.rpc.telemetry.SetRateGroundTruthRequest
	106, // 119: mavsdk.rpc.telemetry.TelemetryService.SetRateFixedwingMetrics:input_type -> mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest
	108, // 120: mavsdk.rpc.telemetry.TelemetryService.SetRateImu:input_type -> mavsdk.rpc.telemetry.SetRateImuRequest
	110, // 121: mavsdk.rpc.telemetry.TelemetryService.SetRateScaledImu:input_type -> mavsdk.rpc.telemetry.SetRateScaledImuRequest
	112, // 122: mavsdk.rpc.telemetry.TelemetryService.SetRateRawImu:input_type -> mavsdk.rpc.telemetry.SetRateRawImuRequest
	114, // 123: mavsdk.rpc.telemetry.TelemetryService.SetRateUnixEpochTime:input_type -> mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest
	116, // 124: mavsdk.rpc.telemetry.TelemetryService.SetRateDistanceSensor:input_type -> mavsdk.rpc.telemetry.SetRateDistanceSensorRequest
	120, // 125: mavsdk.rpc.telemetry.TelemetryService.SetRateAltitude:input_type -> mavsdk.rpc.telemetry.SetRateAltitudeRequest
	118, // 126: mavsdk.rpc.telemetry.TelemetryService.GetGpsGlobalOrigin:input_type -> mavsdk.rpc.telemetry.GetGpsGlobalOriginRequest
	8,   // 127: mavsdk.rpc.telemetry.TelemetryService.SubscribePosition:output_type -> mavsdk.rpc.telemetry.PositionResponse
	10,  // 128: mavsdk.rpc.telemetry.TelemetryService.SubscribeHome:output_type -> mavsdk.rpc.telemetry.HomeResponse
	12,  // 129: mavsdk.rpc.telemetry.TelemetryService.SubscribeInAir:output_type -> mavsdk.rpc.telemetry.InAirResponse
	14,  // 130: mavsdk.rpc.telemetry.TelemetryService.SubscribeLandedState:output_type -> mavsdk.rpc.telemetry.LandedStateResponse
	16,  // 131: mavsdk.rpc.telemetry.TelemetryService.SubscribeArmed:output_type -> mavsdk.rpc.telemetry.ArmedResponse
	18,  // 132: mavsdk.rpc.telemetry.TelemetryService.SubscribeVtolState:output_type -> mavsdk.rpc.telemetry.VtolStateResponse
	20,  // 133: mavsdk.rpc.telemetry.TelemetryService.SubscribeAttitudeQuaternion:output_type -> mavsdk.rpc.telemetry.AttitudeQuaternionResponse
	22,  // 134: mavsdk.rpc.telemetry.TelemetryService.SubscribeAttitudeEuler:output_type -> mavsdk.rpc.telemetry.AttitudeEulerResponse
	24,  // 135: mavsdk.rpc.telemetry.TelemetryService.SubscribeAttitudeAngularVelocityBody:output_type -> mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse
	26,  // 136: mavsdk.rpc.telemetry.TelemetryService.SubscribeVelocityNed:output_type -> mavsdk.rpc.telemetry.VelocityNedResponse
	28,  // 137: mavsdk.rpc.telemetry.TelemetryService.SubscribeGpsInfo:output_type -> mavsdk.rpc.telemetry.GpsInfoResponse
	30,  // 138: mavsdk.rpc.telemetry.TelemetryService.SubscribeRawGps:output_type -> mavsdk.rpc.telemetry.RawGpsResponse
	32,  // 139: mavsdk.rpc.telemetry.TelemetryService.SubscribeBattery:output_type -> mavsdk.rpc.telemetry.BatteryResponse
	34,  // 140: mavsdk.rpc.telemetry.TelemetryService.SubscribeFlightMode:output_type -> mavsdk.rpc.telemetry.FlightModeResponse
	36,  // 141: mavsdk.rpc.telemetry.TelemetryService.SubscribeHealth:output_type -> mavsdk.rpc.telemetry.HealthResponse
	38,  // 142: mavsdk.rpc.telemetry.TelemetryService.SubscribeRcStatus:output_type -> mavsdk.rpc.telemetry.RcStatusResponse
	40,  // 143: mavsdk.rpc.telemetry.TelemetryService.SubscribeStatusText:output_type -> mavsdk.rpc.telemetry.StatusTextResponse
	42,  // 144: mavsdk.rpc.telemetry.TelemetryService.SubscribeActuatorControlTarget:output_type -> mavsdk.rpc.telemetry.ActuatorControlTargetResponse
	44,  // 145: mavsdk.rpc.telemetry.TelemetryService.SubscribeActuatorOutputStatus:output_type -> mavsdk.rpc.telemetry.ActuatorOutputStatusResponse
	46,  // 146: mavsdk.rpc.telemetry.TelemetryService.SubscribeOdometry:output_type -> mavsdk.rpc.telemetry.OdometryResponse
	48,  // 147: mavsdk.rpc.telemetry.TelemetryService.SubscribePositionVelocityNed:output_type -> mavsdk.rpc.telemetry.PositionVelocityNedResponse
	50,  // 148: mavsdk.rpc.telemetry.TelemetryService.SubscribeGroundTruth:output_type -> mavsdk.rpc.telemetry.GroundTruthResponse
	52,  // 149: mavsdk.rpc.telemetry.TelemetryService.SubscribeFixedwingMetrics:output_type -> mavsdk.rpc.telemetry.FixedwingMetricsResponse
	54,  // 150: mavsdk.rpc.telemetry.TelemetryService.SubscribeImu:output_type -> mavsdk.rpc.telemetry.ImuResponse
	56,  // 151: mavsdk.rpc.telemetry.TelemetryService.SubscribeScaledImu:output_type -> mavsdk.rpc.telemetry.ScaledImuResponse
	58,  // 152: mavsdk.rpc.telemetry.TelemetryService.SubscribeRawImu:output_type -> mavsdk.rpc.telemetry.RawImuResponse
	60,  // 153: mavsdk.rpc.telemetry.TelemetryService.SubscribeHealthAllOk:output_type -> mavsdk.rpc.telemetry.HealthAllOkResponse
	62,  // 154: mavsdk.rpc.telemetry.TelemetryService.SubscribeUnixEpochTime:output_type -> mavsdk.rpc.telemetry.UnixEpochTimeResponse
	64,  // 155: mavsdk.rpc.telemetry.TelemetryService.SubscribeDistanceSensor:output_type -> mavsdk.rpc.telemetry.DistanceSensorResponse
	66,  // 156: mavsdk.rpc.telemetry.TelemetryService.SubscribeScaledPressure:output_type -> mavsdk.rpc.telemetry.ScaledPressureResponse
	68,  // 157: mavsdk.rpc.telemetry.TelemetryService.SubscribeHeading:output_type -> mavsdk.rpc.telemetry.HeadingResponse
	70,  // 158: mavsdk.rpc.telemetry.TelemetryService.SubscribeAltitude:output_type -> mavsdk.rpc.telemetry.AltitudeResponse
	72,  // 159: mavsdk.rpc.telemetry.TelemetryService.SetRatePosition:output_type -> mavsdk.rpc.telemetry.SetRatePositionResponse
	74,  // 160: mavsdk.rpc.telemetry.TelemetryService.SetRateHome:output_type -> mavsdk.rpc.telemetry.SetRateHomeResponse
	76,  // 161: mavsdk.rpc.telemetry.TelemetryService.SetRateInAir:output_type -> mavsdk.rpc.telemetry.SetRateInAirResponse
	78,  // 162: mavsdk.rpc.telemetry.TelemetryService.SetRateLandedState:output_type -> mavsdk.rpc.telemetry.SetRateLandedStateResponse
	80,  // 163: mavsdk.rpc.telemetry.TelemetryService.SetRateVtolState:output_type -> mavsdk.rpc.telemetry.SetRateVtolStateResponse
	84,  // 164: mavsdk.rpc.telemetry.TelemetryService.SetRateAttitudeQuaternion:output_type -> mavsdk.rpc.telemetry.SetRateAttitudeQuaternionResponse
	82,  // 165: mavsdk.rpc.telemetry.TelemetryService.SetRateAttitudeEuler:output_type -> mavsdk.rpc.telemetry.SetRateAttitudeEulerResponse
	88,  // 166: mavsdk.rpc.telemetry.TelemetryService.SetRateVelocityNed:output_type -> mavsdk.rpc.telemetry.SetRateVelocityNedResponse
	90,  // 167: mavsdk.rpc.telemetry.TelemetryService.SetRateGpsInfo:output_type -> mavsdk.rpc.telemetry.SetRateGpsInfoResponse
	93,  // 168: mavsdk.rpc.telemetry.TelemetryService.SetRateBattery:output_type -> mavsdk.rpc.telemetry.SetRateBatteryResponse
	95,  // 169: mavsdk.rpc.telemetry.TelemetryService.SetRateRcStatus:output_type -> mavsdk.rpc.telemetry.SetRateRcStatusResponse
	97,  // 170: mavsdk.rpc.telemetry.TelemetryService.SetRateActuatorControlTarget:output_type -> mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse
	99,  // 171: mavsdk.rpc.telemetry.TelemetryService.SetRateActuatorOutputStatus:output_type -> mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse
	101, // 172: mavsdk.rpc.telemetry.TelemetryService.SetRateOdometry:output_type -> mavsdk.rpc.telemetry.SetRateOdometryResponse
	103, // 173: mavsdk.rpc.telemetry.TelemetryService.SetRatePositionVelocityNed:output_type -> mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse
	105, // 174: mavsdk.rpc.telemetry.TelemetryService.SetRateGroundTruth:output_type -> mavsdk.rpc.telemetry.SetRateGroundTruthResponse
	107, // 175: mavsdk.rpc.telemetry.TelemetryService.SetRateFixedwingMetrics:output_type -> mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse
	109, // 176: mavsdk.rpc.telemetry.TelemetryService.SetRateImu:output_type -> mavsdk.rpc.telemetry.SetRateImuResponse
	111, // 177: mavsdk.rpc.telemetry.TelemetryService.SetRateScaledImu:output_type -> mavsdk.rpc.telemetry.SetRateScaledImuResponse
	113, // 178: mavsdk.rpc.telemetry.TelemetryService.SetRateRawImu:output_type -> mavsdk.rpc.telemetry.SetRateRawImuResponse
	115, // 179: mavsdk.rpc.telemetry.TelemetryService.SetRateUnixEpochTime:output_type -> mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse
	117, // 180: mavsdk.rpc.telemetry.TelemetryService.SetRateDistanceSensor:output_type -> mavsdk.rpc.telemetry.SetRateDistanceSensorResponse
	121, // 181: mavsdk.rpc.telemetry.TelemetryService.SetRateAltitude:output_type -> mavsdk.rpc.telemetry.SetRateAltitudeResponse
	119, // 182: mavsdk.rpc.telemetry.TelemetryService.GetGpsGlobalOrigin:output_type -> mavsdk.rpc.telemetry.GetGpsGlobalOriginResponse
	127, // [127:183] is the sub-list for method output_type
	71,  // [71:127] is the sub-list for method input_type
	71,  // [71:71] is the sub-list for extension type_name
	71,  // [71:71] is the sub-list for extension extendee
	0,   // [0:71] is the sub-list for field type_name
}

func init() { file_telemetry_proto_init() }
func file_telemetry_proto_init() {
	if File_telemetry_proto != nil {
		return
	}
	file_mavsdk_options_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_telemetry_proto_rawDesc), len(file_telemetry_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   146,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telemetry_proto_goTypes,
		DependencyIndexes: file_telemetry_proto_depIdxs,
		EnumInfos:         file_telemetry_proto_enumTypes,
		MessageInfos:      file_telemetry_proto_msgTypes,
	}.Build()
	File_telemetry_proto = out.File
	file_telemetry_proto_goTypes = nil
	file_telemetry_proto_depIdxs = nil
}
