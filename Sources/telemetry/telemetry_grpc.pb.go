// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: telemetry.proto

package telemetry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TelemetryService_SubscribePosition_FullMethodName                    = "/mavsdk.rpc.telemetry.TelemetryService/SubscribePosition"
	TelemetryService_SubscribeHome_FullMethodName                        = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHome"
	TelemetryService_SubscribeInAir_FullMethodName                       = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeInAir"
	TelemetryService_SubscribeLandedState_FullMethodName                 = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeLandedState"
	TelemetryService_SubscribeArmed_FullMethodName                       = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeArmed"
	TelemetryService_SubscribeVtolState_FullMethodName                   = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeVtolState"
	TelemetryService_SubscribeAttitudeQuaternion_FullMethodName          = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeQuaternion"
	TelemetryService_SubscribeAttitudeEuler_FullMethodName               = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeEuler"
	TelemetryService_SubscribeAttitudeAngularVelocityBody_FullMethodName = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAttitudeAngularVelocityBody"
	TelemetryService_SubscribeVelocityNed_FullMethodName                 = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeVelocityNed"
	TelemetryService_SubscribeGpsInfo_FullMethodName                     = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGpsInfo"
	TelemetryService_SubscribeRawGps_FullMethodName                      = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawGps"
	TelemetryService_SubscribeBattery_FullMethodName                     = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeBattery"
	TelemetryService_SubscribeFlightMode_FullMethodName                  = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFlightMode"
	TelemetryService_SubscribeHealth_FullMethodName                      = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealth"
	TelemetryService_SubscribeRcStatus_FullMethodName                    = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRcStatus"
	TelemetryService_SubscribeStatusText_FullMethodName                  = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeStatusText"
	TelemetryService_SubscribeActuatorControlTarget_FullMethodName       = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorControlTarget"
	TelemetryService_SubscribeActuatorOutputStatus_FullMethodName        = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeActuatorOutputStatus"
	TelemetryService_SubscribeOdometry_FullMethodName                    = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeOdometry"
	TelemetryService_SubscribePositionVelocityNed_FullMethodName         = "/mavsdk.rpc.telemetry.TelemetryService/SubscribePositionVelocityNed"
	TelemetryService_SubscribeGroundTruth_FullMethodName                 = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeGroundTruth"
	TelemetryService_SubscribeFixedwingMetrics_FullMethodName            = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeFixedwingMetrics"
	TelemetryService_SubscribeImu_FullMethodName                         = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeImu"
	TelemetryService_SubscribeScaledImu_FullMethodName                   = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledImu"
	TelemetryService_SubscribeRawImu_FullMethodName                      = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeRawImu"
	TelemetryService_SubscribeHealthAllOk_FullMethodName                 = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHealthAllOk"
	TelemetryService_SubscribeUnixEpochTime_FullMethodName               = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeUnixEpochTime"
	TelemetryService_SubscribeDistanceSensor_FullMethodName              = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeDistanceSensor"
	TelemetryService_SubscribeScaledPressure_FullMethodName              = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeScaledPressure"
	TelemetryService_SubscribeHeading_FullMethodName                     = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeHeading"
	TelemetryService_SubscribeAltitude_FullMethodName                    = "/mavsdk.rpc.telemetry.TelemetryService/SubscribeAltitude"
	TelemetryService_SetRatePosition_FullMethodName                      = "/mavsdk.rpc.telemetry.TelemetryService/SetRatePosition"
	TelemetryService_SetRateHome_FullMethodName                          = "/mavsdk.rpc.telemetry.TelemetryService/SetRateHome"
	TelemetryService_SetRateInAir_FullMethodName                         = "/mavsdk.rpc.telemetry.TelemetryService/SetRateInAir"
	TelemetryService_SetRateLandedState_FullMethodName                   = "/mavsdk.rpc.telemetry.TelemetryService/SetRateLandedState"
	TelemetryService_SetRateVtolState_FullMethodName                     = "/mavsdk.rpc.telemetry.TelemetryService/SetRateVtolState"
	TelemetryService_SetRateAttitudeQuaternion_FullMethodName            = "/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitudeQuaternion"
	TelemetryService_SetRateAttitudeEuler_FullMethodName                 = "/mavsdk.rpc.telemetry.TelemetryService/SetRateAttitudeEuler"
	TelemetryService_SetRateVelocityNed_FullMethodName                   = "/mavsdk.rpc.telemetry.TelemetryService/SetRateVelocityNed"
	TelemetryService_SetRateGpsInfo_FullMethodName                       = "/mavsdk.rpc.telemetry.TelemetryService/SetRateGpsInfo"
	TelemetryService_SetRateBattery_FullMethodName                       = "/mavsdk.rpc.telemetry.TelemetryService/SetRateBattery"
	TelemetryService_SetRateRcStatus_FullMethodName                      = "/mavsdk.rpc.telemetry.TelemetryService/SetRateRcStatus"
	TelemetryService_SetRateActuatorControlTarget_FullMethodName         = "/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorControlTarget"
	TelemetryService_SetRateActuatorOutputStatus_FullMethodName          = "/mavsdk.rpc.telemetry.TelemetryService/SetRateActuatorOutputStatus"
	TelemetryService_SetRateOdometry_FullMethodName                      = "/mavsdk.rpc.telemetry.TelemetryService/SetRateOdometry"
	TelemetryService_SetRatePositionVelocityNed_FullMethodName           = "/mavsdk.rpc.telemetry.TelemetryService/SetRatePositionVelocityNed"
	TelemetryService_SetRateGroundTruth_FullMethodName                   = "/mavsdk.rpc.telemetry.TelemetryService/SetRateGroundTruth"
	TelemetryService_SetRateFixedwingMetrics_FullMethodName              = "/mavsdk.rpc.telemetry.TelemetryService/SetRateFixedwingMetrics"
	TelemetryService_SetRateImu_FullMethodName                           = "/mavsdk.rpc.telemetry.TelemetryService/SetRateImu"
	TelemetryService_SetRateScaledImu_FullMethodName                     = "/mavsdk.rpc.telemetry.TelemetryService/SetRateScaledImu"
	TelemetryService_SetRateRawImu_FullMethodName                        = "/mavsdk.rpc.telemetry.TelemetryService/SetRateRawImu"
	TelemetryService_SetRateUnixEpochTime_FullMethodName                 = "/mavsdk.rpc.telemetry.TelemetryService/SetRateUnixEpochTime"
	TelemetryService_SetRateDistanceSensor_FullMethodName                = "/mavsdk.rpc.telemetry.TelemetryService/SetRateDistanceSensor"
	TelemetryService_SetRateAltitude_FullMethodName                      = "/mavsdk.rpc.telemetry.TelemetryService/SetRateAltitude"
	TelemetryService_GetGpsGlobalOrigin_FullMethodName                   = "/mavsdk.rpc.telemetry.TelemetryService/GetGpsGlobalOrigin"
)

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Allow users to get vehicle telemetry and state information
// (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
type TelemetryServiceClient interface {
	// Subscribe to 'position' updates.
	SubscribePosition(ctx context.Context, in *SubscribePositionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionResponse], error)
	// Subscribe to 'home position' updates.
	SubscribeHome(ctx context.Context, in *SubscribeHomeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HomeResponse], error)
	// Subscribe to in-air updates.
	SubscribeInAir(ctx context.Context, in *SubscribeInAirRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InAirResponse], error)
	// Subscribe to landed state updates
	SubscribeLandedState(ctx context.Context, in *SubscribeLandedStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LandedStateResponse], error)
	// Subscribe to armed updates.
	SubscribeArmed(ctx context.Context, in *SubscribeArmedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArmedResponse], error)
	// subscribe to vtol state Updates
	SubscribeVtolState(ctx context.Context, in *SubscribeVtolStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VtolStateResponse], error)
	// Subscribe to 'attitude' updates (quaternion).
	SubscribeAttitudeQuaternion(ctx context.Context, in *SubscribeAttitudeQuaternionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttitudeQuaternionResponse], error)
	// Subscribe to 'attitude' updates (Euler).
	SubscribeAttitudeEuler(ctx context.Context, in *SubscribeAttitudeEulerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttitudeEulerResponse], error)
	// Subscribe to 'attitude' updates (angular velocity)
	SubscribeAttitudeAngularVelocityBody(ctx context.Context, in *SubscribeAttitudeAngularVelocityBodyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttitudeAngularVelocityBodyResponse], error)
	// Subscribe to 'ground speed' updates (NED).
	SubscribeVelocityNed(ctx context.Context, in *SubscribeVelocityNedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VelocityNedResponse], error)
	// Subscribe to 'GPS info' updates.
	SubscribeGpsInfo(ctx context.Context, in *SubscribeGpsInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GpsInfoResponse], error)
	// Subscribe to 'Raw GPS' updates.
	SubscribeRawGps(ctx context.Context, in *SubscribeRawGpsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RawGpsResponse], error)
	// Subscribe to 'battery' updates.
	SubscribeBattery(ctx context.Context, in *SubscribeBatteryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BatteryResponse], error)
	// Subscribe to 'flight mode' updates.
	SubscribeFlightMode(ctx context.Context, in *SubscribeFlightModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FlightModeResponse], error)
	// Subscribe to 'health' updates.
	SubscribeHealth(ctx context.Context, in *SubscribeHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthResponse], error)
	// Subscribe to 'RC status' updates.
	SubscribeRcStatus(ctx context.Context, in *SubscribeRcStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RcStatusResponse], error)
	// Subscribe to 'status text' updates.
	SubscribeStatusText(ctx context.Context, in *SubscribeStatusTextRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusTextResponse], error)
	// Subscribe to 'actuator control target' updates.
	SubscribeActuatorControlTarget(ctx context.Context, in *SubscribeActuatorControlTargetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActuatorControlTargetResponse], error)
	// Subscribe to 'actuator output status' updates.
	SubscribeActuatorOutputStatus(ctx context.Context, in *SubscribeActuatorOutputStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActuatorOutputStatusResponse], error)
	// Subscribe to 'odometry' updates.
	SubscribeOdometry(ctx context.Context, in *SubscribeOdometryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OdometryResponse], error)
	// Subscribe to 'position velocity' updates.
	SubscribePositionVelocityNed(ctx context.Context, in *SubscribePositionVelocityNedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionVelocityNedResponse], error)
	// Subscribe to 'ground truth' updates.
	SubscribeGroundTruth(ctx context.Context, in *SubscribeGroundTruthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GroundTruthResponse], error)
	// Subscribe to 'fixedwing metrics' updates.
	SubscribeFixedwingMetrics(ctx context.Context, in *SubscribeFixedwingMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FixedwingMetricsResponse], error)
	// Subscribe to 'IMU' updates (in SI units in NED body frame).
	SubscribeImu(ctx context.Context, in *SubscribeImuRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImuResponse], error)
	// Subscribe to 'Scaled IMU' updates.
	SubscribeScaledImu(ctx context.Context, in *SubscribeScaledImuRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScaledImuResponse], error)
	// Subscribe to 'Raw IMU' updates.
	SubscribeRawImu(ctx context.Context, in *SubscribeRawImuRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RawImuResponse], error)
	// Subscribe to 'HealthAllOk' updates.
	SubscribeHealthAllOk(ctx context.Context, in *SubscribeHealthAllOkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthAllOkResponse], error)
	// Subscribe to 'unix epoch time' updates.
	SubscribeUnixEpochTime(ctx context.Context, in *SubscribeUnixEpochTimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnixEpochTimeResponse], error)
	// Subscribe to 'Distance Sensor' updates.
	SubscribeDistanceSensor(ctx context.Context, in *SubscribeDistanceSensorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DistanceSensorResponse], error)
	// Subscribe to 'Scaled Pressure' updates.
	SubscribeScaledPressure(ctx context.Context, in *SubscribeScaledPressureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScaledPressureResponse], error)
	// Subscribe to 'Heading' updates.
	SubscribeHeading(ctx context.Context, in *SubscribeHeadingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HeadingResponse], error)
	// Subscribe to 'Altitude' updates.
	SubscribeAltitude(ctx context.Context, in *SubscribeAltitudeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AltitudeResponse], error)
	// Set rate to 'position' updates.
	SetRatePosition(ctx context.Context, in *SetRatePositionRequest, opts ...grpc.CallOption) (*SetRatePositionResponse, error)
	// Set rate to 'home position' updates.
	SetRateHome(ctx context.Context, in *SetRateHomeRequest, opts ...grpc.CallOption) (*SetRateHomeResponse, error)
	// Set rate to in-air updates.
	SetRateInAir(ctx context.Context, in *SetRateInAirRequest, opts ...grpc.CallOption) (*SetRateInAirResponse, error)
	// Set rate to landed state updates
	SetRateLandedState(ctx context.Context, in *SetRateLandedStateRequest, opts ...grpc.CallOption) (*SetRateLandedStateResponse, error)
	// Set rate to VTOL state updates
	SetRateVtolState(ctx context.Context, in *SetRateVtolStateRequest, opts ...grpc.CallOption) (*SetRateVtolStateResponse, error)
	// Set rate to 'attitude euler angle' updates.
	SetRateAttitudeQuaternion(ctx context.Context, in *SetRateAttitudeQuaternionRequest, opts ...grpc.CallOption) (*SetRateAttitudeQuaternionResponse, error)
	// Set rate to 'attitude quaternion' updates.
	SetRateAttitudeEuler(ctx context.Context, in *SetRateAttitudeEulerRequest, opts ...grpc.CallOption) (*SetRateAttitudeEulerResponse, error)
	// Set rate of camera attitude updates.
	// Set rate to 'ground speed' updates (NED).
	SetRateVelocityNed(ctx context.Context, in *SetRateVelocityNedRequest, opts ...grpc.CallOption) (*SetRateVelocityNedResponse, error)
	// Set rate to 'GPS info' updates.
	SetRateGpsInfo(ctx context.Context, in *SetRateGpsInfoRequest, opts ...grpc.CallOption) (*SetRateGpsInfoResponse, error)
	// Set rate to 'battery' updates.
	SetRateBattery(ctx context.Context, in *SetRateBatteryRequest, opts ...grpc.CallOption) (*SetRateBatteryResponse, error)
	// Set rate to 'RC status' updates.
	SetRateRcStatus(ctx context.Context, in *SetRateRcStatusRequest, opts ...grpc.CallOption) (*SetRateRcStatusResponse, error)
	// Set rate to 'actuator control target' updates.
	SetRateActuatorControlTarget(ctx context.Context, in *SetRateActuatorControlTargetRequest, opts ...grpc.CallOption) (*SetRateActuatorControlTargetResponse, error)
	// Set rate to 'actuator output status' updates.
	SetRateActuatorOutputStatus(ctx context.Context, in *SetRateActuatorOutputStatusRequest, opts ...grpc.CallOption) (*SetRateActuatorOutputStatusResponse, error)
	// Set rate to 'odometry' updates.
	SetRateOdometry(ctx context.Context, in *SetRateOdometryRequest, opts ...grpc.CallOption) (*SetRateOdometryResponse, error)
	// Set rate to 'position velocity' updates.
	SetRatePositionVelocityNed(ctx context.Context, in *SetRatePositionVelocityNedRequest, opts ...grpc.CallOption) (*SetRatePositionVelocityNedResponse, error)
	// Set rate to 'ground truth' updates.
	SetRateGroundTruth(ctx context.Context, in *SetRateGroundTruthRequest, opts ...grpc.CallOption) (*SetRateGroundTruthResponse, error)
	// Set rate to 'fixedwing metrics' updates.
	SetRateFixedwingMetrics(ctx context.Context, in *SetRateFixedwingMetricsRequest, opts ...grpc.CallOption) (*SetRateFixedwingMetricsResponse, error)
	// Set rate to 'IMU' updates.
	SetRateImu(ctx context.Context, in *SetRateImuRequest, opts ...grpc.CallOption) (*SetRateImuResponse, error)
	// Set rate to 'Scaled IMU' updates.
	SetRateScaledImu(ctx context.Context, in *SetRateScaledImuRequest, opts ...grpc.CallOption) (*SetRateScaledImuResponse, error)
	// Set rate to 'Raw IMU' updates.
	SetRateRawImu(ctx context.Context, in *SetRateRawImuRequest, opts ...grpc.CallOption) (*SetRateRawImuResponse, error)
	// Set rate to 'unix epoch time' updates.
	SetRateUnixEpochTime(ctx context.Context, in *SetRateUnixEpochTimeRequest, opts ...grpc.CallOption) (*SetRateUnixEpochTimeResponse, error)
	// Set rate to 'Distance Sensor' updates.
	SetRateDistanceSensor(ctx context.Context, in *SetRateDistanceSensorRequest, opts ...grpc.CallOption) (*SetRateDistanceSensorResponse, error)
	// Set rate to 'Altitude' updates.
	SetRateAltitude(ctx context.Context, in *SetRateAltitudeRequest, opts ...grpc.CallOption) (*SetRateAltitudeResponse, error)
	// Get the GPS location of where the estimator has been initialized.
	GetGpsGlobalOrigin(ctx context.Context, in *GetGpsGlobalOriginRequest, opts ...grpc.CallOption) (*GetGpsGlobalOriginResponse, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) SubscribePosition(ctx context.Context, in *SubscribePositionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[0], TelemetryService_SubscribePosition_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribePositionRequest, PositionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribePositionClient = grpc.ServerStreamingClient[PositionResponse]

func (c *telemetryServiceClient) SubscribeHome(ctx context.Context, in *SubscribeHomeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HomeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[1], TelemetryService_SubscribeHome_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeHomeRequest, HomeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeHomeClient = grpc.ServerStreamingClient[HomeResponse]

func (c *telemetryServiceClient) SubscribeInAir(ctx context.Context, in *SubscribeInAirRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InAirResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[2], TelemetryService_SubscribeInAir_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeInAirRequest, InAirResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeInAirClient = grpc.ServerStreamingClient[InAirResponse]

func (c *telemetryServiceClient) SubscribeLandedState(ctx context.Context, in *SubscribeLandedStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LandedStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[3], TelemetryService_SubscribeLandedState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeLandedStateRequest, LandedStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeLandedStateClient = grpc.ServerStreamingClient[LandedStateResponse]

func (c *telemetryServiceClient) SubscribeArmed(ctx context.Context, in *SubscribeArmedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArmedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[4], TelemetryService_SubscribeArmed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeArmedRequest, ArmedResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeArmedClient = grpc.ServerStreamingClient[ArmedResponse]

func (c *telemetryServiceClient) SubscribeVtolState(ctx context.Context, in *SubscribeVtolStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VtolStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[5], TelemetryService_SubscribeVtolState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeVtolStateRequest, VtolStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeVtolStateClient = grpc.ServerStreamingClient[VtolStateResponse]

func (c *telemetryServiceClient) SubscribeAttitudeQuaternion(ctx context.Context, in *SubscribeAttitudeQuaternionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttitudeQuaternionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[6], TelemetryService_SubscribeAttitudeQuaternion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeAttitudeQuaternionRequest, AttitudeQuaternionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeAttitudeQuaternionClient = grpc.ServerStreamingClient[AttitudeQuaternionResponse]

func (c *telemetryServiceClient) SubscribeAttitudeEuler(ctx context.Context, in *SubscribeAttitudeEulerRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttitudeEulerResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[7], TelemetryService_SubscribeAttitudeEuler_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeAttitudeEulerRequest, AttitudeEulerResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeAttitudeEulerClient = grpc.ServerStreamingClient[AttitudeEulerResponse]

func (c *telemetryServiceClient) SubscribeAttitudeAngularVelocityBody(ctx context.Context, in *SubscribeAttitudeAngularVelocityBodyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AttitudeAngularVelocityBodyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[8], TelemetryService_SubscribeAttitudeAngularVelocityBody_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeAttitudeAngularVelocityBodyRequest, AttitudeAngularVelocityBodyResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeAttitudeAngularVelocityBodyClient = grpc.ServerStreamingClient[AttitudeAngularVelocityBodyResponse]

func (c *telemetryServiceClient) SubscribeVelocityNed(ctx context.Context, in *SubscribeVelocityNedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VelocityNedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[9], TelemetryService_SubscribeVelocityNed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeVelocityNedRequest, VelocityNedResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeVelocityNedClient = grpc.ServerStreamingClient[VelocityNedResponse]

func (c *telemetryServiceClient) SubscribeGpsInfo(ctx context.Context, in *SubscribeGpsInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GpsInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[10], TelemetryService_SubscribeGpsInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeGpsInfoRequest, GpsInfoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeGpsInfoClient = grpc.ServerStreamingClient[GpsInfoResponse]

func (c *telemetryServiceClient) SubscribeRawGps(ctx context.Context, in *SubscribeRawGpsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RawGpsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[11], TelemetryService_SubscribeRawGps_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRawGpsRequest, RawGpsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeRawGpsClient = grpc.ServerStreamingClient[RawGpsResponse]

func (c *telemetryServiceClient) SubscribeBattery(ctx context.Context, in *SubscribeBatteryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BatteryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[12], TelemetryService_SubscribeBattery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeBatteryRequest, BatteryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeBatteryClient = grpc.ServerStreamingClient[BatteryResponse]

func (c *telemetryServiceClient) SubscribeFlightMode(ctx context.Context, in *SubscribeFlightModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FlightModeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[13], TelemetryService_SubscribeFlightMode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeFlightModeRequest, FlightModeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeFlightModeClient = grpc.ServerStreamingClient[FlightModeResponse]

func (c *telemetryServiceClient) SubscribeHealth(ctx context.Context, in *SubscribeHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[14], TelemetryService_SubscribeHealth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeHealthRequest, HealthResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeHealthClient = grpc.ServerStreamingClient[HealthResponse]

func (c *telemetryServiceClient) SubscribeRcStatus(ctx context.Context, in *SubscribeRcStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RcStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[15], TelemetryService_SubscribeRcStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRcStatusRequest, RcStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeRcStatusClient = grpc.ServerStreamingClient[RcStatusResponse]

func (c *telemetryServiceClient) SubscribeStatusText(ctx context.Context, in *SubscribeStatusTextRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusTextResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[16], TelemetryService_SubscribeStatusText_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeStatusTextRequest, StatusTextResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeStatusTextClient = grpc.ServerStreamingClient[StatusTextResponse]

func (c *telemetryServiceClient) SubscribeActuatorControlTarget(ctx context.Context, in *SubscribeActuatorControlTargetRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActuatorControlTargetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[17], TelemetryService_SubscribeActuatorControlTarget_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeActuatorControlTargetRequest, ActuatorControlTargetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeActuatorControlTargetClient = grpc.ServerStreamingClient[ActuatorControlTargetResponse]

func (c *telemetryServiceClient) SubscribeActuatorOutputStatus(ctx context.Context, in *SubscribeActuatorOutputStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActuatorOutputStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[18], TelemetryService_SubscribeActuatorOutputStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeActuatorOutputStatusRequest, ActuatorOutputStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeActuatorOutputStatusClient = grpc.ServerStreamingClient[ActuatorOutputStatusResponse]

func (c *telemetryServiceClient) SubscribeOdometry(ctx context.Context, in *SubscribeOdometryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OdometryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[19], TelemetryService_SubscribeOdometry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeOdometryRequest, OdometryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeOdometryClient = grpc.ServerStreamingClient[OdometryResponse]

func (c *telemetryServiceClient) SubscribePositionVelocityNed(ctx context.Context, in *SubscribePositionVelocityNedRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionVelocityNedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[20], TelemetryService_SubscribePositionVelocityNed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribePositionVelocityNedRequest, PositionVelocityNedResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribePositionVelocityNedClient = grpc.ServerStreamingClient[PositionVelocityNedResponse]

func (c *telemetryServiceClient) SubscribeGroundTruth(ctx context.Context, in *SubscribeGroundTruthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GroundTruthResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[21], TelemetryService_SubscribeGroundTruth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeGroundTruthRequest, GroundTruthResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeGroundTruthClient = grpc.ServerStreamingClient[GroundTruthResponse]

func (c *telemetryServiceClient) SubscribeFixedwingMetrics(ctx context.Context, in *SubscribeFixedwingMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FixedwingMetricsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[22], TelemetryService_SubscribeFixedwingMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeFixedwingMetricsRequest, FixedwingMetricsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeFixedwingMetricsClient = grpc.ServerStreamingClient[FixedwingMetricsResponse]

func (c *telemetryServiceClient) SubscribeImu(ctx context.Context, in *SubscribeImuRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ImuResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[23], TelemetryService_SubscribeImu_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeImuRequest, ImuResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeImuClient = grpc.ServerStreamingClient[ImuResponse]

func (c *telemetryServiceClient) SubscribeScaledImu(ctx context.Context, in *SubscribeScaledImuRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScaledImuResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[24], TelemetryService_SubscribeScaledImu_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeScaledImuRequest, ScaledImuResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeScaledImuClient = grpc.ServerStreamingClient[ScaledImuResponse]

func (c *telemetryServiceClient) SubscribeRawImu(ctx context.Context, in *SubscribeRawImuRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RawImuResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[25], TelemetryService_SubscribeRawImu_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRawImuRequest, RawImuResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeRawImuClient = grpc.ServerStreamingClient[RawImuResponse]

func (c *telemetryServiceClient) SubscribeHealthAllOk(ctx context.Context, in *SubscribeHealthAllOkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HealthAllOkResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[26], TelemetryService_SubscribeHealthAllOk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeHealthAllOkRequest, HealthAllOkResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeHealthAllOkClient = grpc.ServerStreamingClient[HealthAllOkResponse]

func (c *telemetryServiceClient) SubscribeUnixEpochTime(ctx context.Context, in *SubscribeUnixEpochTimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnixEpochTimeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[27], TelemetryService_SubscribeUnixEpochTime_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeUnixEpochTimeRequest, UnixEpochTimeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeUnixEpochTimeClient = grpc.ServerStreamingClient[UnixEpochTimeResponse]

func (c *telemetryServiceClient) SubscribeDistanceSensor(ctx context.Context, in *SubscribeDistanceSensorRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DistanceSensorResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[28], TelemetryService_SubscribeDistanceSensor_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeDistanceSensorRequest, DistanceSensorResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeDistanceSensorClient = grpc.ServerStreamingClient[DistanceSensorResponse]

func (c *telemetryServiceClient) SubscribeScaledPressure(ctx context.Context, in *SubscribeScaledPressureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScaledPressureResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[29], TelemetryService_SubscribeScaledPressure_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeScaledPressureRequest, ScaledPressureResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeScaledPressureClient = grpc.ServerStreamingClient[ScaledPressureResponse]

func (c *telemetryServiceClient) SubscribeHeading(ctx context.Context, in *SubscribeHeadingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HeadingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[30], TelemetryService_SubscribeHeading_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeHeadingRequest, HeadingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeHeadingClient = grpc.ServerStreamingClient[HeadingResponse]

func (c *telemetryServiceClient) SubscribeAltitude(ctx context.Context, in *SubscribeAltitudeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AltitudeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[31], TelemetryService_SubscribeAltitude_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeAltitudeRequest, AltitudeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeAltitudeClient = grpc.ServerStreamingClient[AltitudeResponse]

func (c *telemetryServiceClient) SetRatePosition(ctx context.Context, in *SetRatePositionRequest, opts ...grpc.CallOption) (*SetRatePositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRatePositionResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRatePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateHome(ctx context.Context, in *SetRateHomeRequest, opts ...grpc.CallOption) (*SetRateHomeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateHomeResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateHome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateInAir(ctx context.Context, in *SetRateInAirRequest, opts ...grpc.CallOption) (*SetRateInAirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateInAirResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateInAir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateLandedState(ctx context.Context, in *SetRateLandedStateRequest, opts ...grpc.CallOption) (*SetRateLandedStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateLandedStateResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateLandedState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateVtolState(ctx context.Context, in *SetRateVtolStateRequest, opts ...grpc.CallOption) (*SetRateVtolStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateVtolStateResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateVtolState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateAttitudeQuaternion(ctx context.Context, in *SetRateAttitudeQuaternionRequest, opts ...grpc.CallOption) (*SetRateAttitudeQuaternionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateAttitudeQuaternionResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateAttitudeQuaternion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateAttitudeEuler(ctx context.Context, in *SetRateAttitudeEulerRequest, opts ...grpc.CallOption) (*SetRateAttitudeEulerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateAttitudeEulerResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateAttitudeEuler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateVelocityNed(ctx context.Context, in *SetRateVelocityNedRequest, opts ...grpc.CallOption) (*SetRateVelocityNedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateVelocityNedResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateVelocityNed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateGpsInfo(ctx context.Context, in *SetRateGpsInfoRequest, opts ...grpc.CallOption) (*SetRateGpsInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateGpsInfoResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateGpsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateBattery(ctx context.Context, in *SetRateBatteryRequest, opts ...grpc.CallOption) (*SetRateBatteryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateBatteryResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateBattery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateRcStatus(ctx context.Context, in *SetRateRcStatusRequest, opts ...grpc.CallOption) (*SetRateRcStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateRcStatusResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateRcStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateActuatorControlTarget(ctx context.Context, in *SetRateActuatorControlTargetRequest, opts ...grpc.CallOption) (*SetRateActuatorControlTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateActuatorControlTargetResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateActuatorControlTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateActuatorOutputStatus(ctx context.Context, in *SetRateActuatorOutputStatusRequest, opts ...grpc.CallOption) (*SetRateActuatorOutputStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateActuatorOutputStatusResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateActuatorOutputStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateOdometry(ctx context.Context, in *SetRateOdometryRequest, opts ...grpc.CallOption) (*SetRateOdometryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateOdometryResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateOdometry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRatePositionVelocityNed(ctx context.Context, in *SetRatePositionVelocityNedRequest, opts ...grpc.CallOption) (*SetRatePositionVelocityNedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRatePositionVelocityNedResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRatePositionVelocityNed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateGroundTruth(ctx context.Context, in *SetRateGroundTruthRequest, opts ...grpc.CallOption) (*SetRateGroundTruthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateGroundTruthResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateGroundTruth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateFixedwingMetrics(ctx context.Context, in *SetRateFixedwingMetricsRequest, opts ...grpc.CallOption) (*SetRateFixedwingMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateFixedwingMetricsResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateFixedwingMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateImu(ctx context.Context, in *SetRateImuRequest, opts ...grpc.CallOption) (*SetRateImuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateImuResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateImu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateScaledImu(ctx context.Context, in *SetRateScaledImuRequest, opts ...grpc.CallOption) (*SetRateScaledImuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateScaledImuResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateScaledImu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateRawImu(ctx context.Context, in *SetRateRawImuRequest, opts ...grpc.CallOption) (*SetRateRawImuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateRawImuResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateRawImu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateUnixEpochTime(ctx context.Context, in *SetRateUnixEpochTimeRequest, opts ...grpc.CallOption) (*SetRateUnixEpochTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateUnixEpochTimeResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateUnixEpochTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateDistanceSensor(ctx context.Context, in *SetRateDistanceSensorRequest, opts ...grpc.CallOption) (*SetRateDistanceSensorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateDistanceSensorResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateDistanceSensor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SetRateAltitude(ctx context.Context, in *SetRateAltitudeRequest, opts ...grpc.CallOption) (*SetRateAltitudeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateAltitudeResponse)
	err := c.cc.Invoke(ctx, TelemetryService_SetRateAltitude_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) GetGpsGlobalOrigin(ctx context.Context, in *GetGpsGlobalOriginRequest, opts ...grpc.CallOption) (*GetGpsGlobalOriginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGpsGlobalOriginResponse)
	err := c.cc.Invoke(ctx, TelemetryService_GetGpsGlobalOrigin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility.
//
// Allow users to get vehicle telemetry and state information
// (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
type TelemetryServiceServer interface {
	// Subscribe to 'position' updates.
	SubscribePosition(*SubscribePositionRequest, grpc.ServerStreamingServer[PositionResponse]) error
	// Subscribe to 'home position' updates.
	SubscribeHome(*SubscribeHomeRequest, grpc.ServerStreamingServer[HomeResponse]) error
	// Subscribe to in-air updates.
	SubscribeInAir(*SubscribeInAirRequest, grpc.ServerStreamingServer[InAirResponse]) error
	// Subscribe to landed state updates
	SubscribeLandedState(*SubscribeLandedStateRequest, grpc.ServerStreamingServer[LandedStateResponse]) error
	// Subscribe to armed updates.
	SubscribeArmed(*SubscribeArmedRequest, grpc.ServerStreamingServer[ArmedResponse]) error
	// subscribe to vtol state Updates
	SubscribeVtolState(*SubscribeVtolStateRequest, grpc.ServerStreamingServer[VtolStateResponse]) error
	// Subscribe to 'attitude' updates (quaternion).
	SubscribeAttitudeQuaternion(*SubscribeAttitudeQuaternionRequest, grpc.ServerStreamingServer[AttitudeQuaternionResponse]) error
	// Subscribe to 'attitude' updates (Euler).
	SubscribeAttitudeEuler(*SubscribeAttitudeEulerRequest, grpc.ServerStreamingServer[AttitudeEulerResponse]) error
	// Subscribe to 'attitude' updates (angular velocity)
	SubscribeAttitudeAngularVelocityBody(*SubscribeAttitudeAngularVelocityBodyRequest, grpc.ServerStreamingServer[AttitudeAngularVelocityBodyResponse]) error
	// Subscribe to 'ground speed' updates (NED).
	SubscribeVelocityNed(*SubscribeVelocityNedRequest, grpc.ServerStreamingServer[VelocityNedResponse]) error
	// Subscribe to 'GPS info' updates.
	SubscribeGpsInfo(*SubscribeGpsInfoRequest, grpc.ServerStreamingServer[GpsInfoResponse]) error
	// Subscribe to 'Raw GPS' updates.
	SubscribeRawGps(*SubscribeRawGpsRequest, grpc.ServerStreamingServer[RawGpsResponse]) error
	// Subscribe to 'battery' updates.
	SubscribeBattery(*SubscribeBatteryRequest, grpc.ServerStreamingServer[BatteryResponse]) error
	// Subscribe to 'flight mode' updates.
	SubscribeFlightMode(*SubscribeFlightModeRequest, grpc.ServerStreamingServer[FlightModeResponse]) error
	// Subscribe to 'health' updates.
	SubscribeHealth(*SubscribeHealthRequest, grpc.ServerStreamingServer[HealthResponse]) error
	// Subscribe to 'RC status' updates.
	SubscribeRcStatus(*SubscribeRcStatusRequest, grpc.ServerStreamingServer[RcStatusResponse]) error
	// Subscribe to 'status text' updates.
	SubscribeStatusText(*SubscribeStatusTextRequest, grpc.ServerStreamingServer[StatusTextResponse]) error
	// Subscribe to 'actuator control target' updates.
	SubscribeActuatorControlTarget(*SubscribeActuatorControlTargetRequest, grpc.ServerStreamingServer[ActuatorControlTargetResponse]) error
	// Subscribe to 'actuator output status' updates.
	SubscribeActuatorOutputStatus(*SubscribeActuatorOutputStatusRequest, grpc.ServerStreamingServer[ActuatorOutputStatusResponse]) error
	// Subscribe to 'odometry' updates.
	SubscribeOdometry(*SubscribeOdometryRequest, grpc.ServerStreamingServer[OdometryResponse]) error
	// Subscribe to 'position velocity' updates.
	SubscribePositionVelocityNed(*SubscribePositionVelocityNedRequest, grpc.ServerStreamingServer[PositionVelocityNedResponse]) error
	// Subscribe to 'ground truth' updates.
	SubscribeGroundTruth(*SubscribeGroundTruthRequest, grpc.ServerStreamingServer[GroundTruthResponse]) error
	// Subscribe to 'fixedwing metrics' updates.
	SubscribeFixedwingMetrics(*SubscribeFixedwingMetricsRequest, grpc.ServerStreamingServer[FixedwingMetricsResponse]) error
	// Subscribe to 'IMU' updates (in SI units in NED body frame).
	SubscribeImu(*SubscribeImuRequest, grpc.ServerStreamingServer[ImuResponse]) error
	// Subscribe to 'Scaled IMU' updates.
	SubscribeScaledImu(*SubscribeScaledImuRequest, grpc.ServerStreamingServer[ScaledImuResponse]) error
	// Subscribe to 'Raw IMU' updates.
	SubscribeRawImu(*SubscribeRawImuRequest, grpc.ServerStreamingServer[RawImuResponse]) error
	// Subscribe to 'HealthAllOk' updates.
	SubscribeHealthAllOk(*SubscribeHealthAllOkRequest, grpc.ServerStreamingServer[HealthAllOkResponse]) error
	// Subscribe to 'unix epoch time' updates.
	SubscribeUnixEpochTime(*SubscribeUnixEpochTimeRequest, grpc.ServerStreamingServer[UnixEpochTimeResponse]) error
	// Subscribe to 'Distance Sensor' updates.
	SubscribeDistanceSensor(*SubscribeDistanceSensorRequest, grpc.ServerStreamingServer[DistanceSensorResponse]) error
	// Subscribe to 'Scaled Pressure' updates.
	SubscribeScaledPressure(*SubscribeScaledPressureRequest, grpc.ServerStreamingServer[ScaledPressureResponse]) error
	// Subscribe to 'Heading' updates.
	SubscribeHeading(*SubscribeHeadingRequest, grpc.ServerStreamingServer[HeadingResponse]) error
	// Subscribe to 'Altitude' updates.
	SubscribeAltitude(*SubscribeAltitudeRequest, grpc.ServerStreamingServer[AltitudeResponse]) error
	// Set rate to 'position' updates.
	SetRatePosition(context.Context, *SetRatePositionRequest) (*SetRatePositionResponse, error)
	// Set rate to 'home position' updates.
	SetRateHome(context.Context, *SetRateHomeRequest) (*SetRateHomeResponse, error)
	// Set rate to in-air updates.
	SetRateInAir(context.Context, *SetRateInAirRequest) (*SetRateInAirResponse, error)
	// Set rate to landed state updates
	SetRateLandedState(context.Context, *SetRateLandedStateRequest) (*SetRateLandedStateResponse, error)
	// Set rate to VTOL state updates
	SetRateVtolState(context.Context, *SetRateVtolStateRequest) (*SetRateVtolStateResponse, error)
	// Set rate to 'attitude euler angle' updates.
	SetRateAttitudeQuaternion(context.Context, *SetRateAttitudeQuaternionRequest) (*SetRateAttitudeQuaternionResponse, error)
	// Set rate to 'attitude quaternion' updates.
	SetRateAttitudeEuler(context.Context, *SetRateAttitudeEulerRequest) (*SetRateAttitudeEulerResponse, error)
	// Set rate of camera attitude updates.
	// Set rate to 'ground speed' updates (NED).
	SetRateVelocityNed(context.Context, *SetRateVelocityNedRequest) (*SetRateVelocityNedResponse, error)
	// Set rate to 'GPS info' updates.
	SetRateGpsInfo(context.Context, *SetRateGpsInfoRequest) (*SetRateGpsInfoResponse, error)
	// Set rate to 'battery' updates.
	SetRateBattery(context.Context, *SetRateBatteryRequest) (*SetRateBatteryResponse, error)
	// Set rate to 'RC status' updates.
	SetRateRcStatus(context.Context, *SetRateRcStatusRequest) (*SetRateRcStatusResponse, error)
	// Set rate to 'actuator control target' updates.
	SetRateActuatorControlTarget(context.Context, *SetRateActuatorControlTargetRequest) (*SetRateActuatorControlTargetResponse, error)
	// Set rate to 'actuator output status' updates.
	SetRateActuatorOutputStatus(context.Context, *SetRateActuatorOutputStatusRequest) (*SetRateActuatorOutputStatusResponse, error)
	// Set rate to 'odometry' updates.
	SetRateOdometry(context.Context, *SetRateOdometryRequest) (*SetRateOdometryResponse, error)
	// Set rate to 'position velocity' updates.
	SetRatePositionVelocityNed(context.Context, *SetRatePositionVelocityNedRequest) (*SetRatePositionVelocityNedResponse, error)
	// Set rate to 'ground truth' updates.
	SetRateGroundTruth(context.Context, *SetRateGroundTruthRequest) (*SetRateGroundTruthResponse, error)
	// Set rate to 'fixedwing metrics' updates.
	SetRateFixedwingMetrics(context.Context, *SetRateFixedwingMetricsRequest) (*SetRateFixedwingMetricsResponse, error)
	// Set rate to 'IMU' updates.
	SetRateImu(context.Context, *SetRateImuRequest) (*SetRateImuResponse, error)
	// Set rate to 'Scaled IMU' updates.
	SetRateScaledImu(context.Context, *SetRateScaledImuRequest) (*SetRateScaledImuResponse, error)
	// Set rate to 'Raw IMU' updates.
	SetRateRawImu(context.Context, *SetRateRawImuRequest) (*SetRateRawImuResponse, error)
	// Set rate to 'unix epoch time' updates.
	SetRateUnixEpochTime(context.Context, *SetRateUnixEpochTimeRequest) (*SetRateUnixEpochTimeResponse, error)
	// Set rate to 'Distance Sensor' updates.
	SetRateDistanceSensor(context.Context, *SetRateDistanceSensorRequest) (*SetRateDistanceSensorResponse, error)
	// Set rate to 'Altitude' updates.
	SetRateAltitude(context.Context, *SetRateAltitudeRequest) (*SetRateAltitudeResponse, error)
	// Get the GPS location of where the estimator has been initialized.
	GetGpsGlobalOrigin(context.Context, *GetGpsGlobalOriginRequest) (*GetGpsGlobalOriginResponse, error)
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelemetryServiceServer struct{}

func (UnimplementedTelemetryServiceServer) SubscribePosition(*SubscribePositionRequest, grpc.ServerStreamingServer[PositionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePosition not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeHome(*SubscribeHomeRequest, grpc.ServerStreamingServer[HomeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHome not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeInAir(*SubscribeInAirRequest, grpc.ServerStreamingServer[InAirResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeInAir not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeLandedState(*SubscribeLandedStateRequest, grpc.ServerStreamingServer[LandedStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLandedState not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeArmed(*SubscribeArmedRequest, grpc.ServerStreamingServer[ArmedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeArmed not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeVtolState(*SubscribeVtolStateRequest, grpc.ServerStreamingServer[VtolStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeVtolState not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeAttitudeQuaternion(*SubscribeAttitudeQuaternionRequest, grpc.ServerStreamingServer[AttitudeQuaternionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeQuaternion not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeAttitudeEuler(*SubscribeAttitudeEulerRequest, grpc.ServerStreamingServer[AttitudeEulerResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeEuler not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeAttitudeAngularVelocityBody(*SubscribeAttitudeAngularVelocityBodyRequest, grpc.ServerStreamingServer[AttitudeAngularVelocityBodyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAttitudeAngularVelocityBody not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeVelocityNed(*SubscribeVelocityNedRequest, grpc.ServerStreamingServer[VelocityNedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeVelocityNed not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeGpsInfo(*SubscribeGpsInfoRequest, grpc.ServerStreamingServer[GpsInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGpsInfo not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeRawGps(*SubscribeRawGpsRequest, grpc.ServerStreamingServer[RawGpsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRawGps not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeBattery(*SubscribeBatteryRequest, grpc.ServerStreamingServer[BatteryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBattery not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeFlightMode(*SubscribeFlightModeRequest, grpc.ServerStreamingServer[FlightModeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFlightMode not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeHealth(*SubscribeHealthRequest, grpc.ServerStreamingServer[HealthResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHealth not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeRcStatus(*SubscribeRcStatusRequest, grpc.ServerStreamingServer[RcStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRcStatus not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeStatusText(*SubscribeStatusTextRequest, grpc.ServerStreamingServer[StatusTextResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStatusText not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeActuatorControlTarget(*SubscribeActuatorControlTargetRequest, grpc.ServerStreamingServer[ActuatorControlTargetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeActuatorControlTarget not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeActuatorOutputStatus(*SubscribeActuatorOutputStatusRequest, grpc.ServerStreamingServer[ActuatorOutputStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeActuatorOutputStatus not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeOdometry(*SubscribeOdometryRequest, grpc.ServerStreamingServer[OdometryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOdometry not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribePositionVelocityNed(*SubscribePositionVelocityNedRequest, grpc.ServerStreamingServer[PositionVelocityNedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePositionVelocityNed not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeGroundTruth(*SubscribeGroundTruthRequest, grpc.ServerStreamingServer[GroundTruthResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGroundTruth not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeFixedwingMetrics(*SubscribeFixedwingMetricsRequest, grpc.ServerStreamingServer[FixedwingMetricsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFixedwingMetrics not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeImu(*SubscribeImuRequest, grpc.ServerStreamingServer[ImuResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeScaledImu(*SubscribeScaledImuRequest, grpc.ServerStreamingServer[ScaledImuResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeScaledImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeRawImu(*SubscribeRawImuRequest, grpc.ServerStreamingServer[RawImuResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRawImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeHealthAllOk(*SubscribeHealthAllOkRequest, grpc.ServerStreamingServer[HealthAllOkResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHealthAllOk not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeUnixEpochTime(*SubscribeUnixEpochTimeRequest, grpc.ServerStreamingServer[UnixEpochTimeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUnixEpochTime not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeDistanceSensor(*SubscribeDistanceSensorRequest, grpc.ServerStreamingServer[DistanceSensorResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDistanceSensor not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeScaledPressure(*SubscribeScaledPressureRequest, grpc.ServerStreamingServer[ScaledPressureResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeScaledPressure not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeHeading(*SubscribeHeadingRequest, grpc.ServerStreamingServer[HeadingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeHeading not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeAltitude(*SubscribeAltitudeRequest, grpc.ServerStreamingServer[AltitudeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeAltitude not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRatePosition(context.Context, *SetRatePositionRequest) (*SetRatePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRatePosition not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateHome(context.Context, *SetRateHomeRequest) (*SetRateHomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateHome not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateInAir(context.Context, *SetRateInAirRequest) (*SetRateInAirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateInAir not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateLandedState(context.Context, *SetRateLandedStateRequest) (*SetRateLandedStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateLandedState not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateVtolState(context.Context, *SetRateVtolStateRequest) (*SetRateVtolStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateVtolState not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateAttitudeQuaternion(context.Context, *SetRateAttitudeQuaternionRequest) (*SetRateAttitudeQuaternionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateAttitudeQuaternion not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateAttitudeEuler(context.Context, *SetRateAttitudeEulerRequest) (*SetRateAttitudeEulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateAttitudeEuler not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateVelocityNed(context.Context, *SetRateVelocityNedRequest) (*SetRateVelocityNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateVelocityNed not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateGpsInfo(context.Context, *SetRateGpsInfoRequest) (*SetRateGpsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateGpsInfo not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateBattery(context.Context, *SetRateBatteryRequest) (*SetRateBatteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateBattery not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateRcStatus(context.Context, *SetRateRcStatusRequest) (*SetRateRcStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateRcStatus not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateActuatorControlTarget(context.Context, *SetRateActuatorControlTargetRequest) (*SetRateActuatorControlTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateActuatorControlTarget not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateActuatorOutputStatus(context.Context, *SetRateActuatorOutputStatusRequest) (*SetRateActuatorOutputStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateActuatorOutputStatus not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateOdometry(context.Context, *SetRateOdometryRequest) (*SetRateOdometryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateOdometry not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRatePositionVelocityNed(context.Context, *SetRatePositionVelocityNedRequest) (*SetRatePositionVelocityNedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRatePositionVelocityNed not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateGroundTruth(context.Context, *SetRateGroundTruthRequest) (*SetRateGroundTruthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateGroundTruth not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateFixedwingMetrics(context.Context, *SetRateFixedwingMetricsRequest) (*SetRateFixedwingMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateFixedwingMetrics not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateImu(context.Context, *SetRateImuRequest) (*SetRateImuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateScaledImu(context.Context, *SetRateScaledImuRequest) (*SetRateScaledImuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateScaledImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateRawImu(context.Context, *SetRateRawImuRequest) (*SetRateRawImuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateRawImu not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateUnixEpochTime(context.Context, *SetRateUnixEpochTimeRequest) (*SetRateUnixEpochTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateUnixEpochTime not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateDistanceSensor(context.Context, *SetRateDistanceSensorRequest) (*SetRateDistanceSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateDistanceSensor not implemented")
}
func (UnimplementedTelemetryServiceServer) SetRateAltitude(context.Context, *SetRateAltitudeRequest) (*SetRateAltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateAltitude not implemented")
}
func (UnimplementedTelemetryServiceServer) GetGpsGlobalOrigin(context.Context, *GetGpsGlobalOriginRequest) (*GetGpsGlobalOriginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGpsGlobalOrigin not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}
func (UnimplementedTelemetryServiceServer) testEmbeddedByValue()                          {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTelemetryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_SubscribePosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePositionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribePosition(m, &grpc.GenericServerStream[SubscribePositionRequest, PositionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribePositionServer = grpc.ServerStreamingServer[PositionResponse]

func _TelemetryService_SubscribeHome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHome(m, &grpc.GenericServerStream[SubscribeHomeRequest, HomeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeHomeServer = grpc.ServerStreamingServer[HomeResponse]

func _TelemetryService_SubscribeInAir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeInAirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeInAir(m, &grpc.GenericServerStream[SubscribeInAirRequest, InAirResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeInAirServer = grpc.ServerStreamingServer[InAirResponse]

func _TelemetryService_SubscribeLandedState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLandedStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeLandedState(m, &grpc.GenericServerStream[SubscribeLandedStateRequest, LandedStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeLandedStateServer = grpc.ServerStreamingServer[LandedStateResponse]

func _TelemetryService_SubscribeArmed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeArmedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeArmed(m, &grpc.GenericServerStream[SubscribeArmedRequest, ArmedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeArmedServer = grpc.ServerStreamingServer[ArmedResponse]

func _TelemetryService_SubscribeVtolState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeVtolStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeVtolState(m, &grpc.GenericServerStream[SubscribeVtolStateRequest, VtolStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeVtolStateServer = grpc.ServerStreamingServer[VtolStateResponse]

func _TelemetryService_SubscribeAttitudeQuaternion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeQuaternionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeQuaternion(m, &grpc.GenericServerStream[SubscribeAttitudeQuaternionRequest, AttitudeQuaternionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeAttitudeQuaternionServer = grpc.ServerStreamingServer[AttitudeQuaternionResponse]

func _TelemetryService_SubscribeAttitudeEuler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeEulerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeEuler(m, &grpc.GenericServerStream[SubscribeAttitudeEulerRequest, AttitudeEulerResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeAttitudeEulerServer = grpc.ServerStreamingServer[AttitudeEulerResponse]

func _TelemetryService_SubscribeAttitudeAngularVelocityBody_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAttitudeAngularVelocityBodyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAttitudeAngularVelocityBody(m, &grpc.GenericServerStream[SubscribeAttitudeAngularVelocityBodyRequest, AttitudeAngularVelocityBodyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeAttitudeAngularVelocityBodyServer = grpc.ServerStreamingServer[AttitudeAngularVelocityBodyResponse]

func _TelemetryService_SubscribeVelocityNed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeVelocityNedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeVelocityNed(m, &grpc.GenericServerStream[SubscribeVelocityNedRequest, VelocityNedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeVelocityNedServer = grpc.ServerStreamingServer[VelocityNedResponse]

func _TelemetryService_SubscribeGpsInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeGpsInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeGpsInfo(m, &grpc.GenericServerStream[SubscribeGpsInfoRequest, GpsInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeGpsInfoServer = grpc.ServerStreamingServer[GpsInfoResponse]

func _TelemetryService_SubscribeRawGps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRawGpsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeRawGps(m, &grpc.GenericServerStream[SubscribeRawGpsRequest, RawGpsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeRawGpsServer = grpc.ServerStreamingServer[RawGpsResponse]

func _TelemetryService_SubscribeBattery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBatteryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeBattery(m, &grpc.GenericServerStream[SubscribeBatteryRequest, BatteryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeBatteryServer = grpc.ServerStreamingServer[BatteryResponse]

func _TelemetryService_SubscribeFlightMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFlightModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeFlightMode(m, &grpc.GenericServerStream[SubscribeFlightModeRequest, FlightModeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeFlightModeServer = grpc.ServerStreamingServer[FlightModeResponse]

func _TelemetryService_SubscribeHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHealth(m, &grpc.GenericServerStream[SubscribeHealthRequest, HealthResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeHealthServer = grpc.ServerStreamingServer[HealthResponse]

func _TelemetryService_SubscribeRcStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRcStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeRcStatus(m, &grpc.GenericServerStream[SubscribeRcStatusRequest, RcStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeRcStatusServer = grpc.ServerStreamingServer[RcStatusResponse]

func _TelemetryService_SubscribeStatusText_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStatusTextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeStatusText(m, &grpc.GenericServerStream[SubscribeStatusTextRequest, StatusTextResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeStatusTextServer = grpc.ServerStreamingServer[StatusTextResponse]

func _TelemetryService_SubscribeActuatorControlTarget_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeActuatorControlTargetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeActuatorControlTarget(m, &grpc.GenericServerStream[SubscribeActuatorControlTargetRequest, ActuatorControlTargetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeActuatorControlTargetServer = grpc.ServerStreamingServer[ActuatorControlTargetResponse]

func _TelemetryService_SubscribeActuatorOutputStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeActuatorOutputStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeActuatorOutputStatus(m, &grpc.GenericServerStream[SubscribeActuatorOutputStatusRequest, ActuatorOutputStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeActuatorOutputStatusServer = grpc.ServerStreamingServer[ActuatorOutputStatusResponse]

func _TelemetryService_SubscribeOdometry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOdometryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeOdometry(m, &grpc.GenericServerStream[SubscribeOdometryRequest, OdometryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeOdometryServer = grpc.ServerStreamingServer[OdometryResponse]

func _TelemetryService_SubscribePositionVelocityNed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePositionVelocityNedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribePositionVelocityNed(m, &grpc.GenericServerStream[SubscribePositionVelocityNedRequest, PositionVelocityNedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribePositionVelocityNedServer = grpc.ServerStreamingServer[PositionVelocityNedResponse]

func _TelemetryService_SubscribeGroundTruth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeGroundTruthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeGroundTruth(m, &grpc.GenericServerStream[SubscribeGroundTruthRequest, GroundTruthResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeGroundTruthServer = grpc.ServerStreamingServer[GroundTruthResponse]

func _TelemetryService_SubscribeFixedwingMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFixedwingMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeFixedwingMetrics(m, &grpc.GenericServerStream[SubscribeFixedwingMetricsRequest, FixedwingMetricsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeFixedwingMetricsServer = grpc.ServerStreamingServer[FixedwingMetricsResponse]

func _TelemetryService_SubscribeImu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeImuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeImu(m, &grpc.GenericServerStream[SubscribeImuRequest, ImuResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeImuServer = grpc.ServerStreamingServer[ImuResponse]

func _TelemetryService_SubscribeScaledImu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeScaledImuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeScaledImu(m, &grpc.GenericServerStream[SubscribeScaledImuRequest, ScaledImuResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeScaledImuServer = grpc.ServerStreamingServer[ScaledImuResponse]

func _TelemetryService_SubscribeRawImu_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRawImuRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeRawImu(m, &grpc.GenericServerStream[SubscribeRawImuRequest, RawImuResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeRawImuServer = grpc.ServerStreamingServer[RawImuResponse]

func _TelemetryService_SubscribeHealthAllOk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHealthAllOkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHealthAllOk(m, &grpc.GenericServerStream[SubscribeHealthAllOkRequest, HealthAllOkResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeHealthAllOkServer = grpc.ServerStreamingServer[HealthAllOkResponse]

func _TelemetryService_SubscribeUnixEpochTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeUnixEpochTimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeUnixEpochTime(m, &grpc.GenericServerStream[SubscribeUnixEpochTimeRequest, UnixEpochTimeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeUnixEpochTimeServer = grpc.ServerStreamingServer[UnixEpochTimeResponse]

func _TelemetryService_SubscribeDistanceSensor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeDistanceSensorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeDistanceSensor(m, &grpc.GenericServerStream[SubscribeDistanceSensorRequest, DistanceSensorResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeDistanceSensorServer = grpc.ServerStreamingServer[DistanceSensorResponse]

func _TelemetryService_SubscribeScaledPressure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeScaledPressureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeScaledPressure(m, &grpc.GenericServerStream[SubscribeScaledPressureRequest, ScaledPressureResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeScaledPressureServer = grpc.ServerStreamingServer[ScaledPressureResponse]

func _TelemetryService_SubscribeHeading_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHeadingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeHeading(m, &grpc.GenericServerStream[SubscribeHeadingRequest, HeadingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeHeadingServer = grpc.ServerStreamingServer[HeadingResponse]

func _TelemetryService_SubscribeAltitude_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeAltitudeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeAltitude(m, &grpc.GenericServerStream[SubscribeAltitudeRequest, AltitudeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_SubscribeAltitudeServer = grpc.ServerStreamingServer[AltitudeResponse]

func _TelemetryService_SetRatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRatePosition(ctx, req.(*SetRatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateHome(ctx, req.(*SetRateHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateInAir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateInAirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateInAir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateInAir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateInAir(ctx, req.(*SetRateInAirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateLandedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateLandedStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateLandedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateLandedState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateLandedState(ctx, req.(*SetRateLandedStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateVtolState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateVtolStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateVtolState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateVtolState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateVtolState(ctx, req.(*SetRateVtolStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateAttitudeQuaternion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateAttitudeQuaternionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateAttitudeQuaternion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateAttitudeQuaternion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateAttitudeQuaternion(ctx, req.(*SetRateAttitudeQuaternionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateAttitudeEuler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateAttitudeEulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateAttitudeEuler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateAttitudeEuler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateAttitudeEuler(ctx, req.(*SetRateAttitudeEulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateVelocityNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateVelocityNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateVelocityNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateVelocityNed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateVelocityNed(ctx, req.(*SetRateVelocityNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateGpsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateGpsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateGpsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateGpsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateGpsInfo(ctx, req.(*SetRateGpsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateBattery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateBatteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateBattery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateBattery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateBattery(ctx, req.(*SetRateBatteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateRcStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateRcStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateRcStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateRcStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateRcStatus(ctx, req.(*SetRateRcStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateActuatorControlTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateActuatorControlTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateActuatorControlTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateActuatorControlTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateActuatorControlTarget(ctx, req.(*SetRateActuatorControlTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateActuatorOutputStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateActuatorOutputStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateActuatorOutputStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateActuatorOutputStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateActuatorOutputStatus(ctx, req.(*SetRateActuatorOutputStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateOdometry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateOdometryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateOdometry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateOdometry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateOdometry(ctx, req.(*SetRateOdometryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRatePositionVelocityNed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRatePositionVelocityNedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRatePositionVelocityNed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRatePositionVelocityNed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRatePositionVelocityNed(ctx, req.(*SetRatePositionVelocityNedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateGroundTruth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateGroundTruthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateGroundTruth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateGroundTruth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateGroundTruth(ctx, req.(*SetRateGroundTruthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateFixedwingMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateFixedwingMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateFixedwingMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateFixedwingMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateFixedwingMetrics(ctx, req.(*SetRateFixedwingMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateImu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateImuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateImu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateImu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateImu(ctx, req.(*SetRateImuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateScaledImu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateScaledImuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateScaledImu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateScaledImu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateScaledImu(ctx, req.(*SetRateScaledImuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateRawImu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateRawImuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateRawImu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateRawImu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateRawImu(ctx, req.(*SetRateRawImuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateUnixEpochTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateUnixEpochTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateUnixEpochTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateUnixEpochTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateUnixEpochTime(ctx, req.(*SetRateUnixEpochTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateDistanceSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateDistanceSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateDistanceSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateDistanceSensor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateDistanceSensor(ctx, req.(*SetRateDistanceSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SetRateAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateAltitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SetRateAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_SetRateAltitude_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SetRateAltitude(ctx, req.(*SetRateAltitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_GetGpsGlobalOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGpsGlobalOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).GetGpsGlobalOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_GetGpsGlobalOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).GetGpsGlobalOrigin(ctx, req.(*GetGpsGlobalOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.telemetry.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRatePosition",
			Handler:    _TelemetryService_SetRatePosition_Handler,
		},
		{
			MethodName: "SetRateHome",
			Handler:    _TelemetryService_SetRateHome_Handler,
		},
		{
			MethodName: "SetRateInAir",
			Handler:    _TelemetryService_SetRateInAir_Handler,
		},
		{
			MethodName: "SetRateLandedState",
			Handler:    _TelemetryService_SetRateLandedState_Handler,
		},
		{
			MethodName: "SetRateVtolState",
			Handler:    _TelemetryService_SetRateVtolState_Handler,
		},
		{
			MethodName: "SetRateAttitudeQuaternion",
			Handler:    _TelemetryService_SetRateAttitudeQuaternion_Handler,
		},
		{
			MethodName: "SetRateAttitudeEuler",
			Handler:    _TelemetryService_SetRateAttitudeEuler_Handler,
		},
		{
			MethodName: "SetRateVelocityNed",
			Handler:    _TelemetryService_SetRateVelocityNed_Handler,
		},
		{
			MethodName: "SetRateGpsInfo",
			Handler:    _TelemetryService_SetRateGpsInfo_Handler,
		},
		{
			MethodName: "SetRateBattery",
			Handler:    _TelemetryService_SetRateBattery_Handler,
		},
		{
			MethodName: "SetRateRcStatus",
			Handler:    _TelemetryService_SetRateRcStatus_Handler,
		},
		{
			MethodName: "SetRateActuatorControlTarget",
			Handler:    _TelemetryService_SetRateActuatorControlTarget_Handler,
		},
		{
			MethodName: "SetRateActuatorOutputStatus",
			Handler:    _TelemetryService_SetRateActuatorOutputStatus_Handler,
		},
		{
			MethodName: "SetRateOdometry",
			Handler:    _TelemetryService_SetRateOdometry_Handler,
		},
		{
			MethodName: "SetRatePositionVelocityNed",
			Handler:    _TelemetryService_SetRatePositionVelocityNed_Handler,
		},
		{
			MethodName: "SetRateGroundTruth",
			Handler:    _TelemetryService_SetRateGroundTruth_Handler,
		},
		{
			MethodName: "SetRateFixedwingMetrics",
			Handler:    _TelemetryService_SetRateFixedwingMetrics_Handler,
		},
		{
			MethodName: "SetRateImu",
			Handler:    _TelemetryService_SetRateImu_Handler,
		},
		{
			MethodName: "SetRateScaledImu",
			Handler:    _TelemetryService_SetRateScaledImu_Handler,
		},
		{
			MethodName: "SetRateRawImu",
			Handler:    _TelemetryService_SetRateRawImu_Handler,
		},
		{
			MethodName: "SetRateUnixEpochTime",
			Handler:    _TelemetryService_SetRateUnixEpochTime_Handler,
		},
		{
			MethodName: "SetRateDistanceSensor",
			Handler:    _TelemetryService_SetRateDistanceSensor_Handler,
		},
		{
			MethodName: "SetRateAltitude",
			Handler:    _TelemetryService_SetRateAltitude_Handler,
		},
		{
			MethodName: "GetGpsGlobalOrigin",
			Handler:    _TelemetryService_GetGpsGlobalOrigin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePosition",
			Handler:       _TelemetryService_SubscribePosition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHome",
			Handler:       _TelemetryService_SubscribeHome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeInAir",
			Handler:       _TelemetryService_SubscribeInAir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeLandedState",
			Handler:       _TelemetryService_SubscribeLandedState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeArmed",
			Handler:       _TelemetryService_SubscribeArmed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeVtolState",
			Handler:       _TelemetryService_SubscribeVtolState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeQuaternion",
			Handler:       _TelemetryService_SubscribeAttitudeQuaternion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeEuler",
			Handler:       _TelemetryService_SubscribeAttitudeEuler_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAttitudeAngularVelocityBody",
			Handler:       _TelemetryService_SubscribeAttitudeAngularVelocityBody_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeVelocityNed",
			Handler:       _TelemetryService_SubscribeVelocityNed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGpsInfo",
			Handler:       _TelemetryService_SubscribeGpsInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRawGps",
			Handler:       _TelemetryService_SubscribeRawGps_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBattery",
			Handler:       _TelemetryService_SubscribeBattery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFlightMode",
			Handler:       _TelemetryService_SubscribeFlightMode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHealth",
			Handler:       _TelemetryService_SubscribeHealth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRcStatus",
			Handler:       _TelemetryService_SubscribeRcStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStatusText",
			Handler:       _TelemetryService_SubscribeStatusText_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeActuatorControlTarget",
			Handler:       _TelemetryService_SubscribeActuatorControlTarget_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeActuatorOutputStatus",
			Handler:       _TelemetryService_SubscribeActuatorOutputStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOdometry",
			Handler:       _TelemetryService_SubscribeOdometry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribePositionVelocityNed",
			Handler:       _TelemetryService_SubscribePositionVelocityNed_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeGroundTruth",
			Handler:       _TelemetryService_SubscribeGroundTruth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFixedwingMetrics",
			Handler:       _TelemetryService_SubscribeFixedwingMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeImu",
			Handler:       _TelemetryService_SubscribeImu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeScaledImu",
			Handler:       _TelemetryService_SubscribeScaledImu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeRawImu",
			Handler:       _TelemetryService_SubscribeRawImu_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHealthAllOk",
			Handler:       _TelemetryService_SubscribeHealthAllOk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeUnixEpochTime",
			Handler:       _TelemetryService_SubscribeUnixEpochTime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeDistanceSensor",
			Handler:       _TelemetryService_SubscribeDistanceSensor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeScaledPressure",
			Handler:       _TelemetryService_SubscribeScaledPressure_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeHeading",
			Handler:       _TelemetryService_SubscribeHeading_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAltitude",
			Handler:       _TelemetryService_SubscribeAltitude_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}
