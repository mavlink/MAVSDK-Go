// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: tune.proto

package tune

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TuneService_PlayTune_FullMethodName = "/mavsdk.rpc.tune.TuneService/PlayTune"
)

// TuneServiceClient is the client API for TuneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Enable creating and sending a tune to be played on the system.
type TuneServiceClient interface {
	// Send a tune to be played by the system.
	PlayTune(ctx context.Context, in *PlayTuneRequest, opts ...grpc.CallOption) (*PlayTuneResponse, error)
}

type tuneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTuneServiceClient(cc grpc.ClientConnInterface) TuneServiceClient {
	return &tuneServiceClient{cc}
}

func (c *tuneServiceClient) PlayTune(ctx context.Context, in *PlayTuneRequest, opts ...grpc.CallOption) (*PlayTuneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayTuneResponse)
	err := c.cc.Invoke(ctx, TuneService_PlayTune_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TuneServiceServer is the server API for TuneService service.
// All implementations must embed UnimplementedTuneServiceServer
// for forward compatibility.
//
// Enable creating and sending a tune to be played on the system.
type TuneServiceServer interface {
	// Send a tune to be played by the system.
	PlayTune(context.Context, *PlayTuneRequest) (*PlayTuneResponse, error)
	mustEmbedUnimplementedTuneServiceServer()
}

// UnimplementedTuneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTuneServiceServer struct{}

func (UnimplementedTuneServiceServer) PlayTune(context.Context, *PlayTuneRequest) (*PlayTuneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayTune not implemented")
}
func (UnimplementedTuneServiceServer) mustEmbedUnimplementedTuneServiceServer() {}
func (UnimplementedTuneServiceServer) testEmbeddedByValue()                     {}

// UnsafeTuneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TuneServiceServer will
// result in compilation errors.
type UnsafeTuneServiceServer interface {
	mustEmbedUnimplementedTuneServiceServer()
}

func RegisterTuneServiceServer(s grpc.ServiceRegistrar, srv TuneServiceServer) {
	// If the following call pancis, it indicates UnimplementedTuneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TuneService_ServiceDesc, srv)
}

func _TuneService_PlayTune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayTuneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuneServiceServer).PlayTune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TuneService_PlayTune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuneServiceServer).PlayTune(ctx, req.(*PlayTuneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TuneService_ServiceDesc is the grpc.ServiceDesc for TuneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TuneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.tune.TuneService",
	HandlerType: (*TuneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayTune",
			Handler:    _TuneService_PlayTune_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tune.proto",
}
