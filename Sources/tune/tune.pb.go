// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: tune.proto

package tune

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An element of the tune
type SongElement int32

const (
	SongElement_SONG_ELEMENT_STYLE_LEGATO   SongElement = 0  // After this element, start playing legato
	SongElement_SONG_ELEMENT_STYLE_NORMAL   SongElement = 1  // After this element, start playing normal
	SongElement_SONG_ELEMENT_STYLE_STACCATO SongElement = 2  // After this element, start playing staccato
	SongElement_SONG_ELEMENT_DURATION_1     SongElement = 3  // After this element, set the note duration to 1
	SongElement_SONG_ELEMENT_DURATION_2     SongElement = 4  // After this element, set the note duration to 2
	SongElement_SONG_ELEMENT_DURATION_4     SongElement = 5  // After this element, set the note duration to 4
	SongElement_SONG_ELEMENT_DURATION_8     SongElement = 6  // After this element, set the note duration to 8
	SongElement_SONG_ELEMENT_DURATION_16    SongElement = 7  // After this element, set the note duration to 16
	SongElement_SONG_ELEMENT_DURATION_32    SongElement = 8  // After this element, set the note duration to 32
	SongElement_SONG_ELEMENT_NOTE_A         SongElement = 9  // Play note A
	SongElement_SONG_ELEMENT_NOTE_B         SongElement = 10 // Play note B
	SongElement_SONG_ELEMENT_NOTE_C         SongElement = 11 // Play note C
	SongElement_SONG_ELEMENT_NOTE_D         SongElement = 12 // Play note D
	SongElement_SONG_ELEMENT_NOTE_E         SongElement = 13 // Play note E
	SongElement_SONG_ELEMENT_NOTE_F         SongElement = 14 // Play note F
	SongElement_SONG_ELEMENT_NOTE_G         SongElement = 15 // Play note G
	SongElement_SONG_ELEMENT_NOTE_PAUSE     SongElement = 16 // Play a rest
	SongElement_SONG_ELEMENT_SHARP          SongElement = 17 // After this element, sharp the note (half a step up)
	SongElement_SONG_ELEMENT_FLAT           SongElement = 18 // After this element, flat the note (half a step down)
	SongElement_SONG_ELEMENT_OCTAVE_UP      SongElement = 19 // After this element, shift the note 1 octave up
	SongElement_SONG_ELEMENT_OCTAVE_DOWN    SongElement = 20 // After this element, shift the note 1 octave down
)

// Enum value maps for SongElement.
var (
	SongElement_name = map[int32]string{
		0:  "SONG_ELEMENT_STYLE_LEGATO",
		1:  "SONG_ELEMENT_STYLE_NORMAL",
		2:  "SONG_ELEMENT_STYLE_STACCATO",
		3:  "SONG_ELEMENT_DURATION_1",
		4:  "SONG_ELEMENT_DURATION_2",
		5:  "SONG_ELEMENT_DURATION_4",
		6:  "SONG_ELEMENT_DURATION_8",
		7:  "SONG_ELEMENT_DURATION_16",
		8:  "SONG_ELEMENT_DURATION_32",
		9:  "SONG_ELEMENT_NOTE_A",
		10: "SONG_ELEMENT_NOTE_B",
		11: "SONG_ELEMENT_NOTE_C",
		12: "SONG_ELEMENT_NOTE_D",
		13: "SONG_ELEMENT_NOTE_E",
		14: "SONG_ELEMENT_NOTE_F",
		15: "SONG_ELEMENT_NOTE_G",
		16: "SONG_ELEMENT_NOTE_PAUSE",
		17: "SONG_ELEMENT_SHARP",
		18: "SONG_ELEMENT_FLAT",
		19: "SONG_ELEMENT_OCTAVE_UP",
		20: "SONG_ELEMENT_OCTAVE_DOWN",
	}
	SongElement_value = map[string]int32{
		"SONG_ELEMENT_STYLE_LEGATO":   0,
		"SONG_ELEMENT_STYLE_NORMAL":   1,
		"SONG_ELEMENT_STYLE_STACCATO": 2,
		"SONG_ELEMENT_DURATION_1":     3,
		"SONG_ELEMENT_DURATION_2":     4,
		"SONG_ELEMENT_DURATION_4":     5,
		"SONG_ELEMENT_DURATION_8":     6,
		"SONG_ELEMENT_DURATION_16":    7,
		"SONG_ELEMENT_DURATION_32":    8,
		"SONG_ELEMENT_NOTE_A":         9,
		"SONG_ELEMENT_NOTE_B":         10,
		"SONG_ELEMENT_NOTE_C":         11,
		"SONG_ELEMENT_NOTE_D":         12,
		"SONG_ELEMENT_NOTE_E":         13,
		"SONG_ELEMENT_NOTE_F":         14,
		"SONG_ELEMENT_NOTE_G":         15,
		"SONG_ELEMENT_NOTE_PAUSE":     16,
		"SONG_ELEMENT_SHARP":          17,
		"SONG_ELEMENT_FLAT":           18,
		"SONG_ELEMENT_OCTAVE_UP":      19,
		"SONG_ELEMENT_OCTAVE_DOWN":    20,
	}
)

func (x SongElement) Enum() *SongElement {
	p := new(SongElement)
	*p = x
	return p
}

func (x SongElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SongElement) Descriptor() protoreflect.EnumDescriptor {
	return file_tune_proto_enumTypes[0].Descriptor()
}

func (SongElement) Type() protoreflect.EnumType {
	return &file_tune_proto_enumTypes[0]
}

func (x SongElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SongElement.Descriptor instead.
func (SongElement) EnumDescriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{0}
}

// Possible results returned for tune requests.
type TuneResult_Result int32

const (
	TuneResult_RESULT_UNKNOWN       TuneResult_Result = 0 // Unknown result
	TuneResult_RESULT_SUCCESS       TuneResult_Result = 1 // Request succeeded
	TuneResult_RESULT_INVALID_TEMPO TuneResult_Result = 2 // Invalid tempo (range: 32 - 255)
	TuneResult_RESULT_TUNE_TOO_LONG TuneResult_Result = 3 // Invalid tune: encoded string must be at most 247 chars
	TuneResult_RESULT_ERROR         TuneResult_Result = 4 // Failed to send the request
	TuneResult_RESULT_NO_SYSTEM     TuneResult_Result = 5 // No system connected
)

// Enum value maps for TuneResult_Result.
var (
	TuneResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_INVALID_TEMPO",
		3: "RESULT_TUNE_TOO_LONG",
		4: "RESULT_ERROR",
		5: "RESULT_NO_SYSTEM",
	}
	TuneResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":       0,
		"RESULT_SUCCESS":       1,
		"RESULT_INVALID_TEMPO": 2,
		"RESULT_TUNE_TOO_LONG": 3,
		"RESULT_ERROR":         4,
		"RESULT_NO_SYSTEM":     5,
	}
)

func (x TuneResult_Result) Enum() *TuneResult_Result {
	p := new(TuneResult_Result)
	*p = x
	return p
}

func (x TuneResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TuneResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tune_proto_enumTypes[1].Descriptor()
}

func (TuneResult_Result) Type() protoreflect.EnumType {
	return &file_tune_proto_enumTypes[1]
}

func (x TuneResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TuneResult_Result.Descriptor instead.
func (TuneResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{3, 0}
}

type PlayTuneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TuneDescription *TuneDescription `protobuf:"bytes,1,opt,name=tune_description,json=tuneDescription,proto3" json:"tune_description,omitempty"` // The tune to be played
}

func (x *PlayTuneRequest) Reset() {
	*x = PlayTuneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tune_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayTuneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayTuneRequest) ProtoMessage() {}

func (x *PlayTuneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tune_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayTuneRequest.ProtoReflect.Descriptor instead.
func (*PlayTuneRequest) Descriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{0}
}

func (x *PlayTuneRequest) GetTuneDescription() *TuneDescription {
	if x != nil {
		return x.TuneDescription
	}
	return nil
}

type PlayTuneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TuneResult *TuneResult `protobuf:"bytes,1,opt,name=tune_result,json=tuneResult,proto3" json:"tune_result,omitempty"`
}

func (x *PlayTuneResponse) Reset() {
	*x = PlayTuneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tune_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayTuneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayTuneResponse) ProtoMessage() {}

func (x *PlayTuneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tune_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayTuneResponse.ProtoReflect.Descriptor instead.
func (*PlayTuneResponse) Descriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{1}
}

func (x *PlayTuneResponse) GetTuneResult() *TuneResult {
	if x != nil {
		return x.TuneResult
	}
	return nil
}

// Tune description, containing song elements and tempo.
type TuneDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SongElements []SongElement `protobuf:"varint,1,rep,packed,name=song_elements,json=songElements,proto3,enum=mavsdk.rpc.tune.SongElement" json:"song_elements,omitempty"` // The list of song elements (notes, pauses, ...) to be played
	Tempo        int32         `protobuf:"varint,2,opt,name=tempo,proto3" json:"tempo,omitempty"`                                                                           // The tempo of the song (range: 32 - 255)
}

func (x *TuneDescription) Reset() {
	*x = TuneDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tune_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TuneDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuneDescription) ProtoMessage() {}

func (x *TuneDescription) ProtoReflect() protoreflect.Message {
	mi := &file_tune_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuneDescription.ProtoReflect.Descriptor instead.
func (*TuneDescription) Descriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{2}
}

func (x *TuneDescription) GetSongElements() []SongElement {
	if x != nil {
		return x.SongElements
	}
	return nil
}

func (x *TuneDescription) GetTempo() int32 {
	if x != nil {
		return x.Tempo
	}
	return 0
}

type TuneResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    TuneResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.tune.TuneResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string            `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                  // Human-readable English string describing the result
}

func (x *TuneResult) Reset() {
	*x = TuneResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tune_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TuneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuneResult) ProtoMessage() {}

func (x *TuneResult) ProtoReflect() protoreflect.Message {
	mi := &file_tune_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuneResult.ProtoReflect.Descriptor instead.
func (*TuneResult) Descriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{3}
}

func (x *TuneResult) GetResult() TuneResult_Result {
	if x != nil {
		return x.Result
	}
	return TuneResult_RESULT_UNKNOWN
}

func (x *TuneResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_tune_proto protoreflect.FileDescriptor

var file_tune_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x75, 0x6e, 0x65, 0x22, 0x5e, 0x0a,
	0x0f, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x75,
	0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x6a, 0x0a, 0x0f, 0x54, 0x75, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x53, 0x6f, 0x6e, 0x67,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x6f, 0x6e, 0x67, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x22, 0xf6, 0x01, 0x0a, 0x0a,
	0x54, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x54, 0x75, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x55, 0x4e,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x10, 0x05, 0x2a, 0xd1, 0x04, 0x0a, 0x0b, 0x53, 0x6f, 0x6e, 0x67, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x4f, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x43, 0x41, 0x54,
	0x4f, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x34, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f,
	0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x38, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x4e, 0x47, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x31, 0x36, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x33,
	0x32, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x45, 0x5f, 0x42, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x45, 0x5f, 0x44, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x47, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x45, 0x10, 0x0d,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x46, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x4e,
	0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x47,
	0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x10, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x50, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x4e, 0x47, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x12, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x43, 0x54, 0x41, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f,
	0x4e, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x43, 0x54, 0x41, 0x56,
	0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x14, 0x32, 0x60, 0x0a, 0x0b, 0x54, 0x75, 0x6e, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x54,
	0x75, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x75, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x74, 0x75, 0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x75, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x13, 0x42, 0x09, 0x54, 0x75,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x06, 0x2e, 0x3b, 0x74, 0x75, 0x6e, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tune_proto_rawDescOnce sync.Once
	file_tune_proto_rawDescData = file_tune_proto_rawDesc
)

func file_tune_proto_rawDescGZIP() []byte {
	file_tune_proto_rawDescOnce.Do(func() {
		file_tune_proto_rawDescData = protoimpl.X.CompressGZIP(file_tune_proto_rawDescData)
	})
	return file_tune_proto_rawDescData
}

var file_tune_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tune_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tune_proto_goTypes = []any{
	(SongElement)(0),         // 0: mavsdk.rpc.tune.SongElement
	(TuneResult_Result)(0),   // 1: mavsdk.rpc.tune.TuneResult.Result
	(*PlayTuneRequest)(nil),  // 2: mavsdk.rpc.tune.PlayTuneRequest
	(*PlayTuneResponse)(nil), // 3: mavsdk.rpc.tune.PlayTuneResponse
	(*TuneDescription)(nil),  // 4: mavsdk.rpc.tune.TuneDescription
	(*TuneResult)(nil),       // 5: mavsdk.rpc.tune.TuneResult
}
var file_tune_proto_depIdxs = []int32{
	4, // 0: mavsdk.rpc.tune.PlayTuneRequest.tune_description:type_name -> mavsdk.rpc.tune.TuneDescription
	5, // 1: mavsdk.rpc.tune.PlayTuneResponse.tune_result:type_name -> mavsdk.rpc.tune.TuneResult
	0, // 2: mavsdk.rpc.tune.TuneDescription.song_elements:type_name -> mavsdk.rpc.tune.SongElement
	1, // 3: mavsdk.rpc.tune.TuneResult.result:type_name -> mavsdk.rpc.tune.TuneResult.Result
	2, // 4: mavsdk.rpc.tune.TuneService.PlayTune:input_type -> mavsdk.rpc.tune.PlayTuneRequest
	3, // 5: mavsdk.rpc.tune.TuneService.PlayTune:output_type -> mavsdk.rpc.tune.PlayTuneResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tune_proto_init() }
func file_tune_proto_init() {
	if File_tune_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tune_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PlayTuneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tune_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PlayTuneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tune_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TuneDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tune_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TuneResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tune_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tune_proto_goTypes,
		DependencyIndexes: file_tune_proto_depIdxs,
		EnumInfos:         file_tune_proto_enumTypes,
		MessageInfos:      file_tune_proto_msgTypes,
	}.Build()
	File_tune_proto = out.File
	file_tune_proto_rawDesc = nil
	file_tune_proto_goTypes = nil
	file_tune_proto_depIdxs = nil
}
