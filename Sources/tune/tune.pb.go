// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: tune.proto

package tune

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An element of the tune
type SongElement int32

const (
	SongElement_SONG_ELEMENT_STYLE_LEGATO   SongElement = 0  // After this element, start playing legato
	SongElement_SONG_ELEMENT_STYLE_NORMAL   SongElement = 1  // After this element, start playing normal
	SongElement_SONG_ELEMENT_STYLE_STACCATO SongElement = 2  // After this element, start playing staccato
	SongElement_SONG_ELEMENT_DURATION_1     SongElement = 3  // After this element, set the note duration to 1
	SongElement_SONG_ELEMENT_DURATION_2     SongElement = 4  // After this element, set the note duration to 2
	SongElement_SONG_ELEMENT_DURATION_4     SongElement = 5  // After this element, set the note duration to 4
	SongElement_SONG_ELEMENT_DURATION_8     SongElement = 6  // After this element, set the note duration to 8
	SongElement_SONG_ELEMENT_DURATION_16    SongElement = 7  // After this element, set the note duration to 16
	SongElement_SONG_ELEMENT_DURATION_32    SongElement = 8  // After this element, set the note duration to 32
	SongElement_SONG_ELEMENT_NOTE_A         SongElement = 9  // Play note A
	SongElement_SONG_ELEMENT_NOTE_B         SongElement = 10 // Play note B
	SongElement_SONG_ELEMENT_NOTE_C         SongElement = 11 // Play note C
	SongElement_SONG_ELEMENT_NOTE_D         SongElement = 12 // Play note D
	SongElement_SONG_ELEMENT_NOTE_E         SongElement = 13 // Play note E
	SongElement_SONG_ELEMENT_NOTE_F         SongElement = 14 // Play note F
	SongElement_SONG_ELEMENT_NOTE_G         SongElement = 15 // Play note G
	SongElement_SONG_ELEMENT_NOTE_PAUSE     SongElement = 16 // Play a rest
	SongElement_SONG_ELEMENT_SHARP          SongElement = 17 // After this element, sharp the note (half a step up)
	SongElement_SONG_ELEMENT_FLAT           SongElement = 18 // After this element, flat the note (half a step down)
	SongElement_SONG_ELEMENT_OCTAVE_UP      SongElement = 19 // After this element, shift the note 1 octave up
	SongElement_SONG_ELEMENT_OCTAVE_DOWN    SongElement = 20 // After this element, shift the note 1 octave down
)

// Enum value maps for SongElement.
var (
	SongElement_name = map[int32]string{
		0:  "SONG_ELEMENT_STYLE_LEGATO",
		1:  "SONG_ELEMENT_STYLE_NORMAL",
		2:  "SONG_ELEMENT_STYLE_STACCATO",
		3:  "SONG_ELEMENT_DURATION_1",
		4:  "SONG_ELEMENT_DURATION_2",
		5:  "SONG_ELEMENT_DURATION_4",
		6:  "SONG_ELEMENT_DURATION_8",
		7:  "SONG_ELEMENT_DURATION_16",
		8:  "SONG_ELEMENT_DURATION_32",
		9:  "SONG_ELEMENT_NOTE_A",
		10: "SONG_ELEMENT_NOTE_B",
		11: "SONG_ELEMENT_NOTE_C",
		12: "SONG_ELEMENT_NOTE_D",
		13: "SONG_ELEMENT_NOTE_E",
		14: "SONG_ELEMENT_NOTE_F",
		15: "SONG_ELEMENT_NOTE_G",
		16: "SONG_ELEMENT_NOTE_PAUSE",
		17: "SONG_ELEMENT_SHARP",
		18: "SONG_ELEMENT_FLAT",
		19: "SONG_ELEMENT_OCTAVE_UP",
		20: "SONG_ELEMENT_OCTAVE_DOWN",
	}
	SongElement_value = map[string]int32{
		"SONG_ELEMENT_STYLE_LEGATO":   0,
		"SONG_ELEMENT_STYLE_NORMAL":   1,
		"SONG_ELEMENT_STYLE_STACCATO": 2,
		"SONG_ELEMENT_DURATION_1":     3,
		"SONG_ELEMENT_DURATION_2":     4,
		"SONG_ELEMENT_DURATION_4":     5,
		"SONG_ELEMENT_DURATION_8":     6,
		"SONG_ELEMENT_DURATION_16":    7,
		"SONG_ELEMENT_DURATION_32":    8,
		"SONG_ELEMENT_NOTE_A":         9,
		"SONG_ELEMENT_NOTE_B":         10,
		"SONG_ELEMENT_NOTE_C":         11,
		"SONG_ELEMENT_NOTE_D":         12,
		"SONG_ELEMENT_NOTE_E":         13,
		"SONG_ELEMENT_NOTE_F":         14,
		"SONG_ELEMENT_NOTE_G":         15,
		"SONG_ELEMENT_NOTE_PAUSE":     16,
		"SONG_ELEMENT_SHARP":          17,
		"SONG_ELEMENT_FLAT":           18,
		"SONG_ELEMENT_OCTAVE_UP":      19,
		"SONG_ELEMENT_OCTAVE_DOWN":    20,
	}
)

func (x SongElement) Enum() *SongElement {
	p := new(SongElement)
	*p = x
	return p
}

func (x SongElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SongElement) Descriptor() protoreflect.EnumDescriptor {
	return file_tune_proto_enumTypes[0].Descriptor()
}

func (SongElement) Type() protoreflect.EnumType {
	return &file_tune_proto_enumTypes[0]
}

func (x SongElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SongElement.Descriptor instead.
func (SongElement) EnumDescriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{0}
}

// Possible results returned for tune requests.
type TuneResult_Result int32

const (
	TuneResult_RESULT_UNKNOWN       TuneResult_Result = 0 // Unknown result
	TuneResult_RESULT_SUCCESS       TuneResult_Result = 1 // Request succeeded
	TuneResult_RESULT_INVALID_TEMPO TuneResult_Result = 2 // Invalid tempo (range: 32 - 255)
	TuneResult_RESULT_TUNE_TOO_LONG TuneResult_Result = 3 // Invalid tune: encoded string must be at most 247 chars
	TuneResult_RESULT_ERROR         TuneResult_Result = 4 // Failed to send the request
	TuneResult_RESULT_NO_SYSTEM     TuneResult_Result = 5 // No system connected
)

// Enum value maps for TuneResult_Result.
var (
	TuneResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_INVALID_TEMPO",
		3: "RESULT_TUNE_TOO_LONG",
		4: "RESULT_ERROR",
		5: "RESULT_NO_SYSTEM",
	}
	TuneResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":       0,
		"RESULT_SUCCESS":       1,
		"RESULT_INVALID_TEMPO": 2,
		"RESULT_TUNE_TOO_LONG": 3,
		"RESULT_ERROR":         4,
		"RESULT_NO_SYSTEM":     5,
	}
)

func (x TuneResult_Result) Enum() *TuneResult_Result {
	p := new(TuneResult_Result)
	*p = x
	return p
}

func (x TuneResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TuneResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tune_proto_enumTypes[1].Descriptor()
}

func (TuneResult_Result) Type() protoreflect.EnumType {
	return &file_tune_proto_enumTypes[1]
}

func (x TuneResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TuneResult_Result.Descriptor instead.
func (TuneResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{3, 0}
}

type PlayTuneRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TuneDescription *TuneDescription       `protobuf:"bytes,1,opt,name=tune_description,json=tuneDescription,proto3" json:"tune_description,omitempty"` // The tune to be played
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlayTuneRequest) Reset() {
	*x = PlayTuneRequest{}
	mi := &file_tune_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayTuneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayTuneRequest) ProtoMessage() {}

func (x *PlayTuneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tune_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayTuneRequest.ProtoReflect.Descriptor instead.
func (*PlayTuneRequest) Descriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{0}
}

func (x *PlayTuneRequest) GetTuneDescription() *TuneDescription {
	if x != nil {
		return x.TuneDescription
	}
	return nil
}

type PlayTuneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TuneResult    *TuneResult            `protobuf:"bytes,1,opt,name=tune_result,json=tuneResult,proto3" json:"tune_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayTuneResponse) Reset() {
	*x = PlayTuneResponse{}
	mi := &file_tune_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayTuneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayTuneResponse) ProtoMessage() {}

func (x *PlayTuneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tune_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayTuneResponse.ProtoReflect.Descriptor instead.
func (*PlayTuneResponse) Descriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{1}
}

func (x *PlayTuneResponse) GetTuneResult() *TuneResult {
	if x != nil {
		return x.TuneResult
	}
	return nil
}

// Tune description, containing song elements and tempo.
type TuneDescription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SongElements  []SongElement          `protobuf:"varint,1,rep,packed,name=song_elements,json=songElements,proto3,enum=mavsdk.rpc.tune.SongElement" json:"song_elements,omitempty"` // The list of song elements (notes, pauses, ...) to be played
	Tempo         int32                  `protobuf:"varint,2,opt,name=tempo,proto3" json:"tempo,omitempty"`                                                                           // The tempo of the song (range: 32 - 255)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TuneDescription) Reset() {
	*x = TuneDescription{}
	mi := &file_tune_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TuneDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuneDescription) ProtoMessage() {}

func (x *TuneDescription) ProtoReflect() protoreflect.Message {
	mi := &file_tune_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuneDescription.ProtoReflect.Descriptor instead.
func (*TuneDescription) Descriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{2}
}

func (x *TuneDescription) GetSongElements() []SongElement {
	if x != nil {
		return x.SongElements
	}
	return nil
}

func (x *TuneDescription) GetTempo() int32 {
	if x != nil {
		return x.Tempo
	}
	return 0
}

type TuneResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        TuneResult_Result      `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.tune.TuneResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr     string                 `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                  // Human-readable English string describing the result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TuneResult) Reset() {
	*x = TuneResult{}
	mi := &file_tune_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TuneResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuneResult) ProtoMessage() {}

func (x *TuneResult) ProtoReflect() protoreflect.Message {
	mi := &file_tune_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuneResult.ProtoReflect.Descriptor instead.
func (*TuneResult) Descriptor() ([]byte, []int) {
	return file_tune_proto_rawDescGZIP(), []int{3}
}

func (x *TuneResult) GetResult() TuneResult_Result {
	if x != nil {
		return x.Result
	}
	return TuneResult_RESULT_UNKNOWN
}

func (x *TuneResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_tune_proto protoreflect.FileDescriptor

const file_tune_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"tune.proto\x12\x0fmavsdk.rpc.tune\"^\n" +
	"\x0fPlayTuneRequest\x12K\n" +
	"\x10tune_description\x18\x01 \x01(\v2 .mavsdk.rpc.tune.TuneDescriptionR\x0ftuneDescription\"P\n" +
	"\x10PlayTuneResponse\x12<\n" +
	"\vtune_result\x18\x01 \x01(\v2\x1b.mavsdk.rpc.tune.TuneResultR\n" +
	"tuneResult\"j\n" +
	"\x0fTuneDescription\x12A\n" +
	"\rsong_elements\x18\x01 \x03(\x0e2\x1c.mavsdk.rpc.tune.SongElementR\fsongElements\x12\x14\n" +
	"\x05tempo\x18\x02 \x01(\x05R\x05tempo\"\xf6\x01\n" +
	"\n" +
	"TuneResult\x12:\n" +
	"\x06result\x18\x01 \x01(\x0e2\".mavsdk.rpc.tune.TuneResult.ResultR\x06result\x12\x1d\n" +
	"\n" +
	"result_str\x18\x02 \x01(\tR\tresultStr\"\x8c\x01\n" +
	"\x06Result\x12\x12\n" +
	"\x0eRESULT_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eRESULT_SUCCESS\x10\x01\x12\x18\n" +
	"\x14RESULT_INVALID_TEMPO\x10\x02\x12\x18\n" +
	"\x14RESULT_TUNE_TOO_LONG\x10\x03\x12\x10\n" +
	"\fRESULT_ERROR\x10\x04\x12\x14\n" +
	"\x10RESULT_NO_SYSTEM\x10\x05*\xd1\x04\n" +
	"\vSongElement\x12\x1d\n" +
	"\x19SONG_ELEMENT_STYLE_LEGATO\x10\x00\x12\x1d\n" +
	"\x19SONG_ELEMENT_STYLE_NORMAL\x10\x01\x12\x1f\n" +
	"\x1bSONG_ELEMENT_STYLE_STACCATO\x10\x02\x12\x1b\n" +
	"\x17SONG_ELEMENT_DURATION_1\x10\x03\x12\x1b\n" +
	"\x17SONG_ELEMENT_DURATION_2\x10\x04\x12\x1b\n" +
	"\x17SONG_ELEMENT_DURATION_4\x10\x05\x12\x1b\n" +
	"\x17SONG_ELEMENT_DURATION_8\x10\x06\x12\x1c\n" +
	"\x18SONG_ELEMENT_DURATION_16\x10\a\x12\x1c\n" +
	"\x18SONG_ELEMENT_DURATION_32\x10\b\x12\x17\n" +
	"\x13SONG_ELEMENT_NOTE_A\x10\t\x12\x17\n" +
	"\x13SONG_ELEMENT_NOTE_B\x10\n" +
	"\x12\x17\n" +
	"\x13SONG_ELEMENT_NOTE_C\x10\v\x12\x17\n" +
	"\x13SONG_ELEMENT_NOTE_D\x10\f\x12\x17\n" +
	"\x13SONG_ELEMENT_NOTE_E\x10\r\x12\x17\n" +
	"\x13SONG_ELEMENT_NOTE_F\x10\x0e\x12\x17\n" +
	"\x13SONG_ELEMENT_NOTE_G\x10\x0f\x12\x1b\n" +
	"\x17SONG_ELEMENT_NOTE_PAUSE\x10\x10\x12\x16\n" +
	"\x12SONG_ELEMENT_SHARP\x10\x11\x12\x15\n" +
	"\x11SONG_ELEMENT_FLAT\x10\x12\x12\x1a\n" +
	"\x16SONG_ELEMENT_OCTAVE_UP\x10\x13\x12\x1c\n" +
	"\x18SONG_ELEMENT_OCTAVE_DOWN\x10\x142`\n" +
	"\vTuneService\x12Q\n" +
	"\bPlayTune\x12 .mavsdk.rpc.tune.PlayTuneRequest\x1a!.mavsdk.rpc.tune.PlayTuneResponse\"\x00B\x13B\tTuneProtoZ\x06.;tuneb\x06proto3"

var (
	file_tune_proto_rawDescOnce sync.Once
	file_tune_proto_rawDescData []byte
)

func file_tune_proto_rawDescGZIP() []byte {
	file_tune_proto_rawDescOnce.Do(func() {
		file_tune_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tune_proto_rawDesc), len(file_tune_proto_rawDesc)))
	})
	return file_tune_proto_rawDescData
}

var file_tune_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tune_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tune_proto_goTypes = []any{
	(SongElement)(0),         // 0: mavsdk.rpc.tune.SongElement
	(TuneResult_Result)(0),   // 1: mavsdk.rpc.tune.TuneResult.Result
	(*PlayTuneRequest)(nil),  // 2: mavsdk.rpc.tune.PlayTuneRequest
	(*PlayTuneResponse)(nil), // 3: mavsdk.rpc.tune.PlayTuneResponse
	(*TuneDescription)(nil),  // 4: mavsdk.rpc.tune.TuneDescription
	(*TuneResult)(nil),       // 5: mavsdk.rpc.tune.TuneResult
}
var file_tune_proto_depIdxs = []int32{
	4, // 0: mavsdk.rpc.tune.PlayTuneRequest.tune_description:type_name -> mavsdk.rpc.tune.TuneDescription
	5, // 1: mavsdk.rpc.tune.PlayTuneResponse.tune_result:type_name -> mavsdk.rpc.tune.TuneResult
	0, // 2: mavsdk.rpc.tune.TuneDescription.song_elements:type_name -> mavsdk.rpc.tune.SongElement
	1, // 3: mavsdk.rpc.tune.TuneResult.result:type_name -> mavsdk.rpc.tune.TuneResult.Result
	2, // 4: mavsdk.rpc.tune.TuneService.PlayTune:input_type -> mavsdk.rpc.tune.PlayTuneRequest
	3, // 5: mavsdk.rpc.tune.TuneService.PlayTune:output_type -> mavsdk.rpc.tune.PlayTuneResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tune_proto_init() }
func file_tune_proto_init() {
	if File_tune_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tune_proto_rawDesc), len(file_tune_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tune_proto_goTypes,
		DependencyIndexes: file_tune_proto_depIdxs,
		EnumInfos:         file_tune_proto_enumTypes,
		MessageInfos:      file_tune_proto_msgTypes,
	}.Build()
	File_tune_proto = out.File
	file_tune_proto_goTypes = nil
	file_tune_proto_depIdxs = nil
}
