// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: action_server.proto

package action_server

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flight modes.
//
// For more information about flight modes, check out
// https://docs.px4.io/master/en/config/flight_mode.html.
type FlightMode int32

const (
	FlightMode_FLIGHT_MODE_UNKNOWN          FlightMode = 0  // Mode not known
	FlightMode_FLIGHT_MODE_READY            FlightMode = 1  // Armed and ready to take off
	FlightMode_FLIGHT_MODE_TAKEOFF          FlightMode = 2  // Taking off
	FlightMode_FLIGHT_MODE_HOLD             FlightMode = 3  // Holding (hovering in place (or circling for fixed-wing vehicles)
	FlightMode_FLIGHT_MODE_MISSION          FlightMode = 4  // In mission
	FlightMode_FLIGHT_MODE_RETURN_TO_LAUNCH FlightMode = 5  // Returning to launch position (then landing)
	FlightMode_FLIGHT_MODE_LAND             FlightMode = 6  // Landing
	FlightMode_FLIGHT_MODE_OFFBOARD         FlightMode = 7  // In 'offboard' mode
	FlightMode_FLIGHT_MODE_FOLLOW_ME        FlightMode = 8  // In 'follow-me' mode
	FlightMode_FLIGHT_MODE_MANUAL           FlightMode = 9  // In 'Manual' mode
	FlightMode_FLIGHT_MODE_ALTCTL           FlightMode = 10 // In 'Altitude Control' mode
	FlightMode_FLIGHT_MODE_POSCTL           FlightMode = 11 // In 'Position Control' mode
	FlightMode_FLIGHT_MODE_ACRO             FlightMode = 12 // In 'Acro' mode
	FlightMode_FLIGHT_MODE_STABILIZED       FlightMode = 13 // In 'Stabilize' mode
)

// Enum value maps for FlightMode.
var (
	FlightMode_name = map[int32]string{
		0:  "FLIGHT_MODE_UNKNOWN",
		1:  "FLIGHT_MODE_READY",
		2:  "FLIGHT_MODE_TAKEOFF",
		3:  "FLIGHT_MODE_HOLD",
		4:  "FLIGHT_MODE_MISSION",
		5:  "FLIGHT_MODE_RETURN_TO_LAUNCH",
		6:  "FLIGHT_MODE_LAND",
		7:  "FLIGHT_MODE_OFFBOARD",
		8:  "FLIGHT_MODE_FOLLOW_ME",
		9:  "FLIGHT_MODE_MANUAL",
		10: "FLIGHT_MODE_ALTCTL",
		11: "FLIGHT_MODE_POSCTL",
		12: "FLIGHT_MODE_ACRO",
		13: "FLIGHT_MODE_STABILIZED",
	}
	FlightMode_value = map[string]int32{
		"FLIGHT_MODE_UNKNOWN":          0,
		"FLIGHT_MODE_READY":            1,
		"FLIGHT_MODE_TAKEOFF":          2,
		"FLIGHT_MODE_HOLD":             3,
		"FLIGHT_MODE_MISSION":          4,
		"FLIGHT_MODE_RETURN_TO_LAUNCH": 5,
		"FLIGHT_MODE_LAND":             6,
		"FLIGHT_MODE_OFFBOARD":         7,
		"FLIGHT_MODE_FOLLOW_ME":        8,
		"FLIGHT_MODE_MANUAL":           9,
		"FLIGHT_MODE_ALTCTL":           10,
		"FLIGHT_MODE_POSCTL":           11,
		"FLIGHT_MODE_ACRO":             12,
		"FLIGHT_MODE_STABILIZED":       13,
	}
)

func (x FlightMode) Enum() *FlightMode {
	p := new(FlightMode)
	*p = x
	return p
}

func (x FlightMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightMode) Descriptor() protoreflect.EnumDescriptor {
	return file_action_server_proto_enumTypes[0].Descriptor()
}

func (FlightMode) Type() protoreflect.EnumType {
	return &file_action_server_proto_enumTypes[0]
}

func (x FlightMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightMode.Descriptor instead.
func (FlightMode) EnumDescriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{0}
}

// Possible results returned for action requests.
type ActionServerResult_Result int32

const (
	ActionServerResult_RESULT_UNKNOWN                             ActionServerResult_Result = 0  // Unknown result
	ActionServerResult_RESULT_SUCCESS                             ActionServerResult_Result = 1  // Request was successful
	ActionServerResult_RESULT_NO_SYSTEM                           ActionServerResult_Result = 2  // No system is connected
	ActionServerResult_RESULT_CONNECTION_ERROR                    ActionServerResult_Result = 3  // Connection error
	ActionServerResult_RESULT_BUSY                                ActionServerResult_Result = 4  // Vehicle is busy
	ActionServerResult_RESULT_COMMAND_DENIED                      ActionServerResult_Result = 5  // Command refused by vehicle
	ActionServerResult_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN ActionServerResult_Result = 6  // Command refused because landed state is unknown
	ActionServerResult_RESULT_COMMAND_DENIED_NOT_LANDED           ActionServerResult_Result = 7  // Command refused because vehicle not landed
	ActionServerResult_RESULT_TIMEOUT                             ActionServerResult_Result = 8  // Request timed out
	ActionServerResult_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN     ActionServerResult_Result = 9  // Hybrid/VTOL transition support is unknown
	ActionServerResult_RESULT_NO_VTOL_TRANSITION_SUPPORT          ActionServerResult_Result = 10 // Vehicle does not support hybrid/VTOL transitions
	ActionServerResult_RESULT_PARAMETER_ERROR                     ActionServerResult_Result = 11 // Error getting or setting parameter
	ActionServerResult_RESULT_NEXT                                ActionServerResult_Result = 12 // Intermediate message showing progress or instructions on the next steps
)

// Enum value maps for ActionServerResult_Result.
var (
	ActionServerResult_Result_name = map[int32]string{
		0:  "RESULT_UNKNOWN",
		1:  "RESULT_SUCCESS",
		2:  "RESULT_NO_SYSTEM",
		3:  "RESULT_CONNECTION_ERROR",
		4:  "RESULT_BUSY",
		5:  "RESULT_COMMAND_DENIED",
		6:  "RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN",
		7:  "RESULT_COMMAND_DENIED_NOT_LANDED",
		8:  "RESULT_TIMEOUT",
		9:  "RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN",
		10: "RESULT_NO_VTOL_TRANSITION_SUPPORT",
		11: "RESULT_PARAMETER_ERROR",
		12: "RESULT_NEXT",
	}
	ActionServerResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":                             0,
		"RESULT_SUCCESS":                             1,
		"RESULT_NO_SYSTEM":                           2,
		"RESULT_CONNECTION_ERROR":                    3,
		"RESULT_BUSY":                                4,
		"RESULT_COMMAND_DENIED":                      5,
		"RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN": 6,
		"RESULT_COMMAND_DENIED_NOT_LANDED":           7,
		"RESULT_TIMEOUT":                             8,
		"RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN":     9,
		"RESULT_NO_VTOL_TRANSITION_SUPPORT":          10,
		"RESULT_PARAMETER_ERROR":                     11,
		"RESULT_NEXT":                                12,
	}
)

func (x ActionServerResult_Result) Enum() *ActionServerResult_Result {
	p := new(ActionServerResult_Result)
	*p = x
	return p
}

func (x ActionServerResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionServerResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_action_server_proto_enumTypes[1].Descriptor()
}

func (ActionServerResult_Result) Type() protoreflect.EnumType {
	return &file_action_server_proto_enumTypes[1]
}

func (x ActionServerResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionServerResult_Result.Descriptor instead.
func (ActionServerResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{30, 0}
}

type SetAllowTakeoffRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllowTakeoff  bool                   `protobuf:"varint,1,opt,name=allow_takeoff,json=allowTakeoff,proto3" json:"allow_takeoff,omitempty"` // Is takeoff allowed?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAllowTakeoffRequest) Reset() {
	*x = SetAllowTakeoffRequest{}
	mi := &file_action_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAllowTakeoffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowTakeoffRequest) ProtoMessage() {}

func (x *SetAllowTakeoffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowTakeoffRequest.ProtoReflect.Descriptor instead.
func (*SetAllowTakeoffRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{0}
}

func (x *SetAllowTakeoffRequest) GetAllowTakeoff() bool {
	if x != nil {
		return x.AllowTakeoff
	}
	return false
}

type SetArmableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Armable       bool                   `protobuf:"varint,1,opt,name=armable,proto3" json:"armable,omitempty"`                               // Is Armable now?
	ForceArmable  bool                   `protobuf:"varint,2,opt,name=force_armable,json=forceArmable,proto3" json:"force_armable,omitempty"` // Is armable with force?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetArmableRequest) Reset() {
	*x = SetArmableRequest{}
	mi := &file_action_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetArmableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArmableRequest) ProtoMessage() {}

func (x *SetArmableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArmableRequest.ProtoReflect.Descriptor instead.
func (*SetArmableRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{1}
}

func (x *SetArmableRequest) GetArmable() bool {
	if x != nil {
		return x.Armable
	}
	return false
}

func (x *SetArmableRequest) GetForceArmable() bool {
	if x != nil {
		return x.ForceArmable
	}
	return false
}

type SetDisarmableRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Disarmable      bool                   `protobuf:"varint,1,opt,name=disarmable,proto3" json:"disarmable,omitempty"`                                  // Is disarmable now?
	ForceDisarmable bool                   `protobuf:"varint,2,opt,name=force_disarmable,json=forceDisarmable,proto3" json:"force_disarmable,omitempty"` // Is disarmable with force? (Kill)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetDisarmableRequest) Reset() {
	*x = SetDisarmableRequest{}
	mi := &file_action_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDisarmableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDisarmableRequest) ProtoMessage() {}

func (x *SetDisarmableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDisarmableRequest.ProtoReflect.Descriptor instead.
func (*SetDisarmableRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{2}
}

func (x *SetDisarmableRequest) GetDisarmable() bool {
	if x != nil {
		return x.Disarmable
	}
	return false
}

func (x *SetDisarmableRequest) GetForceDisarmable() bool {
	if x != nil {
		return x.ForceDisarmable
	}
	return false
}

type SetAllowableFlightModesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlightModes   *AllowableFlightModes  `protobuf:"bytes,1,opt,name=flight_modes,json=flightModes,proto3" json:"flight_modes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAllowableFlightModesRequest) Reset() {
	*x = SetAllowableFlightModesRequest{}
	mi := &file_action_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAllowableFlightModesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowableFlightModesRequest) ProtoMessage() {}

func (x *SetAllowableFlightModesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowableFlightModesRequest.ProtoReflect.Descriptor instead.
func (*SetAllowableFlightModesRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{3}
}

func (x *SetAllowableFlightModesRequest) GetFlightModes() *AllowableFlightModes {
	if x != nil {
		return x.FlightModes
	}
	return nil
}

type SetArmedStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsArmed       bool                   `protobuf:"varint,1,opt,name=is_armed,json=isArmed,proto3" json:"is_armed,omitempty"` // Is armed now?
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetArmedStateRequest) Reset() {
	*x = SetArmedStateRequest{}
	mi := &file_action_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetArmedStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArmedStateRequest) ProtoMessage() {}

func (x *SetArmedStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArmedStateRequest.ProtoReflect.Descriptor instead.
func (*SetArmedStateRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{4}
}

func (x *SetArmedStateRequest) GetIsArmed() bool {
	if x != nil {
		return x.IsArmed
	}
	return false
}

type SetFlightModeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlightMode    FlightMode             `protobuf:"varint,1,opt,name=flight_mode,json=flightMode,proto3,enum=mavsdk.rpc.action_server.FlightMode" json:"flight_mode,omitempty"` // Current vehicle flight mode, e.g. Takeoff/Mission/Land/etc.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetFlightModeRequest) Reset() {
	*x = SetFlightModeRequest{}
	mi := &file_action_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetFlightModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFlightModeRequest) ProtoMessage() {}

func (x *SetFlightModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFlightModeRequest.ProtoReflect.Descriptor instead.
func (*SetFlightModeRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{5}
}

func (x *SetFlightModeRequest) GetFlightMode() FlightMode {
	if x != nil {
		return x.FlightMode
	}
	return FlightMode_FLIGHT_MODE_UNKNOWN
}

type GetAllowableFlightModesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllowableFlightModesRequest) Reset() {
	*x = GetAllowableFlightModesRequest{}
	mi := &file_action_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllowableFlightModesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllowableFlightModesRequest) ProtoMessage() {}

func (x *GetAllowableFlightModesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllowableFlightModesRequest.ProtoReflect.Descriptor instead.
func (*GetAllowableFlightModesRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{6}
}

type SubscribeArmDisarmRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeArmDisarmRequest) Reset() {
	*x = SubscribeArmDisarmRequest{}
	mi := &file_action_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeArmDisarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeArmDisarmRequest) ProtoMessage() {}

func (x *SubscribeArmDisarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeArmDisarmRequest.ProtoReflect.Descriptor instead.
func (*SubscribeArmDisarmRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{7}
}

type SubscribeFlightModeChangeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeFlightModeChangeRequest) Reset() {
	*x = SubscribeFlightModeChangeRequest{}
	mi := &file_action_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeFlightModeChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeFlightModeChangeRequest) ProtoMessage() {}

func (x *SubscribeFlightModeChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeFlightModeChangeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeFlightModeChangeRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{8}
}

type SubscribeTakeoffRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeTakeoffRequest) Reset() {
	*x = SubscribeTakeoffRequest{}
	mi := &file_action_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTakeoffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTakeoffRequest) ProtoMessage() {}

func (x *SubscribeTakeoffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTakeoffRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTakeoffRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{9}
}

type SubscribeLandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeLandRequest) Reset() {
	*x = SubscribeLandRequest{}
	mi := &file_action_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeLandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLandRequest) ProtoMessage() {}

func (x *SubscribeLandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLandRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLandRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{10}
}

type SubscribeRebootRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRebootRequest) Reset() {
	*x = SubscribeRebootRequest{}
	mi := &file_action_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRebootRequest) ProtoMessage() {}

func (x *SubscribeRebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRebootRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRebootRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{11}
}

type SubscribeShutdownRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeShutdownRequest) Reset() {
	*x = SubscribeShutdownRequest{}
	mi := &file_action_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeShutdownRequest) ProtoMessage() {}

func (x *SubscribeShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeShutdownRequest.ProtoReflect.Descriptor instead.
func (*SubscribeShutdownRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{12}
}

type SubscribeTerminateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeTerminateRequest) Reset() {
	*x = SubscribeTerminateRequest{}
	mi := &file_action_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTerminateRequest) ProtoMessage() {}

func (x *SubscribeTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTerminateRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTerminateRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{13}
}

type ArmDisarmResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Arm                *ArmDisarm             `protobuf:"bytes,2,opt,name=arm,proto3" json:"arm,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ArmDisarmResponse) Reset() {
	*x = ArmDisarmResponse{}
	mi := &file_action_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArmDisarmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmDisarmResponse) ProtoMessage() {}

func (x *ArmDisarmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmDisarmResponse.ProtoReflect.Descriptor instead.
func (*ArmDisarmResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{14}
}

func (x *ArmDisarmResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *ArmDisarmResponse) GetArm() *ArmDisarm {
	if x != nil {
		return x.Arm
	}
	return nil
}

type FlightModeChangeResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	FlightMode         FlightMode             `protobuf:"varint,2,opt,name=flight_mode,json=flightMode,proto3,enum=mavsdk.rpc.action_server.FlightMode" json:"flight_mode,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FlightModeChangeResponse) Reset() {
	*x = FlightModeChangeResponse{}
	mi := &file_action_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlightModeChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightModeChangeResponse) ProtoMessage() {}

func (x *FlightModeChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightModeChangeResponse.ProtoReflect.Descriptor instead.
func (*FlightModeChangeResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{15}
}

func (x *FlightModeChangeResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *FlightModeChangeResponse) GetFlightMode() FlightMode {
	if x != nil {
		return x.FlightMode
	}
	return FlightMode_FLIGHT_MODE_UNKNOWN
}

type TakeoffResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Takeoff            bool                   `protobuf:"varint,2,opt,name=takeoff,proto3" json:"takeoff,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TakeoffResponse) Reset() {
	*x = TakeoffResponse{}
	mi := &file_action_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeoffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeoffResponse) ProtoMessage() {}

func (x *TakeoffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeoffResponse.ProtoReflect.Descriptor instead.
func (*TakeoffResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{16}
}

func (x *TakeoffResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *TakeoffResponse) GetTakeoff() bool {
	if x != nil {
		return x.Takeoff
	}
	return false
}

type LandResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Land               bool                   `protobuf:"varint,2,opt,name=land,proto3" json:"land,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LandResponse) Reset() {
	*x = LandResponse{}
	mi := &file_action_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandResponse) ProtoMessage() {}

func (x *LandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandResponse.ProtoReflect.Descriptor instead.
func (*LandResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{17}
}

func (x *LandResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *LandResponse) GetLand() bool {
	if x != nil {
		return x.Land
	}
	return false
}

type RebootResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Reboot             bool                   `protobuf:"varint,2,opt,name=reboot,proto3" json:"reboot,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RebootResponse) Reset() {
	*x = RebootResponse{}
	mi := &file_action_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootResponse) ProtoMessage() {}

func (x *RebootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootResponse.ProtoReflect.Descriptor instead.
func (*RebootResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{18}
}

func (x *RebootResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *RebootResponse) GetReboot() bool {
	if x != nil {
		return x.Reboot
	}
	return false
}

type ShutdownResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Shutdown           bool                   `protobuf:"varint,2,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	mi := &file_action_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{19}
}

func (x *ShutdownResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *ShutdownResponse) GetShutdown() bool {
	if x != nil {
		return x.Shutdown
	}
	return false
}

type TerminateResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Terminate          bool                   `protobuf:"varint,2,opt,name=terminate,proto3" json:"terminate,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TerminateResponse) Reset() {
	*x = TerminateResponse{}
	mi := &file_action_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateResponse) ProtoMessage() {}

func (x *TerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateResponse.ProtoReflect.Descriptor instead.
func (*TerminateResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{20}
}

func (x *TerminateResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *TerminateResponse) GetTerminate() bool {
	if x != nil {
		return x.Terminate
	}
	return false
}

type SetArmableResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetArmableResponse) Reset() {
	*x = SetArmableResponse{}
	mi := &file_action_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetArmableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArmableResponse) ProtoMessage() {}

func (x *SetArmableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArmableResponse.ProtoReflect.Descriptor instead.
func (*SetArmableResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{21}
}

func (x *SetArmableResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type SetDisarmableResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetDisarmableResponse) Reset() {
	*x = SetDisarmableResponse{}
	mi := &file_action_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDisarmableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDisarmableResponse) ProtoMessage() {}

func (x *SetDisarmableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDisarmableResponse.ProtoReflect.Descriptor instead.
func (*SetDisarmableResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{22}
}

func (x *SetDisarmableResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type SetAllowableFlightModesResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetAllowableFlightModesResponse) Reset() {
	*x = SetAllowableFlightModesResponse{}
	mi := &file_action_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAllowableFlightModesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowableFlightModesResponse) ProtoMessage() {}

func (x *SetAllowableFlightModesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowableFlightModesResponse.ProtoReflect.Descriptor instead.
func (*SetAllowableFlightModesResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{23}
}

func (x *SetAllowableFlightModesResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type SetAllowTakeoffResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetAllowTakeoffResponse) Reset() {
	*x = SetAllowTakeoffResponse{}
	mi := &file_action_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAllowTakeoffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowTakeoffResponse) ProtoMessage() {}

func (x *SetAllowTakeoffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowTakeoffResponse.ProtoReflect.Descriptor instead.
func (*SetAllowTakeoffResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{24}
}

func (x *SetAllowTakeoffResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type GetAllowableFlightModesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlightModes   *AllowableFlightModes  `protobuf:"bytes,1,opt,name=flight_modes,json=flightModes,proto3" json:"flight_modes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllowableFlightModesResponse) Reset() {
	*x = GetAllowableFlightModesResponse{}
	mi := &file_action_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllowableFlightModesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllowableFlightModesResponse) ProtoMessage() {}

func (x *GetAllowableFlightModesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllowableFlightModesResponse.ProtoReflect.Descriptor instead.
func (*GetAllowableFlightModesResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{25}
}

func (x *GetAllowableFlightModesResponse) GetFlightModes() *AllowableFlightModes {
	if x != nil {
		return x.FlightModes
	}
	return nil
}

type SetArmedStateResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetArmedStateResponse) Reset() {
	*x = SetArmedStateResponse{}
	mi := &file_action_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetArmedStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArmedStateResponse) ProtoMessage() {}

func (x *SetArmedStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArmedStateResponse.ProtoReflect.Descriptor instead.
func (*SetArmedStateResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{26}
}

func (x *SetArmedStateResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type SetFlightModeResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ActionServerResult *ActionServerResult    `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetFlightModeResponse) Reset() {
	*x = SetFlightModeResponse{}
	mi := &file_action_server_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetFlightModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFlightModeResponse) ProtoMessage() {}

func (x *SetFlightModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFlightModeResponse.ProtoReflect.Descriptor instead.
func (*SetFlightModeResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{27}
}

func (x *SetFlightModeResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

// State to check if the vehicle can transition to
// respective flightmodes
type AllowableFlightModes struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CanAutoMode      bool                   `protobuf:"varint,1,opt,name=can_auto_mode,json=canAutoMode,proto3" json:"can_auto_mode,omitempty"`                // Auto/mission mode
	CanGuidedMode    bool                   `protobuf:"varint,2,opt,name=can_guided_mode,json=canGuidedMode,proto3" json:"can_guided_mode,omitempty"`          // Guided mode
	CanStabilizeMode bool                   `protobuf:"varint,3,opt,name=can_stabilize_mode,json=canStabilizeMode,proto3" json:"can_stabilize_mode,omitempty"` // Stabilize mode
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AllowableFlightModes) Reset() {
	*x = AllowableFlightModes{}
	mi := &file_action_server_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllowableFlightModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowableFlightModes) ProtoMessage() {}

func (x *AllowableFlightModes) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowableFlightModes.ProtoReflect.Descriptor instead.
func (*AllowableFlightModes) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{28}
}

func (x *AllowableFlightModes) GetCanAutoMode() bool {
	if x != nil {
		return x.CanAutoMode
	}
	return false
}

func (x *AllowableFlightModes) GetCanGuidedMode() bool {
	if x != nil {
		return x.CanGuidedMode
	}
	return false
}

func (x *AllowableFlightModes) GetCanStabilizeMode() bool {
	if x != nil {
		return x.CanStabilizeMode
	}
	return false
}

// Arming message type
type ArmDisarm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Arm           bool                   `protobuf:"varint,1,opt,name=arm,proto3" json:"arm,omitempty"`     // Should vehicle arm
	Force         bool                   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"` // Should arm override pre-flight checks
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArmDisarm) Reset() {
	*x = ArmDisarm{}
	mi := &file_action_server_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArmDisarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmDisarm) ProtoMessage() {}

func (x *ArmDisarm) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmDisarm.ProtoReflect.Descriptor instead.
func (*ArmDisarm) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{29}
}

func (x *ArmDisarm) GetArm() bool {
	if x != nil {
		return x.Arm
	}
	return false
}

func (x *ArmDisarm) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Result type.
type ActionServerResult struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Result        ActionServerResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.action_server.ActionServerResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr     string                    `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                                   // Human-readable English string describing the result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionServerResult) Reset() {
	*x = ActionServerResult{}
	mi := &file_action_server_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionServerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionServerResult) ProtoMessage() {}

func (x *ActionServerResult) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionServerResult.ProtoReflect.Descriptor instead.
func (*ActionServerResult) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{30}
}

func (x *ActionServerResult) GetResult() ActionServerResult_Result {
	if x != nil {
		return x.Result
	}
	return ActionServerResult_RESULT_UNKNOWN
}

func (x *ActionServerResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_action_server_proto protoreflect.FileDescriptor

const file_action_server_proto_rawDesc = "" +
	"\n" +
	"\x13action_server.proto\x12\x18mavsdk.rpc.action_server\x1a\x14mavsdk_options.proto\"=\n" +
	"\x16SetAllowTakeoffRequest\x12#\n" +
	"\rallow_takeoff\x18\x01 \x01(\bR\fallowTakeoff\"R\n" +
	"\x11SetArmableRequest\x12\x18\n" +
	"\aarmable\x18\x01 \x01(\bR\aarmable\x12#\n" +
	"\rforce_armable\x18\x02 \x01(\bR\fforceArmable\"a\n" +
	"\x14SetDisarmableRequest\x12\x1e\n" +
	"\n" +
	"disarmable\x18\x01 \x01(\bR\n" +
	"disarmable\x12)\n" +
	"\x10force_disarmable\x18\x02 \x01(\bR\x0fforceDisarmable\"s\n" +
	"\x1eSetAllowableFlightModesRequest\x12Q\n" +
	"\fflight_modes\x18\x01 \x01(\v2..mavsdk.rpc.action_server.AllowableFlightModesR\vflightModes\"1\n" +
	"\x14SetArmedStateRequest\x12\x19\n" +
	"\bis_armed\x18\x01 \x01(\bR\aisArmed\"]\n" +
	"\x14SetFlightModeRequest\x12E\n" +
	"\vflight_mode\x18\x01 \x01(\x0e2$.mavsdk.rpc.action_server.FlightModeR\n" +
	"flightMode\" \n" +
	"\x1eGetAllowableFlightModesRequest\"\x1b\n" +
	"\x19SubscribeArmDisarmRequest\"\"\n" +
	" SubscribeFlightModeChangeRequest\"\x19\n" +
	"\x17SubscribeTakeoffRequest\"\x16\n" +
	"\x14SubscribeLandRequest\"\x18\n" +
	"\x16SubscribeRebootRequest\"\x1a\n" +
	"\x18SubscribeShutdownRequest\"\x1b\n" +
	"\x19SubscribeTerminateRequest\"\xaa\x01\n" +
	"\x11ArmDisarmResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\x125\n" +
	"\x03arm\x18\x02 \x01(\v2#.mavsdk.rpc.action_server.ArmDisarmR\x03arm\"\xc1\x01\n" +
	"\x18FlightModeChangeResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\x12E\n" +
	"\vflight_mode\x18\x02 \x01(\x0e2$.mavsdk.rpc.action_server.FlightModeR\n" +
	"flightMode\"\x8b\x01\n" +
	"\x0fTakeoffResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\x12\x18\n" +
	"\atakeoff\x18\x02 \x01(\bR\atakeoff\"\x82\x01\n" +
	"\fLandResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\x12\x12\n" +
	"\x04land\x18\x02 \x01(\bR\x04land\"\x88\x01\n" +
	"\x0eRebootResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\x12\x16\n" +
	"\x06reboot\x18\x02 \x01(\bR\x06reboot\"\x8e\x01\n" +
	"\x10ShutdownResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\x12\x1a\n" +
	"\bshutdown\x18\x02 \x01(\bR\bshutdown\"\x91\x01\n" +
	"\x11TerminateResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\x12\x1c\n" +
	"\tterminate\x18\x02 \x01(\bR\tterminate\"t\n" +
	"\x12SetArmableResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\"w\n" +
	"\x15SetDisarmableResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\"\x81\x01\n" +
	"\x1fSetAllowableFlightModesResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\"y\n" +
	"\x17SetAllowTakeoffResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\"t\n" +
	"\x1fGetAllowableFlightModesResponse\x12Q\n" +
	"\fflight_modes\x18\x01 \x01(\v2..mavsdk.rpc.action_server.AllowableFlightModesR\vflightModes\"w\n" +
	"\x15SetArmedStateResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\"w\n" +
	"\x15SetFlightModeResponse\x12^\n" +
	"\x14action_server_result\x18\x01 \x01(\v2,.mavsdk.rpc.action_server.ActionServerResultR\x12actionServerResult\"\x90\x01\n" +
	"\x14AllowableFlightModes\x12\"\n" +
	"\rcan_auto_mode\x18\x01 \x01(\bR\vcanAutoMode\x12&\n" +
	"\x0fcan_guided_mode\x18\x02 \x01(\bR\rcanGuidedMode\x12,\n" +
	"\x12can_stabilize_mode\x18\x03 \x01(\bR\x10canStabilizeMode\"3\n" +
	"\tArmDisarm\x12\x10\n" +
	"\x03arm\x18\x01 \x01(\bR\x03arm\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"\xfc\x03\n" +
	"\x12ActionServerResult\x12K\n" +
	"\x06result\x18\x01 \x01(\x0e23.mavsdk.rpc.action_server.ActionServerResult.ResultR\x06result\x12\x1d\n" +
	"\n" +
	"result_str\x18\x02 \x01(\tR\tresultStr\"\xf9\x02\n" +
	"\x06Result\x12\x12\n" +
	"\x0eRESULT_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eRESULT_SUCCESS\x10\x01\x12\x14\n" +
	"\x10RESULT_NO_SYSTEM\x10\x02\x12\x1b\n" +
	"\x17RESULT_CONNECTION_ERROR\x10\x03\x12\x0f\n" +
	"\vRESULT_BUSY\x10\x04\x12\x19\n" +
	"\x15RESULT_COMMAND_DENIED\x10\x05\x12.\n" +
	"*RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN\x10\x06\x12$\n" +
	" RESULT_COMMAND_DENIED_NOT_LANDED\x10\a\x12\x12\n" +
	"\x0eRESULT_TIMEOUT\x10\b\x12*\n" +
	"&RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN\x10\t\x12%\n" +
	"!RESULT_NO_VTOL_TRANSITION_SUPPORT\x10\n" +
	"\x12\x1a\n" +
	"\x16RESULT_PARAMETER_ERROR\x10\v\x12\x0f\n" +
	"\vRESULT_NEXT\x10\f*\xeb\x02\n" +
	"\n" +
	"FlightMode\x12\x17\n" +
	"\x13FLIGHT_MODE_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11FLIGHT_MODE_READY\x10\x01\x12\x17\n" +
	"\x13FLIGHT_MODE_TAKEOFF\x10\x02\x12\x14\n" +
	"\x10FLIGHT_MODE_HOLD\x10\x03\x12\x17\n" +
	"\x13FLIGHT_MODE_MISSION\x10\x04\x12 \n" +
	"\x1cFLIGHT_MODE_RETURN_TO_LAUNCH\x10\x05\x12\x14\n" +
	"\x10FLIGHT_MODE_LAND\x10\x06\x12\x18\n" +
	"\x14FLIGHT_MODE_OFFBOARD\x10\a\x12\x19\n" +
	"\x15FLIGHT_MODE_FOLLOW_ME\x10\b\x12\x16\n" +
	"\x12FLIGHT_MODE_MANUAL\x10\t\x12\x16\n" +
	"\x12FLIGHT_MODE_ALTCTL\x10\n" +
	"\x12\x16\n" +
	"\x12FLIGHT_MODE_POSCTL\x10\v\x12\x14\n" +
	"\x10FLIGHT_MODE_ACRO\x10\f\x12\x1a\n" +
	"\x16FLIGHT_MODE_STABILIZED\x10\r2\x8d\x0e\n" +
	"\x13ActionServerService\x12~\n" +
	"\x12SubscribeArmDisarm\x123.mavsdk.rpc.action_server.SubscribeArmDisarmRequest\x1a+.mavsdk.rpc.action_server.ArmDisarmResponse\"\x04\x80\xb5\x18\x000\x01\x12\x93\x01\n" +
	"\x19SubscribeFlightModeChange\x12:.mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest\x1a2.mavsdk.rpc.action_server.FlightModeChangeResponse\"\x04\x80\xb5\x18\x000\x01\x12x\n" +
	"\x10SubscribeTakeoff\x121.mavsdk.rpc.action_server.SubscribeTakeoffRequest\x1a).mavsdk.rpc.action_server.TakeoffResponse\"\x04\x80\xb5\x18\x000\x01\x12o\n" +
	"\rSubscribeLand\x12..mavsdk.rpc.action_server.SubscribeLandRequest\x1a&.mavsdk.rpc.action_server.LandResponse\"\x04\x80\xb5\x18\x000\x01\x12u\n" +
	"\x0fSubscribeReboot\x120.mavsdk.rpc.action_server.SubscribeRebootRequest\x1a(.mavsdk.rpc.action_server.RebootResponse\"\x04\x80\xb5\x18\x000\x01\x12{\n" +
	"\x11SubscribeShutdown\x122.mavsdk.rpc.action_server.SubscribeShutdownRequest\x1a*.mavsdk.rpc.action_server.ShutdownResponse\"\x04\x80\xb5\x18\x000\x01\x12~\n" +
	"\x12SubscribeTerminate\x123.mavsdk.rpc.action_server.SubscribeTerminateRequest\x1a+.mavsdk.rpc.action_server.TerminateResponse\"\x04\x80\xb5\x18\x000\x01\x12|\n" +
	"\x0fSetAllowTakeoff\x120.mavsdk.rpc.action_server.SetAllowTakeoffRequest\x1a1.mavsdk.rpc.action_server.SetAllowTakeoffResponse\"\x04\x80\xb5\x18\x01\x12m\n" +
	"\n" +
	"SetArmable\x12+.mavsdk.rpc.action_server.SetArmableRequest\x1a,.mavsdk.rpc.action_server.SetArmableResponse\"\x04\x80\xb5\x18\x01\x12v\n" +
	"\rSetDisarmable\x12..mavsdk.rpc.action_server.SetDisarmableRequest\x1a/.mavsdk.rpc.action_server.SetDisarmableResponse\"\x04\x80\xb5\x18\x01\x12\x94\x01\n" +
	"\x17SetAllowableFlightModes\x128.mavsdk.rpc.action_server.SetAllowableFlightModesRequest\x1a9.mavsdk.rpc.action_server.SetAllowableFlightModesResponse\"\x04\x80\xb5\x18\x01\x12\x94\x01\n" +
	"\x17GetAllowableFlightModes\x128.mavsdk.rpc.action_server.GetAllowableFlightModesRequest\x1a9.mavsdk.rpc.action_server.GetAllowableFlightModesResponse\"\x04\x80\xb5\x18\x01\x12v\n" +
	"\rSetArmedState\x12..mavsdk.rpc.action_server.SetArmedStateRequest\x1a/.mavsdk.rpc.action_server.SetArmedStateResponse\"\x04\x80\xb5\x18\x01\x12v\n" +
	"\rSetFlightMode\x12..mavsdk.rpc.action_server.SetFlightModeRequest\x1a/.mavsdk.rpc.action_server.SetFlightModeResponse\"\x04\x80\xb5\x18\x01B$B\x11ActionServerProtoZ\x0f.;action_serverb\x06proto3"

var (
	file_action_server_proto_rawDescOnce sync.Once
	file_action_server_proto_rawDescData []byte
)

func file_action_server_proto_rawDescGZIP() []byte {
	file_action_server_proto_rawDescOnce.Do(func() {
		file_action_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_action_server_proto_rawDesc), len(file_action_server_proto_rawDesc)))
	})
	return file_action_server_proto_rawDescData
}

var file_action_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_action_server_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_action_server_proto_goTypes = []any{
	(FlightMode)(0),                          // 0: mavsdk.rpc.action_server.FlightMode
	(ActionServerResult_Result)(0),           // 1: mavsdk.rpc.action_server.ActionServerResult.Result
	(*SetAllowTakeoffRequest)(nil),           // 2: mavsdk.rpc.action_server.SetAllowTakeoffRequest
	(*SetArmableRequest)(nil),                // 3: mavsdk.rpc.action_server.SetArmableRequest
	(*SetDisarmableRequest)(nil),             // 4: mavsdk.rpc.action_server.SetDisarmableRequest
	(*SetAllowableFlightModesRequest)(nil),   // 5: mavsdk.rpc.action_server.SetAllowableFlightModesRequest
	(*SetArmedStateRequest)(nil),             // 6: mavsdk.rpc.action_server.SetArmedStateRequest
	(*SetFlightModeRequest)(nil),             // 7: mavsdk.rpc.action_server.SetFlightModeRequest
	(*GetAllowableFlightModesRequest)(nil),   // 8: mavsdk.rpc.action_server.GetAllowableFlightModesRequest
	(*SubscribeArmDisarmRequest)(nil),        // 9: mavsdk.rpc.action_server.SubscribeArmDisarmRequest
	(*SubscribeFlightModeChangeRequest)(nil), // 10: mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest
	(*SubscribeTakeoffRequest)(nil),          // 11: mavsdk.rpc.action_server.SubscribeTakeoffRequest
	(*SubscribeLandRequest)(nil),             // 12: mavsdk.rpc.action_server.SubscribeLandRequest
	(*SubscribeRebootRequest)(nil),           // 13: mavsdk.rpc.action_server.SubscribeRebootRequest
	(*SubscribeShutdownRequest)(nil),         // 14: mavsdk.rpc.action_server.SubscribeShutdownRequest
	(*SubscribeTerminateRequest)(nil),        // 15: mavsdk.rpc.action_server.SubscribeTerminateRequest
	(*ArmDisarmResponse)(nil),                // 16: mavsdk.rpc.action_server.ArmDisarmResponse
	(*FlightModeChangeResponse)(nil),         // 17: mavsdk.rpc.action_server.FlightModeChangeResponse
	(*TakeoffResponse)(nil),                  // 18: mavsdk.rpc.action_server.TakeoffResponse
	(*LandResponse)(nil),                     // 19: mavsdk.rpc.action_server.LandResponse
	(*RebootResponse)(nil),                   // 20: mavsdk.rpc.action_server.RebootResponse
	(*ShutdownResponse)(nil),                 // 21: mavsdk.rpc.action_server.ShutdownResponse
	(*TerminateResponse)(nil),                // 22: mavsdk.rpc.action_server.TerminateResponse
	(*SetArmableResponse)(nil),               // 23: mavsdk.rpc.action_server.SetArmableResponse
	(*SetDisarmableResponse)(nil),            // 24: mavsdk.rpc.action_server.SetDisarmableResponse
	(*SetAllowableFlightModesResponse)(nil),  // 25: mavsdk.rpc.action_server.SetAllowableFlightModesResponse
	(*SetAllowTakeoffResponse)(nil),          // 26: mavsdk.rpc.action_server.SetAllowTakeoffResponse
	(*GetAllowableFlightModesResponse)(nil),  // 27: mavsdk.rpc.action_server.GetAllowableFlightModesResponse
	(*SetArmedStateResponse)(nil),            // 28: mavsdk.rpc.action_server.SetArmedStateResponse
	(*SetFlightModeResponse)(nil),            // 29: mavsdk.rpc.action_server.SetFlightModeResponse
	(*AllowableFlightModes)(nil),             // 30: mavsdk.rpc.action_server.AllowableFlightModes
	(*ArmDisarm)(nil),                        // 31: mavsdk.rpc.action_server.ArmDisarm
	(*ActionServerResult)(nil),               // 32: mavsdk.rpc.action_server.ActionServerResult
}
var file_action_server_proto_depIdxs = []int32{
	30, // 0: mavsdk.rpc.action_server.SetAllowableFlightModesRequest.flight_modes:type_name -> mavsdk.rpc.action_server.AllowableFlightModes
	0,  // 1: mavsdk.rpc.action_server.SetFlightModeRequest.flight_mode:type_name -> mavsdk.rpc.action_server.FlightMode
	32, // 2: mavsdk.rpc.action_server.ArmDisarmResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	31, // 3: mavsdk.rpc.action_server.ArmDisarmResponse.arm:type_name -> mavsdk.rpc.action_server.ArmDisarm
	32, // 4: mavsdk.rpc.action_server.FlightModeChangeResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	0,  // 5: mavsdk.rpc.action_server.FlightModeChangeResponse.flight_mode:type_name -> mavsdk.rpc.action_server.FlightMode
	32, // 6: mavsdk.rpc.action_server.TakeoffResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 7: mavsdk.rpc.action_server.LandResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 8: mavsdk.rpc.action_server.RebootResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 9: mavsdk.rpc.action_server.ShutdownResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 10: mavsdk.rpc.action_server.TerminateResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 11: mavsdk.rpc.action_server.SetArmableResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 12: mavsdk.rpc.action_server.SetDisarmableResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 13: mavsdk.rpc.action_server.SetAllowableFlightModesResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 14: mavsdk.rpc.action_server.SetAllowTakeoffResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	30, // 15: mavsdk.rpc.action_server.GetAllowableFlightModesResponse.flight_modes:type_name -> mavsdk.rpc.action_server.AllowableFlightModes
	32, // 16: mavsdk.rpc.action_server.SetArmedStateResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	32, // 17: mavsdk.rpc.action_server.SetFlightModeResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	1,  // 18: mavsdk.rpc.action_server.ActionServerResult.result:type_name -> mavsdk.rpc.action_server.ActionServerResult.Result
	9,  // 19: mavsdk.rpc.action_server.ActionServerService.SubscribeArmDisarm:input_type -> mavsdk.rpc.action_server.SubscribeArmDisarmRequest
	10, // 20: mavsdk.rpc.action_server.ActionServerService.SubscribeFlightModeChange:input_type -> mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest
	11, // 21: mavsdk.rpc.action_server.ActionServerService.SubscribeTakeoff:input_type -> mavsdk.rpc.action_server.SubscribeTakeoffRequest
	12, // 22: mavsdk.rpc.action_server.ActionServerService.SubscribeLand:input_type -> mavsdk.rpc.action_server.SubscribeLandRequest
	13, // 23: mavsdk.rpc.action_server.ActionServerService.SubscribeReboot:input_type -> mavsdk.rpc.action_server.SubscribeRebootRequest
	14, // 24: mavsdk.rpc.action_server.ActionServerService.SubscribeShutdown:input_type -> mavsdk.rpc.action_server.SubscribeShutdownRequest
	15, // 25: mavsdk.rpc.action_server.ActionServerService.SubscribeTerminate:input_type -> mavsdk.rpc.action_server.SubscribeTerminateRequest
	2,  // 26: mavsdk.rpc.action_server.ActionServerService.SetAllowTakeoff:input_type -> mavsdk.rpc.action_server.SetAllowTakeoffRequest
	3,  // 27: mavsdk.rpc.action_server.ActionServerService.SetArmable:input_type -> mavsdk.rpc.action_server.SetArmableRequest
	4,  // 28: mavsdk.rpc.action_server.ActionServerService.SetDisarmable:input_type -> mavsdk.rpc.action_server.SetDisarmableRequest
	5,  // 29: mavsdk.rpc.action_server.ActionServerService.SetAllowableFlightModes:input_type -> mavsdk.rpc.action_server.SetAllowableFlightModesRequest
	8,  // 30: mavsdk.rpc.action_server.ActionServerService.GetAllowableFlightModes:input_type -> mavsdk.rpc.action_server.GetAllowableFlightModesRequest
	6,  // 31: mavsdk.rpc.action_server.ActionServerService.SetArmedState:input_type -> mavsdk.rpc.action_server.SetArmedStateRequest
	7,  // 32: mavsdk.rpc.action_server.ActionServerService.SetFlightMode:input_type -> mavsdk.rpc.action_server.SetFlightModeRequest
	16, // 33: mavsdk.rpc.action_server.ActionServerService.SubscribeArmDisarm:output_type -> mavsdk.rpc.action_server.ArmDisarmResponse
	17, // 34: mavsdk.rpc.action_server.ActionServerService.SubscribeFlightModeChange:output_type -> mavsdk.rpc.action_server.FlightModeChangeResponse
	18, // 35: mavsdk.rpc.action_server.ActionServerService.SubscribeTakeoff:output_type -> mavsdk.rpc.action_server.TakeoffResponse
	19, // 36: mavsdk.rpc.action_server.ActionServerService.SubscribeLand:output_type -> mavsdk.rpc.action_server.LandResponse
	20, // 37: mavsdk.rpc.action_server.ActionServerService.SubscribeReboot:output_type -> mavsdk.rpc.action_server.RebootResponse
	21, // 38: mavsdk.rpc.action_server.ActionServerService.SubscribeShutdown:output_type -> mavsdk.rpc.action_server.ShutdownResponse
	22, // 39: mavsdk.rpc.action_server.ActionServerService.SubscribeTerminate:output_type -> mavsdk.rpc.action_server.TerminateResponse
	26, // 40: mavsdk.rpc.action_server.ActionServerService.SetAllowTakeoff:output_type -> mavsdk.rpc.action_server.SetAllowTakeoffResponse
	23, // 41: mavsdk.rpc.action_server.ActionServerService.SetArmable:output_type -> mavsdk.rpc.action_server.SetArmableResponse
	24, // 42: mavsdk.rpc.action_server.ActionServerService.SetDisarmable:output_type -> mavsdk.rpc.action_server.SetDisarmableResponse
	25, // 43: mavsdk.rpc.action_server.ActionServerService.SetAllowableFlightModes:output_type -> mavsdk.rpc.action_server.SetAllowableFlightModesResponse
	27, // 44: mavsdk.rpc.action_server.ActionServerService.GetAllowableFlightModes:output_type -> mavsdk.rpc.action_server.GetAllowableFlightModesResponse
	28, // 45: mavsdk.rpc.action_server.ActionServerService.SetArmedState:output_type -> mavsdk.rpc.action_server.SetArmedStateResponse
	29, // 46: mavsdk.rpc.action_server.ActionServerService.SetFlightMode:output_type -> mavsdk.rpc.action_server.SetFlightModeResponse
	33, // [33:47] is the sub-list for method output_type
	19, // [19:33] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_action_server_proto_init() }
func file_action_server_proto_init() {
	if File_action_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_action_server_proto_rawDesc), len(file_action_server_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_action_server_proto_goTypes,
		DependencyIndexes: file_action_server_proto_depIdxs,
		EnumInfos:         file_action_server_proto_enumTypes,
		MessageInfos:      file_action_server_proto_msgTypes,
	}.Build()
	File_action_server_proto = out.File
	file_action_server_proto_goTypes = nil
	file_action_server_proto_depIdxs = nil
}
