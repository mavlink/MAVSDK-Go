// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: action_server.proto

package action_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flight modes.
//
// For more information about flight modes, check out
// https://docs.px4.io/master/en/config/flight_mode.html.
type FlightMode int32

const (
	FlightMode_FLIGHT_MODE_UNKNOWN          FlightMode = 0  // Mode not known
	FlightMode_FLIGHT_MODE_READY            FlightMode = 1  // Armed and ready to take off
	FlightMode_FLIGHT_MODE_TAKEOFF          FlightMode = 2  // Taking off
	FlightMode_FLIGHT_MODE_HOLD             FlightMode = 3  // Holding (hovering in place (or circling for fixed-wing vehicles)
	FlightMode_FLIGHT_MODE_MISSION          FlightMode = 4  // In mission
	FlightMode_FLIGHT_MODE_RETURN_TO_LAUNCH FlightMode = 5  // Returning to launch position (then landing)
	FlightMode_FLIGHT_MODE_LAND             FlightMode = 6  // Landing
	FlightMode_FLIGHT_MODE_OFFBOARD         FlightMode = 7  // In 'offboard' mode
	FlightMode_FLIGHT_MODE_FOLLOW_ME        FlightMode = 8  // In 'follow-me' mode
	FlightMode_FLIGHT_MODE_MANUAL           FlightMode = 9  // In 'Manual' mode
	FlightMode_FLIGHT_MODE_ALTCTL           FlightMode = 10 // In 'Altitude Control' mode
	FlightMode_FLIGHT_MODE_POSCTL           FlightMode = 11 // In 'Position Control' mode
	FlightMode_FLIGHT_MODE_ACRO             FlightMode = 12 // In 'Acro' mode
	FlightMode_FLIGHT_MODE_STABILIZED       FlightMode = 13 // In 'Stabilize' mode
)

// Enum value maps for FlightMode.
var (
	FlightMode_name = map[int32]string{
		0:  "FLIGHT_MODE_UNKNOWN",
		1:  "FLIGHT_MODE_READY",
		2:  "FLIGHT_MODE_TAKEOFF",
		3:  "FLIGHT_MODE_HOLD",
		4:  "FLIGHT_MODE_MISSION",
		5:  "FLIGHT_MODE_RETURN_TO_LAUNCH",
		6:  "FLIGHT_MODE_LAND",
		7:  "FLIGHT_MODE_OFFBOARD",
		8:  "FLIGHT_MODE_FOLLOW_ME",
		9:  "FLIGHT_MODE_MANUAL",
		10: "FLIGHT_MODE_ALTCTL",
		11: "FLIGHT_MODE_POSCTL",
		12: "FLIGHT_MODE_ACRO",
		13: "FLIGHT_MODE_STABILIZED",
	}
	FlightMode_value = map[string]int32{
		"FLIGHT_MODE_UNKNOWN":          0,
		"FLIGHT_MODE_READY":            1,
		"FLIGHT_MODE_TAKEOFF":          2,
		"FLIGHT_MODE_HOLD":             3,
		"FLIGHT_MODE_MISSION":          4,
		"FLIGHT_MODE_RETURN_TO_LAUNCH": 5,
		"FLIGHT_MODE_LAND":             6,
		"FLIGHT_MODE_OFFBOARD":         7,
		"FLIGHT_MODE_FOLLOW_ME":        8,
		"FLIGHT_MODE_MANUAL":           9,
		"FLIGHT_MODE_ALTCTL":           10,
		"FLIGHT_MODE_POSCTL":           11,
		"FLIGHT_MODE_ACRO":             12,
		"FLIGHT_MODE_STABILIZED":       13,
	}
)

func (x FlightMode) Enum() *FlightMode {
	p := new(FlightMode)
	*p = x
	return p
}

func (x FlightMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightMode) Descriptor() protoreflect.EnumDescriptor {
	return file_action_server_proto_enumTypes[0].Descriptor()
}

func (FlightMode) Type() protoreflect.EnumType {
	return &file_action_server_proto_enumTypes[0]
}

func (x FlightMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightMode.Descriptor instead.
func (FlightMode) EnumDescriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{0}
}

// Possible results returned for action requests.
type ActionServerResult_Result int32

const (
	ActionServerResult_RESULT_UNKNOWN                             ActionServerResult_Result = 0  // Unknown result
	ActionServerResult_RESULT_SUCCESS                             ActionServerResult_Result = 1  // Request was successful
	ActionServerResult_RESULT_NO_SYSTEM                           ActionServerResult_Result = 2  // No system is connected
	ActionServerResult_RESULT_CONNECTION_ERROR                    ActionServerResult_Result = 3  // Connection error
	ActionServerResult_RESULT_BUSY                                ActionServerResult_Result = 4  // Vehicle is busy
	ActionServerResult_RESULT_COMMAND_DENIED                      ActionServerResult_Result = 5  // Command refused by vehicle
	ActionServerResult_RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN ActionServerResult_Result = 6  // Command refused because landed state is unknown
	ActionServerResult_RESULT_COMMAND_DENIED_NOT_LANDED           ActionServerResult_Result = 7  // Command refused because vehicle not landed
	ActionServerResult_RESULT_TIMEOUT                             ActionServerResult_Result = 8  // Request timed out
	ActionServerResult_RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN     ActionServerResult_Result = 9  // Hybrid/VTOL transition support is unknown
	ActionServerResult_RESULT_NO_VTOL_TRANSITION_SUPPORT          ActionServerResult_Result = 10 // Vehicle does not support hybrid/VTOL transitions
	ActionServerResult_RESULT_PARAMETER_ERROR                     ActionServerResult_Result = 11 // Error getting or setting parameter
	ActionServerResult_RESULT_NEXT                                ActionServerResult_Result = 12 // Intermediate message showing progress or instructions on the next steps
)

// Enum value maps for ActionServerResult_Result.
var (
	ActionServerResult_Result_name = map[int32]string{
		0:  "RESULT_UNKNOWN",
		1:  "RESULT_SUCCESS",
		2:  "RESULT_NO_SYSTEM",
		3:  "RESULT_CONNECTION_ERROR",
		4:  "RESULT_BUSY",
		5:  "RESULT_COMMAND_DENIED",
		6:  "RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN",
		7:  "RESULT_COMMAND_DENIED_NOT_LANDED",
		8:  "RESULT_TIMEOUT",
		9:  "RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN",
		10: "RESULT_NO_VTOL_TRANSITION_SUPPORT",
		11: "RESULT_PARAMETER_ERROR",
		12: "RESULT_NEXT",
	}
	ActionServerResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":                             0,
		"RESULT_SUCCESS":                             1,
		"RESULT_NO_SYSTEM":                           2,
		"RESULT_CONNECTION_ERROR":                    3,
		"RESULT_BUSY":                                4,
		"RESULT_COMMAND_DENIED":                      5,
		"RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN": 6,
		"RESULT_COMMAND_DENIED_NOT_LANDED":           7,
		"RESULT_TIMEOUT":                             8,
		"RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN":     9,
		"RESULT_NO_VTOL_TRANSITION_SUPPORT":          10,
		"RESULT_PARAMETER_ERROR":                     11,
		"RESULT_NEXT":                                12,
	}
)

func (x ActionServerResult_Result) Enum() *ActionServerResult_Result {
	p := new(ActionServerResult_Result)
	*p = x
	return p
}

func (x ActionServerResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionServerResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_action_server_proto_enumTypes[1].Descriptor()
}

func (ActionServerResult_Result) Type() protoreflect.EnumType {
	return &file_action_server_proto_enumTypes[1]
}

func (x ActionServerResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionServerResult_Result.Descriptor instead.
func (ActionServerResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{26, 0}
}

type SetAllowTakeoffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowTakeoff bool `protobuf:"varint,1,opt,name=allow_takeoff,json=allowTakeoff,proto3" json:"allow_takeoff,omitempty"` // Is takeoff allowed?
}

func (x *SetAllowTakeoffRequest) Reset() {
	*x = SetAllowTakeoffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllowTakeoffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowTakeoffRequest) ProtoMessage() {}

func (x *SetAllowTakeoffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowTakeoffRequest.ProtoReflect.Descriptor instead.
func (*SetAllowTakeoffRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{0}
}

func (x *SetAllowTakeoffRequest) GetAllowTakeoff() bool {
	if x != nil {
		return x.AllowTakeoff
	}
	return false
}

type SetArmableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Armable      bool `protobuf:"varint,1,opt,name=armable,proto3" json:"armable,omitempty"`                               // Is Armable now?
	ForceArmable bool `protobuf:"varint,2,opt,name=force_armable,json=forceArmable,proto3" json:"force_armable,omitempty"` // Is armable with force?
}

func (x *SetArmableRequest) Reset() {
	*x = SetArmableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetArmableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArmableRequest) ProtoMessage() {}

func (x *SetArmableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArmableRequest.ProtoReflect.Descriptor instead.
func (*SetArmableRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{1}
}

func (x *SetArmableRequest) GetArmable() bool {
	if x != nil {
		return x.Armable
	}
	return false
}

func (x *SetArmableRequest) GetForceArmable() bool {
	if x != nil {
		return x.ForceArmable
	}
	return false
}

type SetDisarmableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disarmable      bool `protobuf:"varint,1,opt,name=disarmable,proto3" json:"disarmable,omitempty"`                                  // Is disarmable now?
	ForceDisarmable bool `protobuf:"varint,2,opt,name=force_disarmable,json=forceDisarmable,proto3" json:"force_disarmable,omitempty"` // Is disarmable with force? (Kill)
}

func (x *SetDisarmableRequest) Reset() {
	*x = SetDisarmableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDisarmableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDisarmableRequest) ProtoMessage() {}

func (x *SetDisarmableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDisarmableRequest.ProtoReflect.Descriptor instead.
func (*SetDisarmableRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{2}
}

func (x *SetDisarmableRequest) GetDisarmable() bool {
	if x != nil {
		return x.Disarmable
	}
	return false
}

func (x *SetDisarmableRequest) GetForceDisarmable() bool {
	if x != nil {
		return x.ForceDisarmable
	}
	return false
}

type SetAllowableFlightModesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightModes *AllowableFlightModes `protobuf:"bytes,1,opt,name=flight_modes,json=flightModes,proto3" json:"flight_modes,omitempty"`
}

func (x *SetAllowableFlightModesRequest) Reset() {
	*x = SetAllowableFlightModesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllowableFlightModesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowableFlightModesRequest) ProtoMessage() {}

func (x *SetAllowableFlightModesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowableFlightModesRequest.ProtoReflect.Descriptor instead.
func (*SetAllowableFlightModesRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{3}
}

func (x *SetAllowableFlightModesRequest) GetFlightModes() *AllowableFlightModes {
	if x != nil {
		return x.FlightModes
	}
	return nil
}

type GetAllowableFlightModesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllowableFlightModesRequest) Reset() {
	*x = GetAllowableFlightModesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllowableFlightModesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllowableFlightModesRequest) ProtoMessage() {}

func (x *GetAllowableFlightModesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllowableFlightModesRequest.ProtoReflect.Descriptor instead.
func (*GetAllowableFlightModesRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{4}
}

type SubscribeArmDisarmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeArmDisarmRequest) Reset() {
	*x = SubscribeArmDisarmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeArmDisarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeArmDisarmRequest) ProtoMessage() {}

func (x *SubscribeArmDisarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeArmDisarmRequest.ProtoReflect.Descriptor instead.
func (*SubscribeArmDisarmRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{5}
}

type SubscribeFlightModeChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeFlightModeChangeRequest) Reset() {
	*x = SubscribeFlightModeChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeFlightModeChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeFlightModeChangeRequest) ProtoMessage() {}

func (x *SubscribeFlightModeChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeFlightModeChangeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeFlightModeChangeRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{6}
}

type SubscribeTakeoffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTakeoffRequest) Reset() {
	*x = SubscribeTakeoffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTakeoffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTakeoffRequest) ProtoMessage() {}

func (x *SubscribeTakeoffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTakeoffRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTakeoffRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{7}
}

type SubscribeLandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeLandRequest) Reset() {
	*x = SubscribeLandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLandRequest) ProtoMessage() {}

func (x *SubscribeLandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLandRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLandRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{8}
}

type SubscribeRebootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeRebootRequest) Reset() {
	*x = SubscribeRebootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRebootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRebootRequest) ProtoMessage() {}

func (x *SubscribeRebootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRebootRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRebootRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{9}
}

type SubscribeShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeShutdownRequest) Reset() {
	*x = SubscribeShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeShutdownRequest) ProtoMessage() {}

func (x *SubscribeShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeShutdownRequest.ProtoReflect.Descriptor instead.
func (*SubscribeShutdownRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{10}
}

type SubscribeTerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTerminateRequest) Reset() {
	*x = SubscribeTerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTerminateRequest) ProtoMessage() {}

func (x *SubscribeTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTerminateRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTerminateRequest) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{11}
}

type ArmDisarmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Arm                *ArmDisarm          `protobuf:"bytes,2,opt,name=arm,proto3" json:"arm,omitempty"`
}

func (x *ArmDisarmResponse) Reset() {
	*x = ArmDisarmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmDisarmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmDisarmResponse) ProtoMessage() {}

func (x *ArmDisarmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmDisarmResponse.ProtoReflect.Descriptor instead.
func (*ArmDisarmResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{12}
}

func (x *ArmDisarmResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *ArmDisarmResponse) GetArm() *ArmDisarm {
	if x != nil {
		return x.Arm
	}
	return nil
}

type FlightModeChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	FlightMode         FlightMode          `protobuf:"varint,2,opt,name=flight_mode,json=flightMode,proto3,enum=mavsdk.rpc.action_server.FlightMode" json:"flight_mode,omitempty"`
}

func (x *FlightModeChangeResponse) Reset() {
	*x = FlightModeChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightModeChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightModeChangeResponse) ProtoMessage() {}

func (x *FlightModeChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightModeChangeResponse.ProtoReflect.Descriptor instead.
func (*FlightModeChangeResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{13}
}

func (x *FlightModeChangeResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *FlightModeChangeResponse) GetFlightMode() FlightMode {
	if x != nil {
		return x.FlightMode
	}
	return FlightMode_FLIGHT_MODE_UNKNOWN
}

type TakeoffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Takeoff            bool                `protobuf:"varint,2,opt,name=takeoff,proto3" json:"takeoff,omitempty"`
}

func (x *TakeoffResponse) Reset() {
	*x = TakeoffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeoffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeoffResponse) ProtoMessage() {}

func (x *TakeoffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeoffResponse.ProtoReflect.Descriptor instead.
func (*TakeoffResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{14}
}

func (x *TakeoffResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *TakeoffResponse) GetTakeoff() bool {
	if x != nil {
		return x.Takeoff
	}
	return false
}

type LandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Land               bool                `protobuf:"varint,2,opt,name=land,proto3" json:"land,omitempty"`
}

func (x *LandResponse) Reset() {
	*x = LandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandResponse) ProtoMessage() {}

func (x *LandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandResponse.ProtoReflect.Descriptor instead.
func (*LandResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{15}
}

func (x *LandResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *LandResponse) GetLand() bool {
	if x != nil {
		return x.Land
	}
	return false
}

type RebootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Reboot             bool                `protobuf:"varint,2,opt,name=reboot,proto3" json:"reboot,omitempty"`
}

func (x *RebootResponse) Reset() {
	*x = RebootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootResponse) ProtoMessage() {}

func (x *RebootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootResponse.ProtoReflect.Descriptor instead.
func (*RebootResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{16}
}

func (x *RebootResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *RebootResponse) GetReboot() bool {
	if x != nil {
		return x.Reboot
	}
	return false
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Shutdown           bool                `protobuf:"varint,2,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{17}
}

func (x *ShutdownResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *ShutdownResponse) GetShutdown() bool {
	if x != nil {
		return x.Shutdown
	}
	return false
}

type TerminateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
	Terminate          bool                `protobuf:"varint,2,opt,name=terminate,proto3" json:"terminate,omitempty"`
}

func (x *TerminateResponse) Reset() {
	*x = TerminateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateResponse) ProtoMessage() {}

func (x *TerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateResponse.ProtoReflect.Descriptor instead.
func (*TerminateResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{18}
}

func (x *TerminateResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

func (x *TerminateResponse) GetTerminate() bool {
	if x != nil {
		return x.Terminate
	}
	return false
}

type SetArmableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
}

func (x *SetArmableResponse) Reset() {
	*x = SetArmableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetArmableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArmableResponse) ProtoMessage() {}

func (x *SetArmableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArmableResponse.ProtoReflect.Descriptor instead.
func (*SetArmableResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{19}
}

func (x *SetArmableResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type SetDisarmableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
}

func (x *SetDisarmableResponse) Reset() {
	*x = SetDisarmableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDisarmableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDisarmableResponse) ProtoMessage() {}

func (x *SetDisarmableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDisarmableResponse.ProtoReflect.Descriptor instead.
func (*SetDisarmableResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{20}
}

func (x *SetDisarmableResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type SetAllowableFlightModesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
}

func (x *SetAllowableFlightModesResponse) Reset() {
	*x = SetAllowableFlightModesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllowableFlightModesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowableFlightModesResponse) ProtoMessage() {}

func (x *SetAllowableFlightModesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowableFlightModesResponse.ProtoReflect.Descriptor instead.
func (*SetAllowableFlightModesResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{21}
}

func (x *SetAllowableFlightModesResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type SetAllowTakeoffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionServerResult *ActionServerResult `protobuf:"bytes,1,opt,name=action_server_result,json=actionServerResult,proto3" json:"action_server_result,omitempty"`
}

func (x *SetAllowTakeoffResponse) Reset() {
	*x = SetAllowTakeoffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllowTakeoffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllowTakeoffResponse) ProtoMessage() {}

func (x *SetAllowTakeoffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllowTakeoffResponse.ProtoReflect.Descriptor instead.
func (*SetAllowTakeoffResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{22}
}

func (x *SetAllowTakeoffResponse) GetActionServerResult() *ActionServerResult {
	if x != nil {
		return x.ActionServerResult
	}
	return nil
}

type GetAllowableFlightModesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightModes *AllowableFlightModes `protobuf:"bytes,1,opt,name=flight_modes,json=flightModes,proto3" json:"flight_modes,omitempty"`
}

func (x *GetAllowableFlightModesResponse) Reset() {
	*x = GetAllowableFlightModesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllowableFlightModesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllowableFlightModesResponse) ProtoMessage() {}

func (x *GetAllowableFlightModesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllowableFlightModesResponse.ProtoReflect.Descriptor instead.
func (*GetAllowableFlightModesResponse) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{23}
}

func (x *GetAllowableFlightModesResponse) GetFlightModes() *AllowableFlightModes {
	if x != nil {
		return x.FlightModes
	}
	return nil
}

// State to check if the vehicle can transition to
// respective flightmodes
type AllowableFlightModes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanAutoMode      bool `protobuf:"varint,1,opt,name=can_auto_mode,json=canAutoMode,proto3" json:"can_auto_mode,omitempty"`                // Auto/mission mode
	CanGuidedMode    bool `protobuf:"varint,2,opt,name=can_guided_mode,json=canGuidedMode,proto3" json:"can_guided_mode,omitempty"`          // Guided mode
	CanStabilizeMode bool `protobuf:"varint,3,opt,name=can_stabilize_mode,json=canStabilizeMode,proto3" json:"can_stabilize_mode,omitempty"` // Stabilize mode
}

func (x *AllowableFlightModes) Reset() {
	*x = AllowableFlightModes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowableFlightModes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowableFlightModes) ProtoMessage() {}

func (x *AllowableFlightModes) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowableFlightModes.ProtoReflect.Descriptor instead.
func (*AllowableFlightModes) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{24}
}

func (x *AllowableFlightModes) GetCanAutoMode() bool {
	if x != nil {
		return x.CanAutoMode
	}
	return false
}

func (x *AllowableFlightModes) GetCanGuidedMode() bool {
	if x != nil {
		return x.CanGuidedMode
	}
	return false
}

func (x *AllowableFlightModes) GetCanStabilizeMode() bool {
	if x != nil {
		return x.CanStabilizeMode
	}
	return false
}

// Arming message type
type ArmDisarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arm   bool `protobuf:"varint,1,opt,name=arm,proto3" json:"arm,omitempty"`     // Should vehicle arm
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"` // Should arm override pre-flight checks
}

func (x *ArmDisarm) Reset() {
	*x = ArmDisarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmDisarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmDisarm) ProtoMessage() {}

func (x *ArmDisarm) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmDisarm.ProtoReflect.Descriptor instead.
func (*ArmDisarm) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{25}
}

func (x *ArmDisarm) GetArm() bool {
	if x != nil {
		return x.Arm
	}
	return false
}

func (x *ArmDisarm) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Result type.
type ActionServerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    ActionServerResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.action_server.ActionServerResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string                    `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                                   // Human-readable English string describing the result
}

func (x *ActionServerResult) Reset() {
	*x = ActionServerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionServerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionServerResult) ProtoMessage() {}

func (x *ActionServerResult) ProtoReflect() protoreflect.Message {
	mi := &file_action_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionServerResult.ProtoReflect.Descriptor instead.
func (*ActionServerResult) Descriptor() ([]byte, []int) {
	return file_action_server_proto_rawDescGZIP(), []int{26}
}

func (x *ActionServerResult) GetResult() ActionServerResult_Result {
	if x != nil {
		return x.Result
	}
	return ActionServerResult_RESULT_UNKNOWN
}

func (x *ActionServerResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_action_server_proto protoreflect.FileDescriptor

var file_action_server_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x14, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x6b,
	0x65, 0x6f, 0x66, 0x66, 0x22, 0x52, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x72, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x41, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x61, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x72, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x73, 0x0a, 0x1e, 0x53,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x72, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x22, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16,
	0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1a, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x41, 0x72,
	0x6d, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x35, 0x0a, 0x03, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x72,
	0x6d, 0x52, 0x03, 0x61, 0x72, 0x6d, 0x22, 0xc1, 0x01, 0x0a, 0x18, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x54,
	0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x1f, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x79, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x6b, 0x65,
	0x6f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x74, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x09, 0x41, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x72,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x61, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xfc, 0x03, 0x0a, 0x12, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x22, 0xf9, 0x02, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x55, 0x53,
	0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x56, 0x54, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e,
	0x4f, 0x5f, 0x56, 0x54, 0x4f, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x0c, 0x2a, 0xeb, 0x02, 0x0a, 0x0a, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4f, 0x46, 0x46, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12,
	0x20, 0x0a, 0x1c, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x43, 0x54, 0x4c, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x43,
	0x54, 0x4c, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x52, 0x4f, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x0d, 0x32, 0x9d, 0x0c, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x72, 0x6d, 0x44, 0x69,
	0x73, 0x61, 0x72, 0x6d, 0x12, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x61,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x93,
	0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5,
	0x18, 0x00, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x12, 0x31, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x6f,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x6e, 0x64, 0x12,
	0x2e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12,
	0x75, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x12, 0x30, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04,
	0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x7b, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x32, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18,
	0x00, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18,
	0x00, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54,
	0x61, 0x6b, 0x65, 0x6f, 0x66, 0x66, 0x12, 0x30, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x66,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x6b, 0x65,
	0x6f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x12, 0x6d, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x72,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x12, 0x76, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x61, 0x72, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12,
	0x94, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x42, 0x24, 0x42, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0f, 0x2e, 0x3b, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_action_server_proto_rawDescOnce sync.Once
	file_action_server_proto_rawDescData = file_action_server_proto_rawDesc
)

func file_action_server_proto_rawDescGZIP() []byte {
	file_action_server_proto_rawDescOnce.Do(func() {
		file_action_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_action_server_proto_rawDescData)
	})
	return file_action_server_proto_rawDescData
}

var file_action_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_action_server_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_action_server_proto_goTypes = []any{
	(FlightMode)(0),                          // 0: mavsdk.rpc.action_server.FlightMode
	(ActionServerResult_Result)(0),           // 1: mavsdk.rpc.action_server.ActionServerResult.Result
	(*SetAllowTakeoffRequest)(nil),           // 2: mavsdk.rpc.action_server.SetAllowTakeoffRequest
	(*SetArmableRequest)(nil),                // 3: mavsdk.rpc.action_server.SetArmableRequest
	(*SetDisarmableRequest)(nil),             // 4: mavsdk.rpc.action_server.SetDisarmableRequest
	(*SetAllowableFlightModesRequest)(nil),   // 5: mavsdk.rpc.action_server.SetAllowableFlightModesRequest
	(*GetAllowableFlightModesRequest)(nil),   // 6: mavsdk.rpc.action_server.GetAllowableFlightModesRequest
	(*SubscribeArmDisarmRequest)(nil),        // 7: mavsdk.rpc.action_server.SubscribeArmDisarmRequest
	(*SubscribeFlightModeChangeRequest)(nil), // 8: mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest
	(*SubscribeTakeoffRequest)(nil),          // 9: mavsdk.rpc.action_server.SubscribeTakeoffRequest
	(*SubscribeLandRequest)(nil),             // 10: mavsdk.rpc.action_server.SubscribeLandRequest
	(*SubscribeRebootRequest)(nil),           // 11: mavsdk.rpc.action_server.SubscribeRebootRequest
	(*SubscribeShutdownRequest)(nil),         // 12: mavsdk.rpc.action_server.SubscribeShutdownRequest
	(*SubscribeTerminateRequest)(nil),        // 13: mavsdk.rpc.action_server.SubscribeTerminateRequest
	(*ArmDisarmResponse)(nil),                // 14: mavsdk.rpc.action_server.ArmDisarmResponse
	(*FlightModeChangeResponse)(nil),         // 15: mavsdk.rpc.action_server.FlightModeChangeResponse
	(*TakeoffResponse)(nil),                  // 16: mavsdk.rpc.action_server.TakeoffResponse
	(*LandResponse)(nil),                     // 17: mavsdk.rpc.action_server.LandResponse
	(*RebootResponse)(nil),                   // 18: mavsdk.rpc.action_server.RebootResponse
	(*ShutdownResponse)(nil),                 // 19: mavsdk.rpc.action_server.ShutdownResponse
	(*TerminateResponse)(nil),                // 20: mavsdk.rpc.action_server.TerminateResponse
	(*SetArmableResponse)(nil),               // 21: mavsdk.rpc.action_server.SetArmableResponse
	(*SetDisarmableResponse)(nil),            // 22: mavsdk.rpc.action_server.SetDisarmableResponse
	(*SetAllowableFlightModesResponse)(nil),  // 23: mavsdk.rpc.action_server.SetAllowableFlightModesResponse
	(*SetAllowTakeoffResponse)(nil),          // 24: mavsdk.rpc.action_server.SetAllowTakeoffResponse
	(*GetAllowableFlightModesResponse)(nil),  // 25: mavsdk.rpc.action_server.GetAllowableFlightModesResponse
	(*AllowableFlightModes)(nil),             // 26: mavsdk.rpc.action_server.AllowableFlightModes
	(*ArmDisarm)(nil),                        // 27: mavsdk.rpc.action_server.ArmDisarm
	(*ActionServerResult)(nil),               // 28: mavsdk.rpc.action_server.ActionServerResult
}
var file_action_server_proto_depIdxs = []int32{
	26, // 0: mavsdk.rpc.action_server.SetAllowableFlightModesRequest.flight_modes:type_name -> mavsdk.rpc.action_server.AllowableFlightModes
	28, // 1: mavsdk.rpc.action_server.ArmDisarmResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	27, // 2: mavsdk.rpc.action_server.ArmDisarmResponse.arm:type_name -> mavsdk.rpc.action_server.ArmDisarm
	28, // 3: mavsdk.rpc.action_server.FlightModeChangeResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	0,  // 4: mavsdk.rpc.action_server.FlightModeChangeResponse.flight_mode:type_name -> mavsdk.rpc.action_server.FlightMode
	28, // 5: mavsdk.rpc.action_server.TakeoffResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	28, // 6: mavsdk.rpc.action_server.LandResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	28, // 7: mavsdk.rpc.action_server.RebootResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	28, // 8: mavsdk.rpc.action_server.ShutdownResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	28, // 9: mavsdk.rpc.action_server.TerminateResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	28, // 10: mavsdk.rpc.action_server.SetArmableResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	28, // 11: mavsdk.rpc.action_server.SetDisarmableResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	28, // 12: mavsdk.rpc.action_server.SetAllowableFlightModesResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	28, // 13: mavsdk.rpc.action_server.SetAllowTakeoffResponse.action_server_result:type_name -> mavsdk.rpc.action_server.ActionServerResult
	26, // 14: mavsdk.rpc.action_server.GetAllowableFlightModesResponse.flight_modes:type_name -> mavsdk.rpc.action_server.AllowableFlightModes
	1,  // 15: mavsdk.rpc.action_server.ActionServerResult.result:type_name -> mavsdk.rpc.action_server.ActionServerResult.Result
	7,  // 16: mavsdk.rpc.action_server.ActionServerService.SubscribeArmDisarm:input_type -> mavsdk.rpc.action_server.SubscribeArmDisarmRequest
	8,  // 17: mavsdk.rpc.action_server.ActionServerService.SubscribeFlightModeChange:input_type -> mavsdk.rpc.action_server.SubscribeFlightModeChangeRequest
	9,  // 18: mavsdk.rpc.action_server.ActionServerService.SubscribeTakeoff:input_type -> mavsdk.rpc.action_server.SubscribeTakeoffRequest
	10, // 19: mavsdk.rpc.action_server.ActionServerService.SubscribeLand:input_type -> mavsdk.rpc.action_server.SubscribeLandRequest
	11, // 20: mavsdk.rpc.action_server.ActionServerService.SubscribeReboot:input_type -> mavsdk.rpc.action_server.SubscribeRebootRequest
	12, // 21: mavsdk.rpc.action_server.ActionServerService.SubscribeShutdown:input_type -> mavsdk.rpc.action_server.SubscribeShutdownRequest
	13, // 22: mavsdk.rpc.action_server.ActionServerService.SubscribeTerminate:input_type -> mavsdk.rpc.action_server.SubscribeTerminateRequest
	2,  // 23: mavsdk.rpc.action_server.ActionServerService.SetAllowTakeoff:input_type -> mavsdk.rpc.action_server.SetAllowTakeoffRequest
	3,  // 24: mavsdk.rpc.action_server.ActionServerService.SetArmable:input_type -> mavsdk.rpc.action_server.SetArmableRequest
	4,  // 25: mavsdk.rpc.action_server.ActionServerService.SetDisarmable:input_type -> mavsdk.rpc.action_server.SetDisarmableRequest
	5,  // 26: mavsdk.rpc.action_server.ActionServerService.SetAllowableFlightModes:input_type -> mavsdk.rpc.action_server.SetAllowableFlightModesRequest
	6,  // 27: mavsdk.rpc.action_server.ActionServerService.GetAllowableFlightModes:input_type -> mavsdk.rpc.action_server.GetAllowableFlightModesRequest
	14, // 28: mavsdk.rpc.action_server.ActionServerService.SubscribeArmDisarm:output_type -> mavsdk.rpc.action_server.ArmDisarmResponse
	15, // 29: mavsdk.rpc.action_server.ActionServerService.SubscribeFlightModeChange:output_type -> mavsdk.rpc.action_server.FlightModeChangeResponse
	16, // 30: mavsdk.rpc.action_server.ActionServerService.SubscribeTakeoff:output_type -> mavsdk.rpc.action_server.TakeoffResponse
	17, // 31: mavsdk.rpc.action_server.ActionServerService.SubscribeLand:output_type -> mavsdk.rpc.action_server.LandResponse
	18, // 32: mavsdk.rpc.action_server.ActionServerService.SubscribeReboot:output_type -> mavsdk.rpc.action_server.RebootResponse
	19, // 33: mavsdk.rpc.action_server.ActionServerService.SubscribeShutdown:output_type -> mavsdk.rpc.action_server.ShutdownResponse
	20, // 34: mavsdk.rpc.action_server.ActionServerService.SubscribeTerminate:output_type -> mavsdk.rpc.action_server.TerminateResponse
	24, // 35: mavsdk.rpc.action_server.ActionServerService.SetAllowTakeoff:output_type -> mavsdk.rpc.action_server.SetAllowTakeoffResponse
	21, // 36: mavsdk.rpc.action_server.ActionServerService.SetArmable:output_type -> mavsdk.rpc.action_server.SetArmableResponse
	22, // 37: mavsdk.rpc.action_server.ActionServerService.SetDisarmable:output_type -> mavsdk.rpc.action_server.SetDisarmableResponse
	23, // 38: mavsdk.rpc.action_server.ActionServerService.SetAllowableFlightModes:output_type -> mavsdk.rpc.action_server.SetAllowableFlightModesResponse
	25, // 39: mavsdk.rpc.action_server.ActionServerService.GetAllowableFlightModes:output_type -> mavsdk.rpc.action_server.GetAllowableFlightModesResponse
	28, // [28:40] is the sub-list for method output_type
	16, // [16:28] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_action_server_proto_init() }
func file_action_server_proto_init() {
	if File_action_server_proto != nil {
		return
	}
	
	if !protoimpl.UnsafeEnabled {
		file_action_server_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SetAllowTakeoffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SetArmableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SetDisarmableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SetAllowableFlightModesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllowableFlightModesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeArmDisarmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeFlightModeChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTakeoffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeLandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeRebootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ArmDisarmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*FlightModeChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TakeoffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*LandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RebootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TerminateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SetArmableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SetDisarmableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SetAllowableFlightModesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SetAllowTakeoffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllowableFlightModesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*AllowableFlightModes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ArmDisarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_server_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ActionServerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_action_server_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_action_server_proto_goTypes,
		DependencyIndexes: file_action_server_proto_depIdxs,
		EnumInfos:         file_action_server_proto_enumTypes,
		MessageInfos:      file_action_server_proto_msgTypes,
	}.Build()
	File_action_server_proto = out.File
	file_action_server_proto_rawDesc = nil
	file_action_server_proto_goTypes = nil
	file_action_server_proto_depIdxs = nil
}
