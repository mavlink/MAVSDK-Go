// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: mocap.proto

package mocap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mavlink frame id
type Odometry_MavFrame int32

const (
	Odometry_MAV_FRAME_MOCAP_NED Odometry_MavFrame = 0 // MAVLink number: 14. Odometry local coordinate frame of data given by a motion capture system, Z-down (x: north, y: east, z: down).
	Odometry_MAV_FRAME_LOCAL_FRD Odometry_MavFrame = 1 // MAVLink number: 20. Forward, Right, Down coordinate frame. This is a local frame with Z-down and arbitrary F/R alignment (i.e. not aligned with NED/earth frame). Replacement for MAV_FRAME_MOCAP_NED, MAV_FRAME_VISION_NED, MAV_FRAME_ESTIM_NED.
)

// Enum value maps for Odometry_MavFrame.
var (
	Odometry_MavFrame_name = map[int32]string{
		0: "MAV_FRAME_MOCAP_NED",
		1: "MAV_FRAME_LOCAL_FRD",
	}
	Odometry_MavFrame_value = map[string]int32{
		"MAV_FRAME_MOCAP_NED": 0,
		"MAV_FRAME_LOCAL_FRD": 1,
	}
)

func (x Odometry_MavFrame) Enum() *Odometry_MavFrame {
	p := new(Odometry_MavFrame)
	*p = x
	return p
}

func (x Odometry_MavFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Odometry_MavFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_mocap_proto_enumTypes[0].Descriptor()
}

func (Odometry_MavFrame) Type() protoreflect.EnumType {
	return &file_mocap_proto_enumTypes[0]
}

func (x Odometry_MavFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Odometry_MavFrame.Descriptor instead.
func (Odometry_MavFrame) EnumDescriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{14, 0}
}

// Possible results returned for mocap requests
type MocapResult_Result int32

const (
	MocapResult_RESULT_UNKNOWN              MocapResult_Result = 0 // Unknown error
	MocapResult_RESULT_SUCCESS              MocapResult_Result = 1 // Request succeeded
	MocapResult_RESULT_NO_SYSTEM            MocapResult_Result = 2 // No system is connected
	MocapResult_RESULT_CONNECTION_ERROR     MocapResult_Result = 3 // Connection error
	MocapResult_RESULT_INVALID_REQUEST_DATA MocapResult_Result = 4 // Invalid request data
	MocapResult_RESULT_UNSUPPORTED          MocapResult_Result = 5 // Function unsupported
)

// Enum value maps for MocapResult_Result.
var (
	MocapResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_NO_SYSTEM",
		3: "RESULT_CONNECTION_ERROR",
		4: "RESULT_INVALID_REQUEST_DATA",
		5: "RESULT_UNSUPPORTED",
	}
	MocapResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":              0,
		"RESULT_SUCCESS":              1,
		"RESULT_NO_SYSTEM":            2,
		"RESULT_CONNECTION_ERROR":     3,
		"RESULT_INVALID_REQUEST_DATA": 4,
		"RESULT_UNSUPPORTED":          5,
	}
)

func (x MocapResult_Result) Enum() *MocapResult_Result {
	p := new(MocapResult_Result)
	*p = x
	return p
}

func (x MocapResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MocapResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_mocap_proto_enumTypes[1].Descriptor()
}

func (MocapResult_Result) Type() protoreflect.EnumType {
	return &file_mocap_proto_enumTypes[1]
}

func (x MocapResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MocapResult_Result.Descriptor instead.
func (MocapResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{15, 0}
}

type SetVisionPositionEstimateRequest struct {
	state                  protoimpl.MessageState  `protogen:"open.v1"`
	VisionPositionEstimate *VisionPositionEstimate `protobuf:"bytes,1,opt,name=vision_position_estimate,json=visionPositionEstimate,proto3" json:"vision_position_estimate,omitempty"` // The vision position estimate
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SetVisionPositionEstimateRequest) Reset() {
	*x = SetVisionPositionEstimateRequest{}
	mi := &file_mocap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVisionPositionEstimateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVisionPositionEstimateRequest) ProtoMessage() {}

func (x *SetVisionPositionEstimateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVisionPositionEstimateRequest.ProtoReflect.Descriptor instead.
func (*SetVisionPositionEstimateRequest) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{0}
}

func (x *SetVisionPositionEstimateRequest) GetVisionPositionEstimate() *VisionPositionEstimate {
	if x != nil {
		return x.VisionPositionEstimate
	}
	return nil
}

type SetVisionPositionEstimateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MocapResult   *MocapResult           `protobuf:"bytes,1,opt,name=mocap_result,json=mocapResult,proto3" json:"mocap_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetVisionPositionEstimateResponse) Reset() {
	*x = SetVisionPositionEstimateResponse{}
	mi := &file_mocap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVisionPositionEstimateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVisionPositionEstimateResponse) ProtoMessage() {}

func (x *SetVisionPositionEstimateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVisionPositionEstimateResponse.ProtoReflect.Descriptor instead.
func (*SetVisionPositionEstimateResponse) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{1}
}

func (x *SetVisionPositionEstimateResponse) GetMocapResult() *MocapResult {
	if x != nil {
		return x.MocapResult
	}
	return nil
}

type SetAttitudePositionMocapRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AttitudePositionMocap *AttitudePositionMocap `protobuf:"bytes,1,opt,name=attitude_position_mocap,json=attitudePositionMocap,proto3" json:"attitude_position_mocap,omitempty"` // The attitude and position data
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SetAttitudePositionMocapRequest) Reset() {
	*x = SetAttitudePositionMocapRequest{}
	mi := &file_mocap_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAttitudePositionMocapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAttitudePositionMocapRequest) ProtoMessage() {}

func (x *SetAttitudePositionMocapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAttitudePositionMocapRequest.ProtoReflect.Descriptor instead.
func (*SetAttitudePositionMocapRequest) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{2}
}

func (x *SetAttitudePositionMocapRequest) GetAttitudePositionMocap() *AttitudePositionMocap {
	if x != nil {
		return x.AttitudePositionMocap
	}
	return nil
}

type SetAttitudePositionMocapResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MocapResult   *MocapResult           `protobuf:"bytes,1,opt,name=mocap_result,json=mocapResult,proto3" json:"mocap_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAttitudePositionMocapResponse) Reset() {
	*x = SetAttitudePositionMocapResponse{}
	mi := &file_mocap_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAttitudePositionMocapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAttitudePositionMocapResponse) ProtoMessage() {}

func (x *SetAttitudePositionMocapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAttitudePositionMocapResponse.ProtoReflect.Descriptor instead.
func (*SetAttitudePositionMocapResponse) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{3}
}

func (x *SetAttitudePositionMocapResponse) GetMocapResult() *MocapResult {
	if x != nil {
		return x.MocapResult
	}
	return nil
}

type SetOdometryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Odometry      *Odometry              `protobuf:"bytes,1,opt,name=odometry,proto3" json:"odometry,omitempty"` // The odometry data
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetOdometryRequest) Reset() {
	*x = SetOdometryRequest{}
	mi := &file_mocap_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOdometryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOdometryRequest) ProtoMessage() {}

func (x *SetOdometryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOdometryRequest.ProtoReflect.Descriptor instead.
func (*SetOdometryRequest) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{4}
}

func (x *SetOdometryRequest) GetOdometry() *Odometry {
	if x != nil {
		return x.Odometry
	}
	return nil
}

type SetOdometryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MocapResult   *MocapResult           `protobuf:"bytes,1,opt,name=mocap_result,json=mocapResult,proto3" json:"mocap_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetOdometryResponse) Reset() {
	*x = SetOdometryResponse{}
	mi := &file_mocap_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOdometryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOdometryResponse) ProtoMessage() {}

func (x *SetOdometryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOdometryResponse.ProtoReflect.Descriptor instead.
func (*SetOdometryResponse) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{5}
}

func (x *SetOdometryResponse) GetMocapResult() *MocapResult {
	if x != nil {
		return x.MocapResult
	}
	return nil
}

// Body position type
type PositionBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XM            float32                `protobuf:"fixed32,1,opt,name=x_m,json=xM,proto3" json:"x_m,omitempty"` // X position in metres.
	YM            float32                `protobuf:"fixed32,2,opt,name=y_m,json=yM,proto3" json:"y_m,omitempty"` // Y position in metres.
	ZM            float32                `protobuf:"fixed32,3,opt,name=z_m,json=zM,proto3" json:"z_m,omitempty"` // Z position in metres.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionBody) Reset() {
	*x = PositionBody{}
	mi := &file_mocap_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionBody) ProtoMessage() {}

func (x *PositionBody) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionBody.ProtoReflect.Descriptor instead.
func (*PositionBody) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{6}
}

func (x *PositionBody) GetXM() float32 {
	if x != nil {
		return x.XM
	}
	return 0
}

func (x *PositionBody) GetYM() float32 {
	if x != nil {
		return x.YM
	}
	return 0
}

func (x *PositionBody) GetZM() float32 {
	if x != nil {
		return x.ZM
	}
	return 0
}

// Body angle type
type AngleBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollRad       float32                `protobuf:"fixed32,1,opt,name=roll_rad,json=rollRad,proto3" json:"roll_rad,omitempty"`    // Roll angle in radians.
	PitchRad      float32                `protobuf:"fixed32,2,opt,name=pitch_rad,json=pitchRad,proto3" json:"pitch_rad,omitempty"` // Pitch angle in radians.
	YawRad        float32                `protobuf:"fixed32,3,opt,name=yaw_rad,json=yawRad,proto3" json:"yaw_rad,omitempty"`       // Yaw angle in radians.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AngleBody) Reset() {
	*x = AngleBody{}
	mi := &file_mocap_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngleBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngleBody) ProtoMessage() {}

func (x *AngleBody) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngleBody.ProtoReflect.Descriptor instead.
func (*AngleBody) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{7}
}

func (x *AngleBody) GetRollRad() float32 {
	if x != nil {
		return x.RollRad
	}
	return 0
}

func (x *AngleBody) GetPitchRad() float32 {
	if x != nil {
		return x.PitchRad
	}
	return 0
}

func (x *AngleBody) GetYawRad() float32 {
	if x != nil {
		return x.YawRad
	}
	return 0
}

// Speed type, represented in the Body (X Y Z) frame and in metres/second.
type SpeedBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XMS           float32                `protobuf:"fixed32,1,opt,name=x_m_s,json=xMS,proto3" json:"x_m_s,omitempty"` // Velocity in X in metres/second.
	YMS           float32                `protobuf:"fixed32,2,opt,name=y_m_s,json=yMS,proto3" json:"y_m_s,omitempty"` // Velocity in Y in metres/second.
	ZMS           float32                `protobuf:"fixed32,3,opt,name=z_m_s,json=zMS,proto3" json:"z_m_s,omitempty"` // Velocity in Z in metres/second.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeedBody) Reset() {
	*x = SpeedBody{}
	mi := &file_mocap_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeedBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeedBody) ProtoMessage() {}

func (x *SpeedBody) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeedBody.ProtoReflect.Descriptor instead.
func (*SpeedBody) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{8}
}

func (x *SpeedBody) GetXMS() float32 {
	if x != nil {
		return x.XMS
	}
	return 0
}

func (x *SpeedBody) GetYMS() float32 {
	if x != nil {
		return x.YMS
	}
	return 0
}

func (x *SpeedBody) GetZMS() float32 {
	if x != nil {
		return x.ZMS
	}
	return 0
}

// Angular velocity type
type AngularVelocityBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollRadS      float32                `protobuf:"fixed32,1,opt,name=roll_rad_s,json=rollRadS,proto3" json:"roll_rad_s,omitempty"`    // Roll angular velocity in radians/second.
	PitchRadS     float32                `protobuf:"fixed32,2,opt,name=pitch_rad_s,json=pitchRadS,proto3" json:"pitch_rad_s,omitempty"` // Pitch angular velocity in radians/second.
	YawRadS       float32                `protobuf:"fixed32,3,opt,name=yaw_rad_s,json=yawRadS,proto3" json:"yaw_rad_s,omitempty"`       // Yaw angular velocity in radians/second.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AngularVelocityBody) Reset() {
	*x = AngularVelocityBody{}
	mi := &file_mocap_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngularVelocityBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngularVelocityBody) ProtoMessage() {}

func (x *AngularVelocityBody) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngularVelocityBody.ProtoReflect.Descriptor instead.
func (*AngularVelocityBody) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{9}
}

func (x *AngularVelocityBody) GetRollRadS() float32 {
	if x != nil {
		return x.RollRadS
	}
	return 0
}

func (x *AngularVelocityBody) GetPitchRadS() float32 {
	if x != nil {
		return x.PitchRadS
	}
	return 0
}

func (x *AngularVelocityBody) GetYawRadS() float32 {
	if x != nil {
		return x.YawRadS
	}
	return 0
}

// Covariance type.
// Row-major representation of a 6x6 cross-covariance matrix upper
// right triangle.
// Needs to be 21 entries or 1 entry with NaN if unknown.
type Covariance struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CovarianceMatrix []float32              `protobuf:"fixed32,1,rep,packed,name=covariance_matrix,json=covarianceMatrix,proto3" json:"covariance_matrix,omitempty"` // The covariance matrix
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Covariance) Reset() {
	*x = Covariance{}
	mi := &file_mocap_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Covariance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Covariance) ProtoMessage() {}

func (x *Covariance) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Covariance.ProtoReflect.Descriptor instead.
func (*Covariance) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{10}
}

func (x *Covariance) GetCovarianceMatrix() []float32 {
	if x != nil {
		return x.CovarianceMatrix
	}
	return nil
}

// Quaternion type.
//
// All rotations and axis systems follow the right-hand rule.
// The Hamilton quaternion product definition is used.
// A zero-rotation quaternion is represented by (1,0,0,0).
// The quaternion could also be written as w + xi + yj + zk.
//
// For more info see: https://en.wikipedia.org/wiki/Quaternion
type Quaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	W             float32                `protobuf:"fixed32,1,opt,name=w,proto3" json:"w,omitempty"` // Quaternion entry 0, also denoted as a
	X             float32                `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"` // Quaternion entry 1, also denoted as b
	Y             float32                `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"` // Quaternion entry 2, also denoted as c
	Z             float32                `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"` // Quaternion entry 3, also denoted as d
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_mocap_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{11}
}

func (x *Quaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Quaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Global position/attitude estimate from a vision source.
type VisionPositionEstimate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TimeUsec       uint64                 `protobuf:"varint,1,opt,name=time_usec,json=timeUsec,proto3" json:"time_usec,omitempty"`                  // PositionBody frame timestamp UNIX Epoch time (0 to use Backend timestamp)
	PositionBody   *PositionBody          `protobuf:"bytes,2,opt,name=position_body,json=positionBody,proto3" json:"position_body,omitempty"`       // Global position (m)
	AngleBody      *AngleBody             `protobuf:"bytes,3,opt,name=angle_body,json=angleBody,proto3" json:"angle_body,omitempty"`                // Body angle (rad).
	PoseCovariance *Covariance            `protobuf:"bytes,4,opt,name=pose_covariance,json=poseCovariance,proto3" json:"pose_covariance,omitempty"` // Pose cross-covariance matrix.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VisionPositionEstimate) Reset() {
	*x = VisionPositionEstimate{}
	mi := &file_mocap_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VisionPositionEstimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionPositionEstimate) ProtoMessage() {}

func (x *VisionPositionEstimate) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionPositionEstimate.ProtoReflect.Descriptor instead.
func (*VisionPositionEstimate) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{12}
}

func (x *VisionPositionEstimate) GetTimeUsec() uint64 {
	if x != nil {
		return x.TimeUsec
	}
	return 0
}

func (x *VisionPositionEstimate) GetPositionBody() *PositionBody {
	if x != nil {
		return x.PositionBody
	}
	return nil
}

func (x *VisionPositionEstimate) GetAngleBody() *AngleBody {
	if x != nil {
		return x.AngleBody
	}
	return nil
}

func (x *VisionPositionEstimate) GetPoseCovariance() *Covariance {
	if x != nil {
		return x.PoseCovariance
	}
	return nil
}

// Motion capture attitude and position
type AttitudePositionMocap struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TimeUsec       uint64                 `protobuf:"varint,1,opt,name=time_usec,json=timeUsec,proto3" json:"time_usec,omitempty"`                  // PositionBody frame timestamp UNIX Epoch time (0 to use Backend timestamp)
	Q              *Quaternion            `protobuf:"bytes,2,opt,name=q,proto3" json:"q,omitempty"`                                                 // Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
	PositionBody   *PositionBody          `protobuf:"bytes,3,opt,name=position_body,json=positionBody,proto3" json:"position_body,omitempty"`       // Body Position (NED)
	PoseCovariance *Covariance            `protobuf:"bytes,4,opt,name=pose_covariance,json=poseCovariance,proto3" json:"pose_covariance,omitempty"` // Pose cross-covariance matrix.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AttitudePositionMocap) Reset() {
	*x = AttitudePositionMocap{}
	mi := &file_mocap_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttitudePositionMocap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttitudePositionMocap) ProtoMessage() {}

func (x *AttitudePositionMocap) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttitudePositionMocap.ProtoReflect.Descriptor instead.
func (*AttitudePositionMocap) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{13}
}

func (x *AttitudePositionMocap) GetTimeUsec() uint64 {
	if x != nil {
		return x.TimeUsec
	}
	return 0
}

func (x *AttitudePositionMocap) GetQ() *Quaternion {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *AttitudePositionMocap) GetPositionBody() *PositionBody {
	if x != nil {
		return x.PositionBody
	}
	return nil
}

func (x *AttitudePositionMocap) GetPoseCovariance() *Covariance {
	if x != nil {
		return x.PoseCovariance
	}
	return nil
}

// Odometry message to communicate odometry information with an external interface.
type Odometry struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TimeUsec            uint64                 `protobuf:"varint,1,opt,name=time_usec,json=timeUsec,proto3" json:"time_usec,omitempty"`                                      // Timestamp (0 to use Backend timestamp).
	FrameId             Odometry_MavFrame      `protobuf:"varint,2,opt,name=frame_id,json=frameId,proto3,enum=mavsdk.rpc.mocap.Odometry_MavFrame" json:"frame_id,omitempty"` // Coordinate frame of reference for the pose data.
	PositionBody        *PositionBody          `protobuf:"bytes,3,opt,name=position_body,json=positionBody,proto3" json:"position_body,omitempty"`                           // Body Position.
	Q                   *Quaternion            `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`                                                                     // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
	SpeedBody           *SpeedBody             `protobuf:"bytes,5,opt,name=speed_body,json=speedBody,proto3" json:"speed_body,omitempty"`                                    // Linear speed (m/s).
	AngularVelocityBody *AngularVelocityBody   `protobuf:"bytes,6,opt,name=angular_velocity_body,json=angularVelocityBody,proto3" json:"angular_velocity_body,omitempty"`    // Angular speed (rad/s).
	PoseCovariance      *Covariance            `protobuf:"bytes,7,opt,name=pose_covariance,json=poseCovariance,proto3" json:"pose_covariance,omitempty"`                     // Pose cross-covariance matrix.
	VelocityCovariance  *Covariance            `protobuf:"bytes,8,opt,name=velocity_covariance,json=velocityCovariance,proto3" json:"velocity_covariance,omitempty"`         // Velocity cross-covariance matrix.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Odometry) Reset() {
	*x = Odometry{}
	mi := &file_mocap_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Odometry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Odometry) ProtoMessage() {}

func (x *Odometry) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Odometry.ProtoReflect.Descriptor instead.
func (*Odometry) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{14}
}

func (x *Odometry) GetTimeUsec() uint64 {
	if x != nil {
		return x.TimeUsec
	}
	return 0
}

func (x *Odometry) GetFrameId() Odometry_MavFrame {
	if x != nil {
		return x.FrameId
	}
	return Odometry_MAV_FRAME_MOCAP_NED
}

func (x *Odometry) GetPositionBody() *PositionBody {
	if x != nil {
		return x.PositionBody
	}
	return nil
}

func (x *Odometry) GetQ() *Quaternion {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *Odometry) GetSpeedBody() *SpeedBody {
	if x != nil {
		return x.SpeedBody
	}
	return nil
}

func (x *Odometry) GetAngularVelocityBody() *AngularVelocityBody {
	if x != nil {
		return x.AngularVelocityBody
	}
	return nil
}

func (x *Odometry) GetPoseCovariance() *Covariance {
	if x != nil {
		return x.PoseCovariance
	}
	return nil
}

func (x *Odometry) GetVelocityCovariance() *Covariance {
	if x != nil {
		return x.VelocityCovariance
	}
	return nil
}

// Result type.
type MocapResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        MocapResult_Result     `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.mocap.MocapResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr     string                 `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                    // Human-readable English string describing the result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MocapResult) Reset() {
	*x = MocapResult{}
	mi := &file_mocap_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MocapResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MocapResult) ProtoMessage() {}

func (x *MocapResult) ProtoReflect() protoreflect.Message {
	mi := &file_mocap_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MocapResult.ProtoReflect.Descriptor instead.
func (*MocapResult) Descriptor() ([]byte, []int) {
	return file_mocap_proto_rawDescGZIP(), []int{15}
}

func (x *MocapResult) GetResult() MocapResult_Result {
	if x != nil {
		return x.Result
	}
	return MocapResult_RESULT_UNKNOWN
}

func (x *MocapResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_mocap_proto protoreflect.FileDescriptor

const file_mocap_proto_rawDesc = "" +
	"\n" +
	"\vmocap.proto\x12\x10mavsdk.rpc.mocap\x1a\x14mavsdk_options.proto\"\x86\x01\n" +
	" SetVisionPositionEstimateRequest\x12b\n" +
	"\x18vision_position_estimate\x18\x01 \x01(\v2(.mavsdk.rpc.mocap.VisionPositionEstimateR\x16visionPositionEstimate\"e\n" +
	"!SetVisionPositionEstimateResponse\x12@\n" +
	"\fmocap_result\x18\x01 \x01(\v2\x1d.mavsdk.rpc.mocap.MocapResultR\vmocapResult\"\x82\x01\n" +
	"\x1fSetAttitudePositionMocapRequest\x12_\n" +
	"\x17attitude_position_mocap\x18\x01 \x01(\v2'.mavsdk.rpc.mocap.AttitudePositionMocapR\x15attitudePositionMocap\"d\n" +
	" SetAttitudePositionMocapResponse\x12@\n" +
	"\fmocap_result\x18\x01 \x01(\v2\x1d.mavsdk.rpc.mocap.MocapResultR\vmocapResult\"L\n" +
	"\x12SetOdometryRequest\x126\n" +
	"\bodometry\x18\x01 \x01(\v2\x1a.mavsdk.rpc.mocap.OdometryR\bodometry\"W\n" +
	"\x13SetOdometryResponse\x12@\n" +
	"\fmocap_result\x18\x01 \x01(\v2\x1d.mavsdk.rpc.mocap.MocapResultR\vmocapResult\"A\n" +
	"\fPositionBody\x12\x0f\n" +
	"\x03x_m\x18\x01 \x01(\x02R\x02xM\x12\x0f\n" +
	"\x03y_m\x18\x02 \x01(\x02R\x02yM\x12\x0f\n" +
	"\x03z_m\x18\x03 \x01(\x02R\x02zM\"\\\n" +
	"\tAngleBody\x12\x19\n" +
	"\broll_rad\x18\x01 \x01(\x02R\arollRad\x12\x1b\n" +
	"\tpitch_rad\x18\x02 \x01(\x02R\bpitchRad\x12\x17\n" +
	"\ayaw_rad\x18\x03 \x01(\x02R\x06yawRad\"G\n" +
	"\tSpeedBody\x12\x12\n" +
	"\x05x_m_s\x18\x01 \x01(\x02R\x03xMS\x12\x12\n" +
	"\x05y_m_s\x18\x02 \x01(\x02R\x03yMS\x12\x12\n" +
	"\x05z_m_s\x18\x03 \x01(\x02R\x03zMS\"o\n" +
	"\x13AngularVelocityBody\x12\x1c\n" +
	"\n" +
	"roll_rad_s\x18\x01 \x01(\x02R\brollRadS\x12\x1e\n" +
	"\vpitch_rad_s\x18\x02 \x01(\x02R\tpitchRadS\x12\x1a\n" +
	"\tyaw_rad_s\x18\x03 \x01(\x02R\ayawRadS\"9\n" +
	"\n" +
	"Covariance\x12+\n" +
	"\x11covariance_matrix\x18\x01 \x03(\x02R\x10covarianceMatrix\"D\n" +
	"\n" +
	"Quaternion\x12\f\n" +
	"\x01w\x18\x01 \x01(\x02R\x01w\x12\f\n" +
	"\x01x\x18\x02 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x03 \x01(\x02R\x01y\x12\f\n" +
	"\x01z\x18\x04 \x01(\x02R\x01z\"\xfd\x01\n" +
	"\x16VisionPositionEstimate\x12\x1b\n" +
	"\ttime_usec\x18\x01 \x01(\x04R\btimeUsec\x12C\n" +
	"\rposition_body\x18\x02 \x01(\v2\x1e.mavsdk.rpc.mocap.PositionBodyR\fpositionBody\x12:\n" +
	"\n" +
	"angle_body\x18\x03 \x01(\v2\x1b.mavsdk.rpc.mocap.AngleBodyR\tangleBody\x12E\n" +
	"\x0fpose_covariance\x18\x04 \x01(\v2\x1c.mavsdk.rpc.mocap.CovarianceR\x0eposeCovariance\"\xec\x01\n" +
	"\x15AttitudePositionMocap\x12\x1b\n" +
	"\ttime_usec\x18\x01 \x01(\x04R\btimeUsec\x12*\n" +
	"\x01q\x18\x02 \x01(\v2\x1c.mavsdk.rpc.mocap.QuaternionR\x01q\x12C\n" +
	"\rposition_body\x18\x03 \x01(\v2\x1e.mavsdk.rpc.mocap.PositionBodyR\fpositionBody\x12E\n" +
	"\x0fpose_covariance\x18\x04 \x01(\v2\x1c.mavsdk.rpc.mocap.CovarianceR\x0eposeCovariance\"\xc3\x04\n" +
	"\bOdometry\x12\x1b\n" +
	"\ttime_usec\x18\x01 \x01(\x04R\btimeUsec\x12>\n" +
	"\bframe_id\x18\x02 \x01(\x0e2#.mavsdk.rpc.mocap.Odometry.MavFrameR\aframeId\x12C\n" +
	"\rposition_body\x18\x03 \x01(\v2\x1e.mavsdk.rpc.mocap.PositionBodyR\fpositionBody\x12*\n" +
	"\x01q\x18\x04 \x01(\v2\x1c.mavsdk.rpc.mocap.QuaternionR\x01q\x12:\n" +
	"\n" +
	"speed_body\x18\x05 \x01(\v2\x1b.mavsdk.rpc.mocap.SpeedBodyR\tspeedBody\x12Y\n" +
	"\x15angular_velocity_body\x18\x06 \x01(\v2%.mavsdk.rpc.mocap.AngularVelocityBodyR\x13angularVelocityBody\x12E\n" +
	"\x0fpose_covariance\x18\a \x01(\v2\x1c.mavsdk.rpc.mocap.CovarianceR\x0eposeCovariance\x12M\n" +
	"\x13velocity_covariance\x18\b \x01(\v2\x1c.mavsdk.rpc.mocap.CovarianceR\x12velocityCovariance\"<\n" +
	"\bMavFrame\x12\x17\n" +
	"\x13MAV_FRAME_MOCAP_NED\x10\x00\x12\x17\n" +
	"\x13MAV_FRAME_LOCAL_FRD\x10\x01\"\x89\x02\n" +
	"\vMocapResult\x12<\n" +
	"\x06result\x18\x01 \x01(\x0e2$.mavsdk.rpc.mocap.MocapResult.ResultR\x06result\x12\x1d\n" +
	"\n" +
	"result_str\x18\x02 \x01(\tR\tresultStr\"\x9c\x01\n" +
	"\x06Result\x12\x12\n" +
	"\x0eRESULT_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eRESULT_SUCCESS\x10\x01\x12\x14\n" +
	"\x10RESULT_NO_SYSTEM\x10\x02\x12\x1b\n" +
	"\x17RESULT_CONNECTION_ERROR\x10\x03\x12\x1f\n" +
	"\x1bRESULT_INVALID_REQUEST_DATA\x10\x04\x12\x16\n" +
	"\x12RESULT_UNSUPPORTED\x10\x052\x87\x03\n" +
	"\fMocapService\x12\x8a\x01\n" +
	"\x19SetVisionPositionEstimate\x122.mavsdk.rpc.mocap.SetVisionPositionEstimateRequest\x1a3.mavsdk.rpc.mocap.SetVisionPositionEstimateResponse\"\x04\x80\xb5\x18\x01\x12\x87\x01\n" +
	"\x18SetAttitudePositionMocap\x121.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest\x1a2.mavsdk.rpc.mocap.SetAttitudePositionMocapResponse\"\x04\x80\xb5\x18\x01\x12`\n" +
	"\vSetOdometry\x12$.mavsdk.rpc.mocap.SetOdometryRequest\x1a%.mavsdk.rpc.mocap.SetOdometryResponse\"\x04\x80\xb5\x18\x01B\x15B\n" +
	"MocapProtoZ\a.;mocapb\x06proto3"

var (
	file_mocap_proto_rawDescOnce sync.Once
	file_mocap_proto_rawDescData []byte
)

func file_mocap_proto_rawDescGZIP() []byte {
	file_mocap_proto_rawDescOnce.Do(func() {
		file_mocap_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mocap_proto_rawDesc), len(file_mocap_proto_rawDesc)))
	})
	return file_mocap_proto_rawDescData
}

var file_mocap_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mocap_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_mocap_proto_goTypes = []any{
	(Odometry_MavFrame)(0),                    // 0: mavsdk.rpc.mocap.Odometry.MavFrame
	(MocapResult_Result)(0),                   // 1: mavsdk.rpc.mocap.MocapResult.Result
	(*SetVisionPositionEstimateRequest)(nil),  // 2: mavsdk.rpc.mocap.SetVisionPositionEstimateRequest
	(*SetVisionPositionEstimateResponse)(nil), // 3: mavsdk.rpc.mocap.SetVisionPositionEstimateResponse
	(*SetAttitudePositionMocapRequest)(nil),   // 4: mavsdk.rpc.mocap.SetAttitudePositionMocapRequest
	(*SetAttitudePositionMocapResponse)(nil),  // 5: mavsdk.rpc.mocap.SetAttitudePositionMocapResponse
	(*SetOdometryRequest)(nil),                // 6: mavsdk.rpc.mocap.SetOdometryRequest
	(*SetOdometryResponse)(nil),               // 7: mavsdk.rpc.mocap.SetOdometryResponse
	(*PositionBody)(nil),                      // 8: mavsdk.rpc.mocap.PositionBody
	(*AngleBody)(nil),                         // 9: mavsdk.rpc.mocap.AngleBody
	(*SpeedBody)(nil),                         // 10: mavsdk.rpc.mocap.SpeedBody
	(*AngularVelocityBody)(nil),               // 11: mavsdk.rpc.mocap.AngularVelocityBody
	(*Covariance)(nil),                        // 12: mavsdk.rpc.mocap.Covariance
	(*Quaternion)(nil),                        // 13: mavsdk.rpc.mocap.Quaternion
	(*VisionPositionEstimate)(nil),            // 14: mavsdk.rpc.mocap.VisionPositionEstimate
	(*AttitudePositionMocap)(nil),             // 15: mavsdk.rpc.mocap.AttitudePositionMocap
	(*Odometry)(nil),                          // 16: mavsdk.rpc.mocap.Odometry
	(*MocapResult)(nil),                       // 17: mavsdk.rpc.mocap.MocapResult
}
var file_mocap_proto_depIdxs = []int32{
	14, // 0: mavsdk.rpc.mocap.SetVisionPositionEstimateRequest.vision_position_estimate:type_name -> mavsdk.rpc.mocap.VisionPositionEstimate
	17, // 1: mavsdk.rpc.mocap.SetVisionPositionEstimateResponse.mocap_result:type_name -> mavsdk.rpc.mocap.MocapResult
	15, // 2: mavsdk.rpc.mocap.SetAttitudePositionMocapRequest.attitude_position_mocap:type_name -> mavsdk.rpc.mocap.AttitudePositionMocap
	17, // 3: mavsdk.rpc.mocap.SetAttitudePositionMocapResponse.mocap_result:type_name -> mavsdk.rpc.mocap.MocapResult
	16, // 4: mavsdk.rpc.mocap.SetOdometryRequest.odometry:type_name -> mavsdk.rpc.mocap.Odometry
	17, // 5: mavsdk.rpc.mocap.SetOdometryResponse.mocap_result:type_name -> mavsdk.rpc.mocap.MocapResult
	8,  // 6: mavsdk.rpc.mocap.VisionPositionEstimate.position_body:type_name -> mavsdk.rpc.mocap.PositionBody
	9,  // 7: mavsdk.rpc.mocap.VisionPositionEstimate.angle_body:type_name -> mavsdk.rpc.mocap.AngleBody
	12, // 8: mavsdk.rpc.mocap.VisionPositionEstimate.pose_covariance:type_name -> mavsdk.rpc.mocap.Covariance
	13, // 9: mavsdk.rpc.mocap.AttitudePositionMocap.q:type_name -> mavsdk.rpc.mocap.Quaternion
	8,  // 10: mavsdk.rpc.mocap.AttitudePositionMocap.position_body:type_name -> mavsdk.rpc.mocap.PositionBody
	12, // 11: mavsdk.rpc.mocap.AttitudePositionMocap.pose_covariance:type_name -> mavsdk.rpc.mocap.Covariance
	0,  // 12: mavsdk.rpc.mocap.Odometry.frame_id:type_name -> mavsdk.rpc.mocap.Odometry.MavFrame
	8,  // 13: mavsdk.rpc.mocap.Odometry.position_body:type_name -> mavsdk.rpc.mocap.PositionBody
	13, // 14: mavsdk.rpc.mocap.Odometry.q:type_name -> mavsdk.rpc.mocap.Quaternion
	10, // 15: mavsdk.rpc.mocap.Odometry.speed_body:type_name -> mavsdk.rpc.mocap.SpeedBody
	11, // 16: mavsdk.rpc.mocap.Odometry.angular_velocity_body:type_name -> mavsdk.rpc.mocap.AngularVelocityBody
	12, // 17: mavsdk.rpc.mocap.Odometry.pose_covariance:type_name -> mavsdk.rpc.mocap.Covariance
	12, // 18: mavsdk.rpc.mocap.Odometry.velocity_covariance:type_name -> mavsdk.rpc.mocap.Covariance
	1,  // 19: mavsdk.rpc.mocap.MocapResult.result:type_name -> mavsdk.rpc.mocap.MocapResult.Result
	2,  // 20: mavsdk.rpc.mocap.MocapService.SetVisionPositionEstimate:input_type -> mavsdk.rpc.mocap.SetVisionPositionEstimateRequest
	4,  // 21: mavsdk.rpc.mocap.MocapService.SetAttitudePositionMocap:input_type -> mavsdk.rpc.mocap.SetAttitudePositionMocapRequest
	6,  // 22: mavsdk.rpc.mocap.MocapService.SetOdometry:input_type -> mavsdk.rpc.mocap.SetOdometryRequest
	3,  // 23: mavsdk.rpc.mocap.MocapService.SetVisionPositionEstimate:output_type -> mavsdk.rpc.mocap.SetVisionPositionEstimateResponse
	5,  // 24: mavsdk.rpc.mocap.MocapService.SetAttitudePositionMocap:output_type -> mavsdk.rpc.mocap.SetAttitudePositionMocapResponse
	7,  // 25: mavsdk.rpc.mocap.MocapService.SetOdometry:output_type -> mavsdk.rpc.mocap.SetOdometryResponse
	23, // [23:26] is the sub-list for method output_type
	20, // [20:23] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_mocap_proto_init() }
func file_mocap_proto_init() {
	if File_mocap_proto != nil {
		return
	}
	file_mavsdk_options_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mocap_proto_rawDesc), len(file_mocap_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mocap_proto_goTypes,
		DependencyIndexes: file_mocap_proto_depIdxs,
		EnumInfos:         file_mocap_proto_enumTypes,
		MessageInfos:      file_mocap_proto_msgTypes,
	}.Build()
	File_mocap_proto = out.File
	file_mocap_proto_goTypes = nil
	file_mocap_proto_depIdxs = nil
}
