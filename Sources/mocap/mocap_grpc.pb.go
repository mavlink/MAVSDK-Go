// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: mocap.proto

package mocap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MocapService_SetVisionPositionEstimate_FullMethodName = "/mavsdk.rpc.mocap.MocapService/SetVisionPositionEstimate"
	MocapService_SetAttitudePositionMocap_FullMethodName  = "/mavsdk.rpc.mocap.MocapService/SetAttitudePositionMocap"
	MocapService_SetOdometry_FullMethodName               = "/mavsdk.rpc.mocap.MocapService/SetOdometry"
)

// MocapServiceClient is the client API for MocapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Allows interfacing a vehicle with a motion capture system in
// order to allow navigation without global positioning sources available
// (e.g. indoors, or when flying under a bridge. etc.).
type MocapServiceClient interface {
	// Send Global position/attitude estimate from a vision source.
	SetVisionPositionEstimate(ctx context.Context, in *SetVisionPositionEstimateRequest, opts ...grpc.CallOption) (*SetVisionPositionEstimateResponse, error)
	// Send motion capture attitude and position.
	SetAttitudePositionMocap(ctx context.Context, in *SetAttitudePositionMocapRequest, opts ...grpc.CallOption) (*SetAttitudePositionMocapResponse, error)
	// Send odometry information with an external interface.
	SetOdometry(ctx context.Context, in *SetOdometryRequest, opts ...grpc.CallOption) (*SetOdometryResponse, error)
}

type mocapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMocapServiceClient(cc grpc.ClientConnInterface) MocapServiceClient {
	return &mocapServiceClient{cc}
}

func (c *mocapServiceClient) SetVisionPositionEstimate(ctx context.Context, in *SetVisionPositionEstimateRequest, opts ...grpc.CallOption) (*SetVisionPositionEstimateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVisionPositionEstimateResponse)
	err := c.cc.Invoke(ctx, MocapService_SetVisionPositionEstimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mocapServiceClient) SetAttitudePositionMocap(ctx context.Context, in *SetAttitudePositionMocapRequest, opts ...grpc.CallOption) (*SetAttitudePositionMocapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAttitudePositionMocapResponse)
	err := c.cc.Invoke(ctx, MocapService_SetAttitudePositionMocap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mocapServiceClient) SetOdometry(ctx context.Context, in *SetOdometryRequest, opts ...grpc.CallOption) (*SetOdometryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOdometryResponse)
	err := c.cc.Invoke(ctx, MocapService_SetOdometry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MocapServiceServer is the server API for MocapService service.
// All implementations must embed UnimplementedMocapServiceServer
// for forward compatibility.
//
// *
// Allows interfacing a vehicle with a motion capture system in
// order to allow navigation without global positioning sources available
// (e.g. indoors, or when flying under a bridge. etc.).
type MocapServiceServer interface {
	// Send Global position/attitude estimate from a vision source.
	SetVisionPositionEstimate(context.Context, *SetVisionPositionEstimateRequest) (*SetVisionPositionEstimateResponse, error)
	// Send motion capture attitude and position.
	SetAttitudePositionMocap(context.Context, *SetAttitudePositionMocapRequest) (*SetAttitudePositionMocapResponse, error)
	// Send odometry information with an external interface.
	SetOdometry(context.Context, *SetOdometryRequest) (*SetOdometryResponse, error)
	mustEmbedUnimplementedMocapServiceServer()
}

// UnimplementedMocapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMocapServiceServer struct{}

func (UnimplementedMocapServiceServer) SetVisionPositionEstimate(context.Context, *SetVisionPositionEstimateRequest) (*SetVisionPositionEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVisionPositionEstimate not implemented")
}
func (UnimplementedMocapServiceServer) SetAttitudePositionMocap(context.Context, *SetAttitudePositionMocapRequest) (*SetAttitudePositionMocapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAttitudePositionMocap not implemented")
}
func (UnimplementedMocapServiceServer) SetOdometry(context.Context, *SetOdometryRequest) (*SetOdometryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOdometry not implemented")
}
func (UnimplementedMocapServiceServer) mustEmbedUnimplementedMocapServiceServer() {}
func (UnimplementedMocapServiceServer) testEmbeddedByValue()                      {}

// UnsafeMocapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MocapServiceServer will
// result in compilation errors.
type UnsafeMocapServiceServer interface {
	mustEmbedUnimplementedMocapServiceServer()
}

func RegisterMocapServiceServer(s grpc.ServiceRegistrar, srv MocapServiceServer) {
	// If the following call pancis, it indicates UnimplementedMocapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MocapService_ServiceDesc, srv)
}

func _MocapService_SetVisionPositionEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVisionPositionEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MocapServiceServer).SetVisionPositionEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MocapService_SetVisionPositionEstimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MocapServiceServer).SetVisionPositionEstimate(ctx, req.(*SetVisionPositionEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MocapService_SetAttitudePositionMocap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttitudePositionMocapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MocapServiceServer).SetAttitudePositionMocap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MocapService_SetAttitudePositionMocap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MocapServiceServer).SetAttitudePositionMocap(ctx, req.(*SetAttitudePositionMocapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MocapService_SetOdometry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOdometryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MocapServiceServer).SetOdometry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MocapService_SetOdometry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MocapServiceServer).SetOdometry(ctx, req.(*SetOdometryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MocapService_ServiceDesc is the grpc.ServiceDesc for MocapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MocapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.mocap.MocapService",
	HandlerType: (*MocapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVisionPositionEstimate",
			Handler:    _MocapService_SetVisionPositionEstimate_Handler,
		},
		{
			MethodName: "SetAttitudePositionMocap",
			Handler:    _MocapService_SetAttitudePositionMocap_Handler,
		},
		{
			MethodName: "SetOdometry",
			Handler:    _MocapService_SetOdometry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mocap.proto",
}
