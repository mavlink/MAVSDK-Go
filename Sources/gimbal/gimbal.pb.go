// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: gimbal.proto

package gimbal

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Gimbal mode type.
type GimbalMode int32

const (
	GimbalMode_GIMBAL_MODE_YAW_FOLLOW GimbalMode = 0 // Yaw follow will point the gimbal to the vehicle heading
	GimbalMode_GIMBAL_MODE_YAW_LOCK   GimbalMode = 1 // Yaw lock will fix the gimbal pointing to an absolute direction
)

// Enum value maps for GimbalMode.
var (
	GimbalMode_name = map[int32]string{
		0: "GIMBAL_MODE_YAW_FOLLOW",
		1: "GIMBAL_MODE_YAW_LOCK",
	}
	GimbalMode_value = map[string]int32{
		"GIMBAL_MODE_YAW_FOLLOW": 0,
		"GIMBAL_MODE_YAW_LOCK":   1,
	}
)

func (x GimbalMode) Enum() *GimbalMode {
	p := new(GimbalMode)
	*p = x
	return p
}

func (x GimbalMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GimbalMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gimbal_proto_enumTypes[0].Descriptor()
}

func (GimbalMode) Type() protoreflect.EnumType {
	return &file_gimbal_proto_enumTypes[0]
}

func (x GimbalMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GimbalMode.Descriptor instead.
func (GimbalMode) EnumDescriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{0}
}

// Control mode
type ControlMode int32

const (
	ControlMode_CONTROL_MODE_NONE      ControlMode = 0 // Indicates that the component does not have control over the gimbal
	ControlMode_CONTROL_MODE_PRIMARY   ControlMode = 1 // To take primary control over the gimbal
	ControlMode_CONTROL_MODE_SECONDARY ControlMode = 2 // To take secondary control over the gimbal
)

// Enum value maps for ControlMode.
var (
	ControlMode_name = map[int32]string{
		0: "CONTROL_MODE_NONE",
		1: "CONTROL_MODE_PRIMARY",
		2: "CONTROL_MODE_SECONDARY",
	}
	ControlMode_value = map[string]int32{
		"CONTROL_MODE_NONE":      0,
		"CONTROL_MODE_PRIMARY":   1,
		"CONTROL_MODE_SECONDARY": 2,
	}
)

func (x ControlMode) Enum() *ControlMode {
	p := new(ControlMode)
	*p = x
	return p
}

func (x ControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gimbal_proto_enumTypes[1].Descriptor()
}

func (ControlMode) Type() protoreflect.EnumType {
	return &file_gimbal_proto_enumTypes[1]
}

func (x ControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlMode.Descriptor instead.
func (ControlMode) EnumDescriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{1}
}

// The send mode type
type SendMode int32

const (
	SendMode_SEND_MODE_ONCE   SendMode = 0 // Send command exactly once with quality of service (use for sporadic commands slower than 1 Hz)
	SendMode_SEND_MODE_STREAM SendMode = 1 // Stream setpoint without quality of service (use for setpoints faster than 1 Hz).
)

// Enum value maps for SendMode.
var (
	SendMode_name = map[int32]string{
		0: "SEND_MODE_ONCE",
		1: "SEND_MODE_STREAM",
	}
	SendMode_value = map[string]int32{
		"SEND_MODE_ONCE":   0,
		"SEND_MODE_STREAM": 1,
	}
)

func (x SendMode) Enum() *SendMode {
	p := new(SendMode)
	*p = x
	return p
}

func (x SendMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gimbal_proto_enumTypes[2].Descriptor()
}

func (SendMode) Type() protoreflect.EnumType {
	return &file_gimbal_proto_enumTypes[2]
}

func (x SendMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMode.Descriptor instead.
func (SendMode) EnumDescriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{2}
}

// Possible results returned for gimbal commands.
type GimbalResult_Result int32

const (
	GimbalResult_RESULT_UNKNOWN          GimbalResult_Result = 0 // Unknown result
	GimbalResult_RESULT_SUCCESS          GimbalResult_Result = 1 // Command was accepted
	GimbalResult_RESULT_ERROR            GimbalResult_Result = 2 // Error occurred sending the command
	GimbalResult_RESULT_TIMEOUT          GimbalResult_Result = 3 // Command timed out
	GimbalResult_RESULT_UNSUPPORTED      GimbalResult_Result = 4 // Functionality not supported
	GimbalResult_RESULT_NO_SYSTEM        GimbalResult_Result = 5 // No system connected
	GimbalResult_RESULT_INVALID_ARGUMENT GimbalResult_Result = 6 // Invalid argument
)

// Enum value maps for GimbalResult_Result.
var (
	GimbalResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_ERROR",
		3: "RESULT_TIMEOUT",
		4: "RESULT_UNSUPPORTED",
		5: "RESULT_NO_SYSTEM",
		6: "RESULT_INVALID_ARGUMENT",
	}
	GimbalResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":          0,
		"RESULT_SUCCESS":          1,
		"RESULT_ERROR":            2,
		"RESULT_TIMEOUT":          3,
		"RESULT_UNSUPPORTED":      4,
		"RESULT_NO_SYSTEM":        5,
		"RESULT_INVALID_ARGUMENT": 6,
	}
)

func (x GimbalResult_Result) Enum() *GimbalResult_Result {
	p := new(GimbalResult_Result)
	*p = x
	return p
}

func (x GimbalResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GimbalResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_gimbal_proto_enumTypes[3].Descriptor()
}

func (GimbalResult_Result) Type() protoreflect.EnumType {
	return &file_gimbal_proto_enumTypes[3]
}

func (x GimbalResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GimbalResult_Result.Descriptor instead.
func (GimbalResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{27, 0}
}

type SetAnglesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalId      int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"`                                         // Gimbal id to address (0 for all gimbals)
	RollDeg       float32                `protobuf:"fixed32,2,opt,name=roll_deg,json=rollDeg,proto3" json:"roll_deg,omitempty"`                                           // Roll angle in degrees (negative down on the right)
	PitchDeg      float32                `protobuf:"fixed32,3,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"`                                        // Pitch angle in degrees (negative points down)
	YawDeg        float32                `protobuf:"fixed32,4,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`                                              // Yaw angle in degrees (positive is clock-wise, range: -180 to 180 or 0 to 360)
	GimbalMode    GimbalMode             `protobuf:"varint,5,opt,name=gimbal_mode,json=gimbalMode,proto3,enum=mavsdk.rpc.gimbal.GimbalMode" json:"gimbal_mode,omitempty"` // Gimbal mode to use
	SendMode      SendMode               `protobuf:"varint,6,opt,name=send_mode,json=sendMode,proto3,enum=mavsdk.rpc.gimbal.SendMode" json:"send_mode,omitempty"`         // Send mode of command/setpoint
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAnglesRequest) Reset() {
	*x = SetAnglesRequest{}
	mi := &file_gimbal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAnglesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAnglesRequest) ProtoMessage() {}

func (x *SetAnglesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAnglesRequest.ProtoReflect.Descriptor instead.
func (*SetAnglesRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{0}
}

func (x *SetAnglesRequest) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

func (x *SetAnglesRequest) GetRollDeg() float32 {
	if x != nil {
		return x.RollDeg
	}
	return 0
}

func (x *SetAnglesRequest) GetPitchDeg() float32 {
	if x != nil {
		return x.PitchDeg
	}
	return 0
}

func (x *SetAnglesRequest) GetYawDeg() float32 {
	if x != nil {
		return x.YawDeg
	}
	return 0
}

func (x *SetAnglesRequest) GetGimbalMode() GimbalMode {
	if x != nil {
		return x.GimbalMode
	}
	return GimbalMode_GIMBAL_MODE_YAW_FOLLOW
}

func (x *SetAnglesRequest) GetSendMode() SendMode {
	if x != nil {
		return x.SendMode
	}
	return SendMode_SEND_MODE_ONCE
}

type SetAnglesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalResult  *GimbalResult          `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAnglesResponse) Reset() {
	*x = SetAnglesResponse{}
	mi := &file_gimbal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAnglesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAnglesResponse) ProtoMessage() {}

func (x *SetAnglesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAnglesResponse.ProtoReflect.Descriptor instead.
func (*SetAnglesResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{1}
}

func (x *SetAnglesResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type SetAngularRatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalId      int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"`                                         // Gimbal id to address (0 for all gimbals)
	RollRateDegS  float32                `protobuf:"fixed32,2,opt,name=roll_rate_deg_s,json=rollRateDegS,proto3" json:"roll_rate_deg_s,omitempty"`                        // Angular rate around roll axis in degrees/second (negative down on the right)
	PitchRateDegS float32                `protobuf:"fixed32,3,opt,name=pitch_rate_deg_s,json=pitchRateDegS,proto3" json:"pitch_rate_deg_s,omitempty"`                     // Angular rate around pitch axis in degrees/second (negative downward)
	YawRateDegS   float32                `protobuf:"fixed32,4,opt,name=yaw_rate_deg_s,json=yawRateDegS,proto3" json:"yaw_rate_deg_s,omitempty"`                           // Angular rate around yaw axis in degrees/second (positive is clock-wise)
	GimbalMode    GimbalMode             `protobuf:"varint,5,opt,name=gimbal_mode,json=gimbalMode,proto3,enum=mavsdk.rpc.gimbal.GimbalMode" json:"gimbal_mode,omitempty"` // Gimbal mode to use
	SendMode      SendMode               `protobuf:"varint,6,opt,name=send_mode,json=sendMode,proto3,enum=mavsdk.rpc.gimbal.SendMode" json:"send_mode,omitempty"`         // Send mode of command/setpoint
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAngularRatesRequest) Reset() {
	*x = SetAngularRatesRequest{}
	mi := &file_gimbal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAngularRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAngularRatesRequest) ProtoMessage() {}

func (x *SetAngularRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAngularRatesRequest.ProtoReflect.Descriptor instead.
func (*SetAngularRatesRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{2}
}

func (x *SetAngularRatesRequest) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

func (x *SetAngularRatesRequest) GetRollRateDegS() float32 {
	if x != nil {
		return x.RollRateDegS
	}
	return 0
}

func (x *SetAngularRatesRequest) GetPitchRateDegS() float32 {
	if x != nil {
		return x.PitchRateDegS
	}
	return 0
}

func (x *SetAngularRatesRequest) GetYawRateDegS() float32 {
	if x != nil {
		return x.YawRateDegS
	}
	return 0
}

func (x *SetAngularRatesRequest) GetGimbalMode() GimbalMode {
	if x != nil {
		return x.GimbalMode
	}
	return GimbalMode_GIMBAL_MODE_YAW_FOLLOW
}

func (x *SetAngularRatesRequest) GetSendMode() SendMode {
	if x != nil {
		return x.SendMode
	}
	return SendMode_SEND_MODE_ONCE
}

type SetAngularRatesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalResult  *GimbalResult          `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetAngularRatesResponse) Reset() {
	*x = SetAngularRatesResponse{}
	mi := &file_gimbal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAngularRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAngularRatesResponse) ProtoMessage() {}

func (x *SetAngularRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAngularRatesResponse.ProtoReflect.Descriptor instead.
func (*SetAngularRatesResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{3}
}

func (x *SetAngularRatesResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type SetRoiLocationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalId      int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"`              // Gimbal id to address (0 for all gimbals)
	LatitudeDeg   float64                `protobuf:"fixed64,2,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`    // Latitude in degrees
	LongitudeDeg  float64                `protobuf:"fixed64,3,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"` // Longitude in degrees
	AltitudeM     float32                `protobuf:"fixed32,4,opt,name=altitude_m,json=altitudeM,proto3" json:"altitude_m,omitempty"`          // Altitude in metres (AMSL)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRoiLocationRequest) Reset() {
	*x = SetRoiLocationRequest{}
	mi := &file_gimbal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRoiLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRoiLocationRequest) ProtoMessage() {}

func (x *SetRoiLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRoiLocationRequest.ProtoReflect.Descriptor instead.
func (*SetRoiLocationRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{4}
}

func (x *SetRoiLocationRequest) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

func (x *SetRoiLocationRequest) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *SetRoiLocationRequest) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *SetRoiLocationRequest) GetAltitudeM() float32 {
	if x != nil {
		return x.AltitudeM
	}
	return 0
}

type SetRoiLocationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalResult  *GimbalResult          `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRoiLocationResponse) Reset() {
	*x = SetRoiLocationResponse{}
	mi := &file_gimbal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRoiLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRoiLocationResponse) ProtoMessage() {}

func (x *SetRoiLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRoiLocationResponse.ProtoReflect.Descriptor instead.
func (*SetRoiLocationResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{5}
}

func (x *SetRoiLocationResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type TakeControlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalId      int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"`                                             // Gimbal id to address (0 for all gimbals)
	ControlMode   ControlMode            `protobuf:"varint,2,opt,name=control_mode,json=controlMode,proto3,enum=mavsdk.rpc.gimbal.ControlMode" json:"control_mode,omitempty"` // Control mode (primary or secondary)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeControlRequest) Reset() {
	*x = TakeControlRequest{}
	mi := &file_gimbal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeControlRequest) ProtoMessage() {}

func (x *TakeControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeControlRequest.ProtoReflect.Descriptor instead.
func (*TakeControlRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{6}
}

func (x *TakeControlRequest) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

func (x *TakeControlRequest) GetControlMode() ControlMode {
	if x != nil {
		return x.ControlMode
	}
	return ControlMode_CONTROL_MODE_NONE
}

type TakeControlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalResult  *GimbalResult          `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeControlResponse) Reset() {
	*x = TakeControlResponse{}
	mi := &file_gimbal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeControlResponse) ProtoMessage() {}

func (x *TakeControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeControlResponse.ProtoReflect.Descriptor instead.
func (*TakeControlResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{7}
}

func (x *TakeControlResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type ReleaseControlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalId      int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"` // Gimbal id to address (0 for all gimbals)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseControlRequest) Reset() {
	*x = ReleaseControlRequest{}
	mi := &file_gimbal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseControlRequest) ProtoMessage() {}

func (x *ReleaseControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseControlRequest.ProtoReflect.Descriptor instead.
func (*ReleaseControlRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{8}
}

func (x *ReleaseControlRequest) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

type ReleaseControlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalResult  *GimbalResult          `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseControlResponse) Reset() {
	*x = ReleaseControlResponse{}
	mi := &file_gimbal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseControlResponse) ProtoMessage() {}

func (x *ReleaseControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseControlResponse.ProtoReflect.Descriptor instead.
func (*ReleaseControlResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{9}
}

func (x *ReleaseControlResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

type SubscribeControlStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeControlStatusRequest) Reset() {
	*x = SubscribeControlStatusRequest{}
	mi := &file_gimbal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeControlStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeControlStatusRequest) ProtoMessage() {}

func (x *SubscribeControlStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeControlStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeControlStatusRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{10}
}

type ControlStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ControlStatus *ControlStatus         `protobuf:"bytes,1,opt,name=control_status,json=controlStatus,proto3" json:"control_status,omitempty"` // Control status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlStatusResponse) Reset() {
	*x = ControlStatusResponse{}
	mi := &file_gimbal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlStatusResponse) ProtoMessage() {}

func (x *ControlStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlStatusResponse.ProtoReflect.Descriptor instead.
func (*ControlStatusResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{11}
}

func (x *ControlStatusResponse) GetControlStatus() *ControlStatus {
	if x != nil {
		return x.ControlStatus
	}
	return nil
}

type GetControlStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalId      int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"` // Gimbal ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetControlStatusRequest) Reset() {
	*x = GetControlStatusRequest{}
	mi := &file_gimbal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetControlStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlStatusRequest) ProtoMessage() {}

func (x *GetControlStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlStatusRequest.ProtoReflect.Descriptor instead.
func (*GetControlStatusRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{12}
}

func (x *GetControlStatusRequest) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

type GetControlStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalResult  *GimbalResult          `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	ControlStatus *ControlStatus         `protobuf:"bytes,2,opt,name=control_status,json=controlStatus,proto3" json:"control_status,omitempty"` // Control status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetControlStatusResponse) Reset() {
	*x = GetControlStatusResponse{}
	mi := &file_gimbal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetControlStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlStatusResponse) ProtoMessage() {}

func (x *GetControlStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlStatusResponse.ProtoReflect.Descriptor instead.
func (*GetControlStatusResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{13}
}

func (x *GetControlStatusResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

func (x *GetControlStatusResponse) GetControlStatus() *ControlStatus {
	if x != nil {
		return x.ControlStatus
	}
	return nil
}

// Quaternion type.
//
// All rotations and axis systems follow the right-hand rule.
// The Hamilton quaternion product definition is used.
// A zero-rotation quaternion is represented by (1,0,0,0).
// The quaternion could also be written as w + xi + yj + zk.
//
// For more info see: https://en.wikipedia.org/wiki/Quaternion
type Quaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	W             float32                `protobuf:"fixed32,1,opt,name=w,proto3" json:"w,omitempty"` // Quaternion entry 0, also denoted as a
	X             float32                `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"` // Quaternion entry 1, also denoted as b
	Y             float32                `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"` // Quaternion entry 2, also denoted as c
	Z             float32                `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"` // Quaternion entry 3, also denoted as d
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_gimbal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{14}
}

func (x *Quaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Quaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Euler angle type.
//
// All rotations and axis systems follow the right-hand rule.
// The Euler angles are converted using the 3-1-2 sequence instead of standard 3-2-1 in order
// to avoid the gimbal lock at 90 degrees down.
//
// For more info see https://en.wikipedia.org/wiki/Euler_angles
type EulerAngle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollDeg       float32                `protobuf:"fixed32,1,opt,name=roll_deg,json=rollDeg,proto3" json:"roll_deg,omitempty"`    // Roll angle in degrees, positive is banking to the right
	PitchDeg      float32                `protobuf:"fixed32,2,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"` // Pitch angle in degrees, positive is pitching nose up
	YawDeg        float32                `protobuf:"fixed32,3,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`       // Yaw angle in degrees, positive is clock-wise seen from above
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EulerAngle) Reset() {
	*x = EulerAngle{}
	mi := &file_gimbal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EulerAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EulerAngle) ProtoMessage() {}

func (x *EulerAngle) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EulerAngle.ProtoReflect.Descriptor instead.
func (*EulerAngle) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{15}
}

func (x *EulerAngle) GetRollDeg() float32 {
	if x != nil {
		return x.RollDeg
	}
	return 0
}

func (x *EulerAngle) GetPitchDeg() float32 {
	if x != nil {
		return x.PitchDeg
	}
	return 0
}

func (x *EulerAngle) GetYawDeg() float32 {
	if x != nil {
		return x.YawDeg
	}
	return 0
}

// Gimbal angular rate type
type AngularVelocityBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollRadS      float32                `protobuf:"fixed32,1,opt,name=roll_rad_s,json=rollRadS,proto3" json:"roll_rad_s,omitempty"`    // Roll angular velocity
	PitchRadS     float32                `protobuf:"fixed32,2,opt,name=pitch_rad_s,json=pitchRadS,proto3" json:"pitch_rad_s,omitempty"` // Pitch angular velocity
	YawRadS       float32                `protobuf:"fixed32,3,opt,name=yaw_rad_s,json=yawRadS,proto3" json:"yaw_rad_s,omitempty"`       // Yaw angular velocity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AngularVelocityBody) Reset() {
	*x = AngularVelocityBody{}
	mi := &file_gimbal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngularVelocityBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngularVelocityBody) ProtoMessage() {}

func (x *AngularVelocityBody) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngularVelocityBody.ProtoReflect.Descriptor instead.
func (*AngularVelocityBody) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{16}
}

func (x *AngularVelocityBody) GetRollRadS() float32 {
	if x != nil {
		return x.RollRadS
	}
	return 0
}

func (x *AngularVelocityBody) GetPitchRadS() float32 {
	if x != nil {
		return x.PitchRadS
	}
	return 0
}

func (x *AngularVelocityBody) GetYawRadS() float32 {
	if x != nil {
		return x.YawRadS
	}
	return 0
}

// Gimbal attitude type
type Attitude struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	GimbalId          int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"`                             // Gimbal ID
	EulerAngleForward *EulerAngle            `protobuf:"bytes,2,opt,name=euler_angle_forward,json=eulerAngleForward,proto3" json:"euler_angle_forward,omitempty"` // Euler angle relative to forward
	QuaternionForward *Quaternion            `protobuf:"bytes,3,opt,name=quaternion_forward,json=quaternionForward,proto3" json:"quaternion_forward,omitempty"`   // Quaternion relative to forward
	EulerAngleNorth   *EulerAngle            `protobuf:"bytes,4,opt,name=euler_angle_north,json=eulerAngleNorth,proto3" json:"euler_angle_north,omitempty"`       // Euler angle relative to North
	QuaternionNorth   *Quaternion            `protobuf:"bytes,5,opt,name=quaternion_north,json=quaternionNorth,proto3" json:"quaternion_north,omitempty"`         // Quaternion relative to North
	AngularVelocity   *AngularVelocityBody   `protobuf:"bytes,6,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"`         // The angular rate
	TimestampUs       uint64                 `protobuf:"varint,7,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"`                    // Timestamp in microseconds
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Attitude) Reset() {
	*x = Attitude{}
	mi := &file_gimbal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attitude) ProtoMessage() {}

func (x *Attitude) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attitude.ProtoReflect.Descriptor instead.
func (*Attitude) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{17}
}

func (x *Attitude) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

func (x *Attitude) GetEulerAngleForward() *EulerAngle {
	if x != nil {
		return x.EulerAngleForward
	}
	return nil
}

func (x *Attitude) GetQuaternionForward() *Quaternion {
	if x != nil {
		return x.QuaternionForward
	}
	return nil
}

func (x *Attitude) GetEulerAngleNorth() *EulerAngle {
	if x != nil {
		return x.EulerAngleNorth
	}
	return nil
}

func (x *Attitude) GetQuaternionNorth() *Quaternion {
	if x != nil {
		return x.QuaternionNorth
	}
	return nil
}

func (x *Attitude) GetAngularVelocity() *AngularVelocityBody {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

func (x *Attitude) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

type SubscribeAttitudeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAttitudeRequest) Reset() {
	*x = SubscribeAttitudeRequest{}
	mi := &file_gimbal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAttitudeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAttitudeRequest) ProtoMessage() {}

func (x *SubscribeAttitudeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAttitudeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAttitudeRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{18}
}

type AttitudeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attitude      *Attitude              `protobuf:"bytes,1,opt,name=attitude,proto3" json:"attitude,omitempty"` // The attitude
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttitudeResponse) Reset() {
	*x = AttitudeResponse{}
	mi := &file_gimbal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttitudeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttitudeResponse) ProtoMessage() {}

func (x *AttitudeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttitudeResponse.ProtoReflect.Descriptor instead.
func (*AttitudeResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{19}
}

func (x *AttitudeResponse) GetAttitude() *Attitude {
	if x != nil {
		return x.Attitude
	}
	return nil
}

type GetAttitudeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalId      int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"` // Gimbal ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttitudeRequest) Reset() {
	*x = GetAttitudeRequest{}
	mi := &file_gimbal_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttitudeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttitudeRequest) ProtoMessage() {}

func (x *GetAttitudeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttitudeRequest.ProtoReflect.Descriptor instead.
func (*GetAttitudeRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{20}
}

func (x *GetAttitudeRequest) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

type GetAttitudeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalResult  *GimbalResult          `protobuf:"bytes,1,opt,name=gimbal_result,json=gimbalResult,proto3" json:"gimbal_result,omitempty"`
	Attitude      *Attitude              `protobuf:"bytes,2,opt,name=attitude,proto3" json:"attitude,omitempty"` // The attitude
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttitudeResponse) Reset() {
	*x = GetAttitudeResponse{}
	mi := &file_gimbal_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttitudeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttitudeResponse) ProtoMessage() {}

func (x *GetAttitudeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttitudeResponse.ProtoReflect.Descriptor instead.
func (*GetAttitudeResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{21}
}

func (x *GetAttitudeResponse) GetGimbalResult() *GimbalResult {
	if x != nil {
		return x.GimbalResult
	}
	return nil
}

func (x *GetAttitudeResponse) GetAttitude() *Attitude {
	if x != nil {
		return x.Attitude
	}
	return nil
}

type SubscribeGimbalListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeGimbalListRequest) Reset() {
	*x = SubscribeGimbalListRequest{}
	mi := &file_gimbal_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeGimbalListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeGimbalListRequest) ProtoMessage() {}

func (x *SubscribeGimbalListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeGimbalListRequest.ProtoReflect.Descriptor instead.
func (*SubscribeGimbalListRequest) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{22}
}

type GimbalListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GimbalList    *GimbalList            `protobuf:"bytes,1,opt,name=gimbal_list,json=gimbalList,proto3" json:"gimbal_list,omitempty"` // Gimbal list
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GimbalListResponse) Reset() {
	*x = GimbalListResponse{}
	mi := &file_gimbal_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GimbalListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalListResponse) ProtoMessage() {}

func (x *GimbalListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalListResponse.ProtoReflect.Descriptor instead.
func (*GimbalListResponse) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{23}
}

func (x *GimbalListResponse) GetGimbalList() *GimbalList {
	if x != nil {
		return x.GimbalList
	}
	return nil
}

// Gimbal list item
type GimbalItem struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	GimbalId                 int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"`                                                     // ID to address it, starting at 1 (0 means all gimbals)
	VendorName               string                 `protobuf:"bytes,2,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                                // Vendor name
	ModelName                string                 `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                                   // Model name
	CustomName               string                 `protobuf:"bytes,4,opt,name=custom_name,json=customName,proto3" json:"custom_name,omitempty"`                                                // Custom name name
	GimbalManagerComponentId int32                  `protobuf:"varint,5,opt,name=gimbal_manager_component_id,json=gimbalManagerComponentId,proto3" json:"gimbal_manager_component_id,omitempty"` // MAVLink component of gimbal manager, for debugging purposes
	GimbalDeviceId           int32                  `protobuf:"varint,6,opt,name=gimbal_device_id,json=gimbalDeviceId,proto3" json:"gimbal_device_id,omitempty"`                                 // MAVLink component of gimbal device
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GimbalItem) Reset() {
	*x = GimbalItem{}
	mi := &file_gimbal_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GimbalItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalItem) ProtoMessage() {}

func (x *GimbalItem) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalItem.ProtoReflect.Descriptor instead.
func (*GimbalItem) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{24}
}

func (x *GimbalItem) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

func (x *GimbalItem) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *GimbalItem) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *GimbalItem) GetCustomName() string {
	if x != nil {
		return x.CustomName
	}
	return ""
}

func (x *GimbalItem) GetGimbalManagerComponentId() int32 {
	if x != nil {
		return x.GimbalManagerComponentId
	}
	return 0
}

func (x *GimbalItem) GetGimbalDeviceId() int32 {
	if x != nil {
		return x.GimbalDeviceId
	}
	return 0
}

// Gimbal list
type GimbalList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gimbals       []*GimbalItem          `protobuf:"bytes,1,rep,name=gimbals,proto3" json:"gimbals,omitempty"` // Gimbal items.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GimbalList) Reset() {
	*x = GimbalList{}
	mi := &file_gimbal_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GimbalList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalList) ProtoMessage() {}

func (x *GimbalList) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalList.ProtoReflect.Descriptor instead.
func (*GimbalList) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{25}
}

func (x *GimbalList) GetGimbals() []*GimbalItem {
	if x != nil {
		return x.Gimbals
	}
	return nil
}

// Control status
type ControlStatus struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	GimbalId               int32                  `protobuf:"varint,1,opt,name=gimbal_id,json=gimbalId,proto3" json:"gimbal_id,omitempty"`                                             // Gimbal ID
	ControlMode            ControlMode            `protobuf:"varint,2,opt,name=control_mode,json=controlMode,proto3,enum=mavsdk.rpc.gimbal.ControlMode" json:"control_mode,omitempty"` // Control mode (none, primary or secondary)
	SysidPrimaryControl    int32                  `protobuf:"varint,3,opt,name=sysid_primary_control,json=sysidPrimaryControl,proto3" json:"sysid_primary_control,omitempty"`          // Sysid of the component that has primary control over the gimbal (0 if no one is in control)
	CompidPrimaryControl   int32                  `protobuf:"varint,4,opt,name=compid_primary_control,json=compidPrimaryControl,proto3" json:"compid_primary_control,omitempty"`       // Compid of the component that has primary control over the gimbal (0 if no one is in control)
	SysidSecondaryControl  int32                  `protobuf:"varint,5,opt,name=sysid_secondary_control,json=sysidSecondaryControl,proto3" json:"sysid_secondary_control,omitempty"`    // Sysid of the component that has secondary control over the gimbal (0 if no one is in control)
	CompidSecondaryControl int32                  `protobuf:"varint,6,opt,name=compid_secondary_control,json=compidSecondaryControl,proto3" json:"compid_secondary_control,omitempty"` // Compid of the component that has secondary control over the gimbal (0 if no one is in control)
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ControlStatus) Reset() {
	*x = ControlStatus{}
	mi := &file_gimbal_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlStatus) ProtoMessage() {}

func (x *ControlStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlStatus.ProtoReflect.Descriptor instead.
func (*ControlStatus) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{26}
}

func (x *ControlStatus) GetGimbalId() int32 {
	if x != nil {
		return x.GimbalId
	}
	return 0
}

func (x *ControlStatus) GetControlMode() ControlMode {
	if x != nil {
		return x.ControlMode
	}
	return ControlMode_CONTROL_MODE_NONE
}

func (x *ControlStatus) GetSysidPrimaryControl() int32 {
	if x != nil {
		return x.SysidPrimaryControl
	}
	return 0
}

func (x *ControlStatus) GetCompidPrimaryControl() int32 {
	if x != nil {
		return x.CompidPrimaryControl
	}
	return 0
}

func (x *ControlStatus) GetSysidSecondaryControl() int32 {
	if x != nil {
		return x.SysidSecondaryControl
	}
	return 0
}

func (x *ControlStatus) GetCompidSecondaryControl() int32 {
	if x != nil {
		return x.CompidSecondaryControl
	}
	return 0
}

// Result type.
type GimbalResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        GimbalResult_Result    `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.gimbal.GimbalResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr     string                 `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                      // Human-readable English string describing the result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GimbalResult) Reset() {
	*x = GimbalResult{}
	mi := &file_gimbal_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GimbalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GimbalResult) ProtoMessage() {}

func (x *GimbalResult) ProtoReflect() protoreflect.Message {
	mi := &file_gimbal_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GimbalResult.ProtoReflect.Descriptor instead.
func (*GimbalResult) Descriptor() ([]byte, []int) {
	return file_gimbal_proto_rawDescGZIP(), []int{27}
}

func (x *GimbalResult) GetResult() GimbalResult_Result {
	if x != nil {
		return x.Result
	}
	return GimbalResult_RESULT_UNKNOWN
}

func (x *GimbalResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_gimbal_proto protoreflect.FileDescriptor

const file_gimbal_proto_rawDesc = "" +
	"\n" +
	"\fgimbal.proto\x12\x11mavsdk.rpc.gimbal\x1a\x14mavsdk_options.proto\"\xfa\x01\n" +
	"\x10SetAnglesRequest\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\x12\x19\n" +
	"\broll_deg\x18\x02 \x01(\x02R\arollDeg\x12\x1b\n" +
	"\tpitch_deg\x18\x03 \x01(\x02R\bpitchDeg\x12\x17\n" +
	"\ayaw_deg\x18\x04 \x01(\x02R\x06yawDeg\x12>\n" +
	"\vgimbal_mode\x18\x05 \x01(\x0e2\x1d.mavsdk.rpc.gimbal.GimbalModeR\n" +
	"gimbalMode\x128\n" +
	"\tsend_mode\x18\x06 \x01(\x0e2\x1b.mavsdk.rpc.gimbal.SendModeR\bsendMode\"Y\n" +
	"\x11SetAnglesResponse\x12D\n" +
	"\rgimbal_result\x18\x01 \x01(\v2\x1f.mavsdk.rpc.gimbal.GimbalResultR\fgimbalResult\"\xa4\x02\n" +
	"\x16SetAngularRatesRequest\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\x12%\n" +
	"\x0froll_rate_deg_s\x18\x02 \x01(\x02R\frollRateDegS\x12'\n" +
	"\x10pitch_rate_deg_s\x18\x03 \x01(\x02R\rpitchRateDegS\x12#\n" +
	"\x0eyaw_rate_deg_s\x18\x04 \x01(\x02R\vyawRateDegS\x12>\n" +
	"\vgimbal_mode\x18\x05 \x01(\x0e2\x1d.mavsdk.rpc.gimbal.GimbalModeR\n" +
	"gimbalMode\x128\n" +
	"\tsend_mode\x18\x06 \x01(\x0e2\x1b.mavsdk.rpc.gimbal.SendModeR\bsendMode\"_\n" +
	"\x17SetAngularRatesResponse\x12D\n" +
	"\rgimbal_result\x18\x01 \x01(\v2\x1f.mavsdk.rpc.gimbal.GimbalResultR\fgimbalResult\"\x9b\x01\n" +
	"\x15SetRoiLocationRequest\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\x12!\n" +
	"\flatitude_deg\x18\x02 \x01(\x01R\vlatitudeDeg\x12#\n" +
	"\rlongitude_deg\x18\x03 \x01(\x01R\flongitudeDeg\x12\x1d\n" +
	"\n" +
	"altitude_m\x18\x04 \x01(\x02R\taltitudeM\"^\n" +
	"\x16SetRoiLocationResponse\x12D\n" +
	"\rgimbal_result\x18\x01 \x01(\v2\x1f.mavsdk.rpc.gimbal.GimbalResultR\fgimbalResult\"t\n" +
	"\x12TakeControlRequest\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\x12A\n" +
	"\fcontrol_mode\x18\x02 \x01(\x0e2\x1e.mavsdk.rpc.gimbal.ControlModeR\vcontrolMode\"[\n" +
	"\x13TakeControlResponse\x12D\n" +
	"\rgimbal_result\x18\x01 \x01(\v2\x1f.mavsdk.rpc.gimbal.GimbalResultR\fgimbalResult\"4\n" +
	"\x15ReleaseControlRequest\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\"^\n" +
	"\x16ReleaseControlResponse\x12D\n" +
	"\rgimbal_result\x18\x01 \x01(\v2\x1f.mavsdk.rpc.gimbal.GimbalResultR\fgimbalResult\"\x1f\n" +
	"\x1dSubscribeControlStatusRequest\"`\n" +
	"\x15ControlStatusResponse\x12G\n" +
	"\x0econtrol_status\x18\x01 \x01(\v2 .mavsdk.rpc.gimbal.ControlStatusR\rcontrolStatus\"6\n" +
	"\x17GetControlStatusRequest\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\"\xa9\x01\n" +
	"\x18GetControlStatusResponse\x12D\n" +
	"\rgimbal_result\x18\x01 \x01(\v2\x1f.mavsdk.rpc.gimbal.GimbalResultR\fgimbalResult\x12G\n" +
	"\x0econtrol_status\x18\x02 \x01(\v2 .mavsdk.rpc.gimbal.ControlStatusR\rcontrolStatus\"h\n" +
	"\n" +
	"Quaternion\x12\x15\n" +
	"\x01w\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01w\x12\x15\n" +
	"\x01x\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01x\x12\x15\n" +
	"\x01y\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01y\x12\x15\n" +
	"\x01z\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01z\"x\n" +
	"\n" +
	"EulerAngle\x12\"\n" +
	"\broll_deg\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\arollDeg\x12$\n" +
	"\tpitch_deg\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\bpitchDeg\x12 \n" +
	"\ayaw_deg\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x06yawDeg\"\x8a\x01\n" +
	"\x13AngularVelocityBody\x12%\n" +
	"\n" +
	"roll_rad_s\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\brollRadS\x12'\n" +
	"\vpitch_rad_s\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\tpitchRadS\x12#\n" +
	"\tyaw_rad_s\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\ayawRadS\"\xcf\x03\n" +
	"\bAttitude\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\x12M\n" +
	"\x13euler_angle_forward\x18\x02 \x01(\v2\x1d.mavsdk.rpc.gimbal.EulerAngleR\x11eulerAngleForward\x12L\n" +
	"\x12quaternion_forward\x18\x03 \x01(\v2\x1d.mavsdk.rpc.gimbal.QuaternionR\x11quaternionForward\x12I\n" +
	"\x11euler_angle_north\x18\x04 \x01(\v2\x1d.mavsdk.rpc.gimbal.EulerAngleR\x0feulerAngleNorth\x12H\n" +
	"\x10quaternion_north\x18\x05 \x01(\v2\x1d.mavsdk.rpc.gimbal.QuaternionR\x0fquaternionNorth\x12Q\n" +
	"\x10angular_velocity\x18\x06 \x01(\v2&.mavsdk.rpc.gimbal.AngularVelocityBodyR\x0fangularVelocity\x12!\n" +
	"\ftimestamp_us\x18\a \x01(\x04R\vtimestampUs\"\x1a\n" +
	"\x18SubscribeAttitudeRequest\"K\n" +
	"\x10AttitudeResponse\x127\n" +
	"\battitude\x18\x01 \x01(\v2\x1b.mavsdk.rpc.gimbal.AttitudeR\battitude\"1\n" +
	"\x12GetAttitudeRequest\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\"\x94\x01\n" +
	"\x13GetAttitudeResponse\x12D\n" +
	"\rgimbal_result\x18\x01 \x01(\v2\x1f.mavsdk.rpc.gimbal.GimbalResultR\fgimbalResult\x127\n" +
	"\battitude\x18\x02 \x01(\v2\x1b.mavsdk.rpc.gimbal.AttitudeR\battitude\"\x1c\n" +
	"\x1aSubscribeGimbalListRequest\"T\n" +
	"\x12GimbalListResponse\x12>\n" +
	"\vgimbal_list\x18\x01 \x01(\v2\x1d.mavsdk.rpc.gimbal.GimbalListR\n" +
	"gimbalList\"\xf3\x01\n" +
	"\n" +
	"GimbalItem\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\x12\x1f\n" +
	"\vvendor_name\x18\x02 \x01(\tR\n" +
	"vendorName\x12\x1d\n" +
	"\n" +
	"model_name\x18\x03 \x01(\tR\tmodelName\x12\x1f\n" +
	"\vcustom_name\x18\x04 \x01(\tR\n" +
	"customName\x12=\n" +
	"\x1bgimbal_manager_component_id\x18\x05 \x01(\x05R\x18gimbalManagerComponentId\x12(\n" +
	"\x10gimbal_device_id\x18\x06 \x01(\x05R\x0egimbalDeviceId\"E\n" +
	"\n" +
	"GimbalList\x127\n" +
	"\agimbals\x18\x01 \x03(\v2\x1d.mavsdk.rpc.gimbal.GimbalItemR\agimbals\"\xcb\x02\n" +
	"\rControlStatus\x12\x1b\n" +
	"\tgimbal_id\x18\x01 \x01(\x05R\bgimbalId\x12A\n" +
	"\fcontrol_mode\x18\x02 \x01(\x0e2\x1e.mavsdk.rpc.gimbal.ControlModeR\vcontrolMode\x122\n" +
	"\x15sysid_primary_control\x18\x03 \x01(\x05R\x13sysidPrimaryControl\x124\n" +
	"\x16compid_primary_control\x18\x04 \x01(\x05R\x14compidPrimaryControl\x126\n" +
	"\x17sysid_secondary_control\x18\x05 \x01(\x05R\x15sysidSecondaryControl\x128\n" +
	"\x18compid_secondary_control\x18\x06 \x01(\x05R\x16compidSecondaryControl\"\x91\x02\n" +
	"\fGimbalResult\x12>\n" +
	"\x06result\x18\x01 \x01(\x0e2&.mavsdk.rpc.gimbal.GimbalResult.ResultR\x06result\x12\x1d\n" +
	"\n" +
	"result_str\x18\x02 \x01(\tR\tresultStr\"\xa1\x01\n" +
	"\x06Result\x12\x12\n" +
	"\x0eRESULT_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eRESULT_SUCCESS\x10\x01\x12\x10\n" +
	"\fRESULT_ERROR\x10\x02\x12\x12\n" +
	"\x0eRESULT_TIMEOUT\x10\x03\x12\x16\n" +
	"\x12RESULT_UNSUPPORTED\x10\x04\x12\x14\n" +
	"\x10RESULT_NO_SYSTEM\x10\x05\x12\x1b\n" +
	"\x17RESULT_INVALID_ARGUMENT\x10\x06*B\n" +
	"\n" +
	"GimbalMode\x12\x1a\n" +
	"\x16GIMBAL_MODE_YAW_FOLLOW\x10\x00\x12\x18\n" +
	"\x14GIMBAL_MODE_YAW_LOCK\x10\x01*Z\n" +
	"\vControlMode\x12\x15\n" +
	"\x11CONTROL_MODE_NONE\x10\x00\x12\x18\n" +
	"\x14CONTROL_MODE_PRIMARY\x10\x01\x12\x1a\n" +
	"\x16CONTROL_MODE_SECONDARY\x10\x02*4\n" +
	"\bSendMode\x12\x12\n" +
	"\x0eSEND_MODE_ONCE\x10\x00\x12\x14\n" +
	"\x10SEND_MODE_STREAM\x10\x012\xbc\b\n" +
	"\rGimbalService\x12X\n" +
	"\tSetAngles\x12#.mavsdk.rpc.gimbal.SetAnglesRequest\x1a$.mavsdk.rpc.gimbal.SetAnglesResponse\"\x00\x12j\n" +
	"\x0fSetAngularRates\x12).mavsdk.rpc.gimbal.SetAngularRatesRequest\x1a*.mavsdk.rpc.gimbal.SetAngularRatesResponse\"\x00\x12g\n" +
	"\x0eSetRoiLocation\x12(.mavsdk.rpc.gimbal.SetRoiLocationRequest\x1a).mavsdk.rpc.gimbal.SetRoiLocationResponse\"\x00\x12^\n" +
	"\vTakeControl\x12%.mavsdk.rpc.gimbal.TakeControlRequest\x1a&.mavsdk.rpc.gimbal.TakeControlResponse\"\x00\x12g\n" +
	"\x0eReleaseControl\x12(.mavsdk.rpc.gimbal.ReleaseControlRequest\x1a).mavsdk.rpc.gimbal.ReleaseControlResponse\"\x00\x12o\n" +
	"\x13SubscribeGimbalList\x12-.mavsdk.rpc.gimbal.SubscribeGimbalListRequest\x1a%.mavsdk.rpc.gimbal.GimbalListResponse\"\x000\x01\x12|\n" +
	"\x16SubscribeControlStatus\x120.mavsdk.rpc.gimbal.SubscribeControlStatusRequest\x1a(.mavsdk.rpc.gimbal.ControlStatusResponse\"\x04\x80\xb5\x18\x000\x01\x12q\n" +
	"\x10GetControlStatus\x12*.mavsdk.rpc.gimbal.GetControlStatusRequest\x1a+.mavsdk.rpc.gimbal.GetControlStatusResponse\"\x04\x80\xb5\x18\x01\x12m\n" +
	"\x11SubscribeAttitude\x12+.mavsdk.rpc.gimbal.SubscribeAttitudeRequest\x1a#.mavsdk.rpc.gimbal.AttitudeResponse\"\x04\x80\xb5\x18\x000\x01\x12b\n" +
	"\vGetAttitude\x12%.mavsdk.rpc.gimbal.GetAttitudeRequest\x1a&.mavsdk.rpc.gimbal.GetAttitudeResponse\"\x04\x80\xb5\x18\x01B\x17B\vGimbalProtoZ\b.;gimbalb\x06proto3"

var (
	file_gimbal_proto_rawDescOnce sync.Once
	file_gimbal_proto_rawDescData []byte
)

func file_gimbal_proto_rawDescGZIP() []byte {
	file_gimbal_proto_rawDescOnce.Do(func() {
		file_gimbal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gimbal_proto_rawDesc), len(file_gimbal_proto_rawDesc)))
	})
	return file_gimbal_proto_rawDescData
}

var file_gimbal_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_gimbal_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_gimbal_proto_goTypes = []any{
	(GimbalMode)(0),                       // 0: mavsdk.rpc.gimbal.GimbalMode
	(ControlMode)(0),                      // 1: mavsdk.rpc.gimbal.ControlMode
	(SendMode)(0),                         // 2: mavsdk.rpc.gimbal.SendMode
	(GimbalResult_Result)(0),              // 3: mavsdk.rpc.gimbal.GimbalResult.Result
	(*SetAnglesRequest)(nil),              // 4: mavsdk.rpc.gimbal.SetAnglesRequest
	(*SetAnglesResponse)(nil),             // 5: mavsdk.rpc.gimbal.SetAnglesResponse
	(*SetAngularRatesRequest)(nil),        // 6: mavsdk.rpc.gimbal.SetAngularRatesRequest
	(*SetAngularRatesResponse)(nil),       // 7: mavsdk.rpc.gimbal.SetAngularRatesResponse
	(*SetRoiLocationRequest)(nil),         // 8: mavsdk.rpc.gimbal.SetRoiLocationRequest
	(*SetRoiLocationResponse)(nil),        // 9: mavsdk.rpc.gimbal.SetRoiLocationResponse
	(*TakeControlRequest)(nil),            // 10: mavsdk.rpc.gimbal.TakeControlRequest
	(*TakeControlResponse)(nil),           // 11: mavsdk.rpc.gimbal.TakeControlResponse
	(*ReleaseControlRequest)(nil),         // 12: mavsdk.rpc.gimbal.ReleaseControlRequest
	(*ReleaseControlResponse)(nil),        // 13: mavsdk.rpc.gimbal.ReleaseControlResponse
	(*SubscribeControlStatusRequest)(nil), // 14: mavsdk.rpc.gimbal.SubscribeControlStatusRequest
	(*ControlStatusResponse)(nil),         // 15: mavsdk.rpc.gimbal.ControlStatusResponse
	(*GetControlStatusRequest)(nil),       // 16: mavsdk.rpc.gimbal.GetControlStatusRequest
	(*GetControlStatusResponse)(nil),      // 17: mavsdk.rpc.gimbal.GetControlStatusResponse
	(*Quaternion)(nil),                    // 18: mavsdk.rpc.gimbal.Quaternion
	(*EulerAngle)(nil),                    // 19: mavsdk.rpc.gimbal.EulerAngle
	(*AngularVelocityBody)(nil),           // 20: mavsdk.rpc.gimbal.AngularVelocityBody
	(*Attitude)(nil),                      // 21: mavsdk.rpc.gimbal.Attitude
	(*SubscribeAttitudeRequest)(nil),      // 22: mavsdk.rpc.gimbal.SubscribeAttitudeRequest
	(*AttitudeResponse)(nil),              // 23: mavsdk.rpc.gimbal.AttitudeResponse
	(*GetAttitudeRequest)(nil),            // 24: mavsdk.rpc.gimbal.GetAttitudeRequest
	(*GetAttitudeResponse)(nil),           // 25: mavsdk.rpc.gimbal.GetAttitudeResponse
	(*SubscribeGimbalListRequest)(nil),    // 26: mavsdk.rpc.gimbal.SubscribeGimbalListRequest
	(*GimbalListResponse)(nil),            // 27: mavsdk.rpc.gimbal.GimbalListResponse
	(*GimbalItem)(nil),                    // 28: mavsdk.rpc.gimbal.GimbalItem
	(*GimbalList)(nil),                    // 29: mavsdk.rpc.gimbal.GimbalList
	(*ControlStatus)(nil),                 // 30: mavsdk.rpc.gimbal.ControlStatus
	(*GimbalResult)(nil),                  // 31: mavsdk.rpc.gimbal.GimbalResult
}
var file_gimbal_proto_depIdxs = []int32{
	0,  // 0: mavsdk.rpc.gimbal.SetAnglesRequest.gimbal_mode:type_name -> mavsdk.rpc.gimbal.GimbalMode
	2,  // 1: mavsdk.rpc.gimbal.SetAnglesRequest.send_mode:type_name -> mavsdk.rpc.gimbal.SendMode
	31, // 2: mavsdk.rpc.gimbal.SetAnglesResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	0,  // 3: mavsdk.rpc.gimbal.SetAngularRatesRequest.gimbal_mode:type_name -> mavsdk.rpc.gimbal.GimbalMode
	2,  // 4: mavsdk.rpc.gimbal.SetAngularRatesRequest.send_mode:type_name -> mavsdk.rpc.gimbal.SendMode
	31, // 5: mavsdk.rpc.gimbal.SetAngularRatesResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	31, // 6: mavsdk.rpc.gimbal.SetRoiLocationResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	1,  // 7: mavsdk.rpc.gimbal.TakeControlRequest.control_mode:type_name -> mavsdk.rpc.gimbal.ControlMode
	31, // 8: mavsdk.rpc.gimbal.TakeControlResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	31, // 9: mavsdk.rpc.gimbal.ReleaseControlResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	30, // 10: mavsdk.rpc.gimbal.ControlStatusResponse.control_status:type_name -> mavsdk.rpc.gimbal.ControlStatus
	31, // 11: mavsdk.rpc.gimbal.GetControlStatusResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	30, // 12: mavsdk.rpc.gimbal.GetControlStatusResponse.control_status:type_name -> mavsdk.rpc.gimbal.ControlStatus
	19, // 13: mavsdk.rpc.gimbal.Attitude.euler_angle_forward:type_name -> mavsdk.rpc.gimbal.EulerAngle
	18, // 14: mavsdk.rpc.gimbal.Attitude.quaternion_forward:type_name -> mavsdk.rpc.gimbal.Quaternion
	19, // 15: mavsdk.rpc.gimbal.Attitude.euler_angle_north:type_name -> mavsdk.rpc.gimbal.EulerAngle
	18, // 16: mavsdk.rpc.gimbal.Attitude.quaternion_north:type_name -> mavsdk.rpc.gimbal.Quaternion
	20, // 17: mavsdk.rpc.gimbal.Attitude.angular_velocity:type_name -> mavsdk.rpc.gimbal.AngularVelocityBody
	21, // 18: mavsdk.rpc.gimbal.AttitudeResponse.attitude:type_name -> mavsdk.rpc.gimbal.Attitude
	31, // 19: mavsdk.rpc.gimbal.GetAttitudeResponse.gimbal_result:type_name -> mavsdk.rpc.gimbal.GimbalResult
	21, // 20: mavsdk.rpc.gimbal.GetAttitudeResponse.attitude:type_name -> mavsdk.rpc.gimbal.Attitude
	29, // 21: mavsdk.rpc.gimbal.GimbalListResponse.gimbal_list:type_name -> mavsdk.rpc.gimbal.GimbalList
	28, // 22: mavsdk.rpc.gimbal.GimbalList.gimbals:type_name -> mavsdk.rpc.gimbal.GimbalItem
	1,  // 23: mavsdk.rpc.gimbal.ControlStatus.control_mode:type_name -> mavsdk.rpc.gimbal.ControlMode
	3,  // 24: mavsdk.rpc.gimbal.GimbalResult.result:type_name -> mavsdk.rpc.gimbal.GimbalResult.Result
	4,  // 25: mavsdk.rpc.gimbal.GimbalService.SetAngles:input_type -> mavsdk.rpc.gimbal.SetAnglesRequest
	6,  // 26: mavsdk.rpc.gimbal.GimbalService.SetAngularRates:input_type -> mavsdk.rpc.gimbal.SetAngularRatesRequest
	8,  // 27: mavsdk.rpc.gimbal.GimbalService.SetRoiLocation:input_type -> mavsdk.rpc.gimbal.SetRoiLocationRequest
	10, // 28: mavsdk.rpc.gimbal.GimbalService.TakeControl:input_type -> mavsdk.rpc.gimbal.TakeControlRequest
	12, // 29: mavsdk.rpc.gimbal.GimbalService.ReleaseControl:input_type -> mavsdk.rpc.gimbal.ReleaseControlRequest
	26, // 30: mavsdk.rpc.gimbal.GimbalService.SubscribeGimbalList:input_type -> mavsdk.rpc.gimbal.SubscribeGimbalListRequest
	14, // 31: mavsdk.rpc.gimbal.GimbalService.SubscribeControlStatus:input_type -> mavsdk.rpc.gimbal.SubscribeControlStatusRequest
	16, // 32: mavsdk.rpc.gimbal.GimbalService.GetControlStatus:input_type -> mavsdk.rpc.gimbal.GetControlStatusRequest
	22, // 33: mavsdk.rpc.gimbal.GimbalService.SubscribeAttitude:input_type -> mavsdk.rpc.gimbal.SubscribeAttitudeRequest
	24, // 34: mavsdk.rpc.gimbal.GimbalService.GetAttitude:input_type -> mavsdk.rpc.gimbal.GetAttitudeRequest
	5,  // 35: mavsdk.rpc.gimbal.GimbalService.SetAngles:output_type -> mavsdk.rpc.gimbal.SetAnglesResponse
	7,  // 36: mavsdk.rpc.gimbal.GimbalService.SetAngularRates:output_type -> mavsdk.rpc.gimbal.SetAngularRatesResponse
	9,  // 37: mavsdk.rpc.gimbal.GimbalService.SetRoiLocation:output_type -> mavsdk.rpc.gimbal.SetRoiLocationResponse
	11, // 38: mavsdk.rpc.gimbal.GimbalService.TakeControl:output_type -> mavsdk.rpc.gimbal.TakeControlResponse
	13, // 39: mavsdk.rpc.gimbal.GimbalService.ReleaseControl:output_type -> mavsdk.rpc.gimbal.ReleaseControlResponse
	27, // 40: mavsdk.rpc.gimbal.GimbalService.SubscribeGimbalList:output_type -> mavsdk.rpc.gimbal.GimbalListResponse
	15, // 41: mavsdk.rpc.gimbal.GimbalService.SubscribeControlStatus:output_type -> mavsdk.rpc.gimbal.ControlStatusResponse
	17, // 42: mavsdk.rpc.gimbal.GimbalService.GetControlStatus:output_type -> mavsdk.rpc.gimbal.GetControlStatusResponse
	23, // 43: mavsdk.rpc.gimbal.GimbalService.SubscribeAttitude:output_type -> mavsdk.rpc.gimbal.AttitudeResponse
	25, // 44: mavsdk.rpc.gimbal.GimbalService.GetAttitude:output_type -> mavsdk.rpc.gimbal.GetAttitudeResponse
	35, // [35:45] is the sub-list for method output_type
	25, // [25:35] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_gimbal_proto_init() }
func file_gimbal_proto_init() {
	if File_gimbal_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gimbal_proto_rawDesc), len(file_gimbal_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gimbal_proto_goTypes,
		DependencyIndexes: file_gimbal_proto_depIdxs,
		EnumInfos:         file_gimbal_proto_enumTypes,
		MessageInfos:      file_gimbal_proto_msgTypes,
	}.Build()
	File_gimbal_proto = out.File
	file_gimbal_proto_goTypes = nil
	file_gimbal_proto_depIdxs = nil
}
