// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: param_server.proto

package param_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParamServerService_RetrieveParamInt_FullMethodName            = "/mavsdk.rpc.param_server.ParamServerService/RetrieveParamInt"
	ParamServerService_ProvideParamInt_FullMethodName             = "/mavsdk.rpc.param_server.ParamServerService/ProvideParamInt"
	ParamServerService_RetrieveParamFloat_FullMethodName          = "/mavsdk.rpc.param_server.ParamServerService/RetrieveParamFloat"
	ParamServerService_ProvideParamFloat_FullMethodName           = "/mavsdk.rpc.param_server.ParamServerService/ProvideParamFloat"
	ParamServerService_RetrieveParamCustom_FullMethodName         = "/mavsdk.rpc.param_server.ParamServerService/RetrieveParamCustom"
	ParamServerService_ProvideParamCustom_FullMethodName          = "/mavsdk.rpc.param_server.ParamServerService/ProvideParamCustom"
	ParamServerService_RetrieveAllParams_FullMethodName           = "/mavsdk.rpc.param_server.ParamServerService/RetrieveAllParams"
	ParamServerService_SubscribeChangedParamInt_FullMethodName    = "/mavsdk.rpc.param_server.ParamServerService/SubscribeChangedParamInt"
	ParamServerService_SubscribeChangedParamFloat_FullMethodName  = "/mavsdk.rpc.param_server.ParamServerService/SubscribeChangedParamFloat"
	ParamServerService_SubscribeChangedParamCustom_FullMethodName = "/mavsdk.rpc.param_server.ParamServerService/SubscribeChangedParamCustom"
)

// ParamServerServiceClient is the client API for ParamServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provide raw access to retrieve and provide server parameters.
type ParamServerServiceClient interface {
	// Retrieve an int parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	RetrieveParamInt(ctx context.Context, in *RetrieveParamIntRequest, opts ...grpc.CallOption) (*RetrieveParamIntResponse, error)
	// Provide an int parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	ProvideParamInt(ctx context.Context, in *ProvideParamIntRequest, opts ...grpc.CallOption) (*ProvideParamIntResponse, error)
	// Retrieve a float parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	RetrieveParamFloat(ctx context.Context, in *RetrieveParamFloatRequest, opts ...grpc.CallOption) (*RetrieveParamFloatResponse, error)
	// Provide a float parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	ProvideParamFloat(ctx context.Context, in *ProvideParamFloatRequest, opts ...grpc.CallOption) (*ProvideParamFloatResponse, error)
	// Retrieve a custom parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	RetrieveParamCustom(ctx context.Context, in *RetrieveParamCustomRequest, opts ...grpc.CallOption) (*RetrieveParamCustomResponse, error)
	// Provide a custom parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	ProvideParamCustom(ctx context.Context, in *ProvideParamCustomRequest, opts ...grpc.CallOption) (*ProvideParamCustomResponse, error)
	// Retrieve all parameters.
	RetrieveAllParams(ctx context.Context, in *RetrieveAllParamsRequest, opts ...grpc.CallOption) (*RetrieveAllParamsResponse, error)
	// Subscribe to changed int param.
	SubscribeChangedParamInt(ctx context.Context, in *SubscribeChangedParamIntRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChangedParamIntResponse], error)
	// Subscribe to changed float param.
	SubscribeChangedParamFloat(ctx context.Context, in *SubscribeChangedParamFloatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChangedParamFloatResponse], error)
	// Subscribe to changed custom param.
	SubscribeChangedParamCustom(ctx context.Context, in *SubscribeChangedParamCustomRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChangedParamCustomResponse], error)
}

type paramServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParamServerServiceClient(cc grpc.ClientConnInterface) ParamServerServiceClient {
	return &paramServerServiceClient{cc}
}

func (c *paramServerServiceClient) RetrieveParamInt(ctx context.Context, in *RetrieveParamIntRequest, opts ...grpc.CallOption) (*RetrieveParamIntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveParamIntResponse)
	err := c.cc.Invoke(ctx, ParamServerService_RetrieveParamInt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServerServiceClient) ProvideParamInt(ctx context.Context, in *ProvideParamIntRequest, opts ...grpc.CallOption) (*ProvideParamIntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvideParamIntResponse)
	err := c.cc.Invoke(ctx, ParamServerService_ProvideParamInt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServerServiceClient) RetrieveParamFloat(ctx context.Context, in *RetrieveParamFloatRequest, opts ...grpc.CallOption) (*RetrieveParamFloatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveParamFloatResponse)
	err := c.cc.Invoke(ctx, ParamServerService_RetrieveParamFloat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServerServiceClient) ProvideParamFloat(ctx context.Context, in *ProvideParamFloatRequest, opts ...grpc.CallOption) (*ProvideParamFloatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvideParamFloatResponse)
	err := c.cc.Invoke(ctx, ParamServerService_ProvideParamFloat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServerServiceClient) RetrieveParamCustom(ctx context.Context, in *RetrieveParamCustomRequest, opts ...grpc.CallOption) (*RetrieveParamCustomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveParamCustomResponse)
	err := c.cc.Invoke(ctx, ParamServerService_RetrieveParamCustom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServerServiceClient) ProvideParamCustom(ctx context.Context, in *ProvideParamCustomRequest, opts ...grpc.CallOption) (*ProvideParamCustomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvideParamCustomResponse)
	err := c.cc.Invoke(ctx, ParamServerService_ProvideParamCustom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServerServiceClient) RetrieveAllParams(ctx context.Context, in *RetrieveAllParamsRequest, opts ...grpc.CallOption) (*RetrieveAllParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveAllParamsResponse)
	err := c.cc.Invoke(ctx, ParamServerService_RetrieveAllParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramServerServiceClient) SubscribeChangedParamInt(ctx context.Context, in *SubscribeChangedParamIntRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChangedParamIntResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ParamServerService_ServiceDesc.Streams[0], ParamServerService_SubscribeChangedParamInt_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeChangedParamIntRequest, ChangedParamIntResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParamServerService_SubscribeChangedParamIntClient = grpc.ServerStreamingClient[ChangedParamIntResponse]

func (c *paramServerServiceClient) SubscribeChangedParamFloat(ctx context.Context, in *SubscribeChangedParamFloatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChangedParamFloatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ParamServerService_ServiceDesc.Streams[1], ParamServerService_SubscribeChangedParamFloat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeChangedParamFloatRequest, ChangedParamFloatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParamServerService_SubscribeChangedParamFloatClient = grpc.ServerStreamingClient[ChangedParamFloatResponse]

func (c *paramServerServiceClient) SubscribeChangedParamCustom(ctx context.Context, in *SubscribeChangedParamCustomRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChangedParamCustomResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ParamServerService_ServiceDesc.Streams[2], ParamServerService_SubscribeChangedParamCustom_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeChangedParamCustomRequest, ChangedParamCustomResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParamServerService_SubscribeChangedParamCustomClient = grpc.ServerStreamingClient[ChangedParamCustomResponse]

// ParamServerServiceServer is the server API for ParamServerService service.
// All implementations must embed UnimplementedParamServerServiceServer
// for forward compatibility.
//
// Provide raw access to retrieve and provide server parameters.
type ParamServerServiceServer interface {
	// Retrieve an int parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	RetrieveParamInt(context.Context, *RetrieveParamIntRequest) (*RetrieveParamIntResponse, error)
	// Provide an int parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	ProvideParamInt(context.Context, *ProvideParamIntRequest) (*ProvideParamIntResponse, error)
	// Retrieve a float parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	RetrieveParamFloat(context.Context, *RetrieveParamFloatRequest) (*RetrieveParamFloatResponse, error)
	// Provide a float parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	ProvideParamFloat(context.Context, *ProvideParamFloatRequest) (*ProvideParamFloatResponse, error)
	// Retrieve a custom parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	RetrieveParamCustom(context.Context, *RetrieveParamCustomRequest) (*RetrieveParamCustomResponse, error)
	// Provide a custom parameter.
	//
	// If the type is wrong, the result will be `WRONG_TYPE`.
	ProvideParamCustom(context.Context, *ProvideParamCustomRequest) (*ProvideParamCustomResponse, error)
	// Retrieve all parameters.
	RetrieveAllParams(context.Context, *RetrieveAllParamsRequest) (*RetrieveAllParamsResponse, error)
	// Subscribe to changed int param.
	SubscribeChangedParamInt(*SubscribeChangedParamIntRequest, grpc.ServerStreamingServer[ChangedParamIntResponse]) error
	// Subscribe to changed float param.
	SubscribeChangedParamFloat(*SubscribeChangedParamFloatRequest, grpc.ServerStreamingServer[ChangedParamFloatResponse]) error
	// Subscribe to changed custom param.
	SubscribeChangedParamCustom(*SubscribeChangedParamCustomRequest, grpc.ServerStreamingServer[ChangedParamCustomResponse]) error
	mustEmbedUnimplementedParamServerServiceServer()
}

// UnimplementedParamServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParamServerServiceServer struct{}

func (UnimplementedParamServerServiceServer) RetrieveParamInt(context.Context, *RetrieveParamIntRequest) (*RetrieveParamIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveParamInt not implemented")
}
func (UnimplementedParamServerServiceServer) ProvideParamInt(context.Context, *ProvideParamIntRequest) (*ProvideParamIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideParamInt not implemented")
}
func (UnimplementedParamServerServiceServer) RetrieveParamFloat(context.Context, *RetrieveParamFloatRequest) (*RetrieveParamFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveParamFloat not implemented")
}
func (UnimplementedParamServerServiceServer) ProvideParamFloat(context.Context, *ProvideParamFloatRequest) (*ProvideParamFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideParamFloat not implemented")
}
func (UnimplementedParamServerServiceServer) RetrieveParamCustom(context.Context, *RetrieveParamCustomRequest) (*RetrieveParamCustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveParamCustom not implemented")
}
func (UnimplementedParamServerServiceServer) ProvideParamCustom(context.Context, *ProvideParamCustomRequest) (*ProvideParamCustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideParamCustom not implemented")
}
func (UnimplementedParamServerServiceServer) RetrieveAllParams(context.Context, *RetrieveAllParamsRequest) (*RetrieveAllParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAllParams not implemented")
}
func (UnimplementedParamServerServiceServer) SubscribeChangedParamInt(*SubscribeChangedParamIntRequest, grpc.ServerStreamingServer[ChangedParamIntResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChangedParamInt not implemented")
}
func (UnimplementedParamServerServiceServer) SubscribeChangedParamFloat(*SubscribeChangedParamFloatRequest, grpc.ServerStreamingServer[ChangedParamFloatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChangedParamFloat not implemented")
}
func (UnimplementedParamServerServiceServer) SubscribeChangedParamCustom(*SubscribeChangedParamCustomRequest, grpc.ServerStreamingServer[ChangedParamCustomResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChangedParamCustom not implemented")
}
func (UnimplementedParamServerServiceServer) mustEmbedUnimplementedParamServerServiceServer() {}
func (UnimplementedParamServerServiceServer) testEmbeddedByValue()                            {}

// UnsafeParamServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParamServerServiceServer will
// result in compilation errors.
type UnsafeParamServerServiceServer interface {
	mustEmbedUnimplementedParamServerServiceServer()
}

func RegisterParamServerServiceServer(s grpc.ServiceRegistrar, srv ParamServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedParamServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParamServerService_ServiceDesc, srv)
}

func _ParamServerService_RetrieveParamInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveParamIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServerServiceServer).RetrieveParamInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParamServerService_RetrieveParamInt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServerServiceServer).RetrieveParamInt(ctx, req.(*RetrieveParamIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamServerService_ProvideParamInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideParamIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServerServiceServer).ProvideParamInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParamServerService_ProvideParamInt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServerServiceServer).ProvideParamInt(ctx, req.(*ProvideParamIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamServerService_RetrieveParamFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveParamFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServerServiceServer).RetrieveParamFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParamServerService_RetrieveParamFloat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServerServiceServer).RetrieveParamFloat(ctx, req.(*RetrieveParamFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamServerService_ProvideParamFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideParamFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServerServiceServer).ProvideParamFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParamServerService_ProvideParamFloat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServerServiceServer).ProvideParamFloat(ctx, req.(*ProvideParamFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamServerService_RetrieveParamCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveParamCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServerServiceServer).RetrieveParamCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParamServerService_RetrieveParamCustom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServerServiceServer).RetrieveParamCustom(ctx, req.(*RetrieveParamCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamServerService_ProvideParamCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideParamCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServerServiceServer).ProvideParamCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParamServerService_ProvideParamCustom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServerServiceServer).ProvideParamCustom(ctx, req.(*ProvideParamCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamServerService_RetrieveAllParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAllParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamServerServiceServer).RetrieveAllParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParamServerService_RetrieveAllParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamServerServiceServer).RetrieveAllParams(ctx, req.(*RetrieveAllParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParamServerService_SubscribeChangedParamInt_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeChangedParamIntRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParamServerServiceServer).SubscribeChangedParamInt(m, &grpc.GenericServerStream[SubscribeChangedParamIntRequest, ChangedParamIntResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParamServerService_SubscribeChangedParamIntServer = grpc.ServerStreamingServer[ChangedParamIntResponse]

func _ParamServerService_SubscribeChangedParamFloat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeChangedParamFloatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParamServerServiceServer).SubscribeChangedParamFloat(m, &grpc.GenericServerStream[SubscribeChangedParamFloatRequest, ChangedParamFloatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParamServerService_SubscribeChangedParamFloatServer = grpc.ServerStreamingServer[ChangedParamFloatResponse]

func _ParamServerService_SubscribeChangedParamCustom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeChangedParamCustomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParamServerServiceServer).SubscribeChangedParamCustom(m, &grpc.GenericServerStream[SubscribeChangedParamCustomRequest, ChangedParamCustomResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParamServerService_SubscribeChangedParamCustomServer = grpc.ServerStreamingServer[ChangedParamCustomResponse]

// ParamServerService_ServiceDesc is the grpc.ServiceDesc for ParamServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParamServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.param_server.ParamServerService",
	HandlerType: (*ParamServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveParamInt",
			Handler:    _ParamServerService_RetrieveParamInt_Handler,
		},
		{
			MethodName: "ProvideParamInt",
			Handler:    _ParamServerService_ProvideParamInt_Handler,
		},
		{
			MethodName: "RetrieveParamFloat",
			Handler:    _ParamServerService_RetrieveParamFloat_Handler,
		},
		{
			MethodName: "ProvideParamFloat",
			Handler:    _ParamServerService_ProvideParamFloat_Handler,
		},
		{
			MethodName: "RetrieveParamCustom",
			Handler:    _ParamServerService_RetrieveParamCustom_Handler,
		},
		{
			MethodName: "ProvideParamCustom",
			Handler:    _ParamServerService_ProvideParamCustom_Handler,
		},
		{
			MethodName: "RetrieveAllParams",
			Handler:    _ParamServerService_RetrieveAllParams_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeChangedParamInt",
			Handler:       _ParamServerService_SubscribeChangedParamInt_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChangedParamFloat",
			Handler:       _ParamServerService_SubscribeChangedParamFloat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChangedParamCustom",
			Handler:       _ParamServerService_SubscribeChangedParamCustom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "param_server.proto",
}
