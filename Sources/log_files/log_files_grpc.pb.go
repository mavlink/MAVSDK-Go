// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: log_files.proto

package log_files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogFilesService_GetEntries_FullMethodName               = "/mavsdk.rpc.log_files.LogFilesService/GetEntries"
	LogFilesService_SubscribeDownloadLogFile_FullMethodName = "/mavsdk.rpc.log_files.LogFilesService/SubscribeDownloadLogFile"
	LogFilesService_EraseAllLogFiles_FullMethodName         = "/mavsdk.rpc.log_files.LogFilesService/EraseAllLogFiles"
)

// LogFilesServiceClient is the client API for LogFilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Allow to download log files from the vehicle after a flight is complete.
// For log streaming during flight check the logging plugin.
type LogFilesServiceClient interface {
	// Get List of log files.
	GetEntries(ctx context.Context, in *GetEntriesRequest, opts ...grpc.CallOption) (*GetEntriesResponse, error)
	// Download log file.
	SubscribeDownloadLogFile(ctx context.Context, in *SubscribeDownloadLogFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadLogFileResponse], error)
	// Erase all log files.
	EraseAllLogFiles(ctx context.Context, in *EraseAllLogFilesRequest, opts ...grpc.CallOption) (*EraseAllLogFilesResponse, error)
}

type logFilesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogFilesServiceClient(cc grpc.ClientConnInterface) LogFilesServiceClient {
	return &logFilesServiceClient{cc}
}

func (c *logFilesServiceClient) GetEntries(ctx context.Context, in *GetEntriesRequest, opts ...grpc.CallOption) (*GetEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntriesResponse)
	err := c.cc.Invoke(ctx, LogFilesService_GetEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logFilesServiceClient) SubscribeDownloadLogFile(ctx context.Context, in *SubscribeDownloadLogFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadLogFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogFilesService_ServiceDesc.Streams[0], LogFilesService_SubscribeDownloadLogFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeDownloadLogFileRequest, DownloadLogFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogFilesService_SubscribeDownloadLogFileClient = grpc.ServerStreamingClient[DownloadLogFileResponse]

func (c *logFilesServiceClient) EraseAllLogFiles(ctx context.Context, in *EraseAllLogFilesRequest, opts ...grpc.CallOption) (*EraseAllLogFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EraseAllLogFilesResponse)
	err := c.cc.Invoke(ctx, LogFilesService_EraseAllLogFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogFilesServiceServer is the server API for LogFilesService service.
// All implementations must embed UnimplementedLogFilesServiceServer
// for forward compatibility.
//
// Allow to download log files from the vehicle after a flight is complete.
// For log streaming during flight check the logging plugin.
type LogFilesServiceServer interface {
	// Get List of log files.
	GetEntries(context.Context, *GetEntriesRequest) (*GetEntriesResponse, error)
	// Download log file.
	SubscribeDownloadLogFile(*SubscribeDownloadLogFileRequest, grpc.ServerStreamingServer[DownloadLogFileResponse]) error
	// Erase all log files.
	EraseAllLogFiles(context.Context, *EraseAllLogFilesRequest) (*EraseAllLogFilesResponse, error)
	mustEmbedUnimplementedLogFilesServiceServer()
}

// UnimplementedLogFilesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogFilesServiceServer struct{}

func (UnimplementedLogFilesServiceServer) GetEntries(context.Context, *GetEntriesRequest) (*GetEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntries not implemented")
}
func (UnimplementedLogFilesServiceServer) SubscribeDownloadLogFile(*SubscribeDownloadLogFileRequest, grpc.ServerStreamingServer[DownloadLogFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDownloadLogFile not implemented")
}
func (UnimplementedLogFilesServiceServer) EraseAllLogFiles(context.Context, *EraseAllLogFilesRequest) (*EraseAllLogFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraseAllLogFiles not implemented")
}
func (UnimplementedLogFilesServiceServer) mustEmbedUnimplementedLogFilesServiceServer() {}
func (UnimplementedLogFilesServiceServer) testEmbeddedByValue()                         {}

// UnsafeLogFilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogFilesServiceServer will
// result in compilation errors.
type UnsafeLogFilesServiceServer interface {
	mustEmbedUnimplementedLogFilesServiceServer()
}

func RegisterLogFilesServiceServer(s grpc.ServiceRegistrar, srv LogFilesServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogFilesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogFilesService_ServiceDesc, srv)
}

func _LogFilesService_GetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogFilesServiceServer).GetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogFilesService_GetEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogFilesServiceServer).GetEntries(ctx, req.(*GetEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogFilesService_SubscribeDownloadLogFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeDownloadLogFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogFilesServiceServer).SubscribeDownloadLogFile(m, &grpc.GenericServerStream[SubscribeDownloadLogFileRequest, DownloadLogFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogFilesService_SubscribeDownloadLogFileServer = grpc.ServerStreamingServer[DownloadLogFileResponse]

func _LogFilesService_EraseAllLogFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EraseAllLogFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogFilesServiceServer).EraseAllLogFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogFilesService_EraseAllLogFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogFilesServiceServer).EraseAllLogFiles(ctx, req.(*EraseAllLogFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogFilesService_ServiceDesc is the grpc.ServiceDesc for LogFilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogFilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.log_files.LogFilesService",
	HandlerType: (*LogFilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntries",
			Handler:    _LogFilesService_GetEntries_Handler,
		},
		{
			MethodName: "EraseAllLogFiles",
			Handler:    _LogFilesService_EraseAllLogFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDownloadLogFile",
			Handler:       _LogFilesService_SubscribeDownloadLogFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log_files.proto",
}
