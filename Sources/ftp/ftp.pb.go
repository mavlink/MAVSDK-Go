// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: ftp.proto

package ftp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible results returned for FTP commands
type FtpResult_Result int32

const (
	FtpResult_RESULT_UNKNOWN             FtpResult_Result = 0  // Unknown result
	FtpResult_RESULT_SUCCESS             FtpResult_Result = 1  // Success
	FtpResult_RESULT_NEXT                FtpResult_Result = 2  // Intermediate message showing progress
	FtpResult_RESULT_TIMEOUT             FtpResult_Result = 3  // Timeout
	FtpResult_RESULT_BUSY                FtpResult_Result = 4  // Operation is already in progress
	FtpResult_RESULT_FILE_IO_ERROR       FtpResult_Result = 5  // File IO operation error
	FtpResult_RESULT_FILE_EXISTS         FtpResult_Result = 6  // File exists already
	FtpResult_RESULT_FILE_DOES_NOT_EXIST FtpResult_Result = 7  // File does not exist
	FtpResult_RESULT_FILE_PROTECTED      FtpResult_Result = 8  // File is write protected
	FtpResult_RESULT_INVALID_PARAMETER   FtpResult_Result = 9  // Invalid parameter
	FtpResult_RESULT_UNSUPPORTED         FtpResult_Result = 10 // Unsupported command
	FtpResult_RESULT_PROTOCOL_ERROR      FtpResult_Result = 11 // General protocol error
	FtpResult_RESULT_NO_SYSTEM           FtpResult_Result = 12 // No system connected
)

// Enum value maps for FtpResult_Result.
var (
	FtpResult_Result_name = map[int32]string{
		0:  "RESULT_UNKNOWN",
		1:  "RESULT_SUCCESS",
		2:  "RESULT_NEXT",
		3:  "RESULT_TIMEOUT",
		4:  "RESULT_BUSY",
		5:  "RESULT_FILE_IO_ERROR",
		6:  "RESULT_FILE_EXISTS",
		7:  "RESULT_FILE_DOES_NOT_EXIST",
		8:  "RESULT_FILE_PROTECTED",
		9:  "RESULT_INVALID_PARAMETER",
		10: "RESULT_UNSUPPORTED",
		11: "RESULT_PROTOCOL_ERROR",
		12: "RESULT_NO_SYSTEM",
	}
	FtpResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":             0,
		"RESULT_SUCCESS":             1,
		"RESULT_NEXT":                2,
		"RESULT_TIMEOUT":             3,
		"RESULT_BUSY":                4,
		"RESULT_FILE_IO_ERROR":       5,
		"RESULT_FILE_EXISTS":         6,
		"RESULT_FILE_DOES_NOT_EXIST": 7,
		"RESULT_FILE_PROTECTED":      8,
		"RESULT_INVALID_PARAMETER":   9,
		"RESULT_UNSUPPORTED":         10,
		"RESULT_PROTOCOL_ERROR":      11,
		"RESULT_NO_SYSTEM":           12,
	}
)

func (x FtpResult_Result) Enum() *FtpResult_Result {
	p := new(FtpResult_Result)
	*p = x
	return p
}

func (x FtpResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FtpResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_ftp_proto_enumTypes[0].Descriptor()
}

func (FtpResult_Result) Type() protoreflect.EnumType {
	return &file_ftp_proto_enumTypes[0]
}

func (x FtpResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FtpResult_Result.Descriptor instead.
func (FtpResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{19, 0}
}

type SubscribeDownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFilePath string `protobuf:"bytes,1,opt,name=remote_file_path,json=remoteFilePath,proto3" json:"remote_file_path,omitempty"` // The path of the remote file to download.
	LocalDir       string `protobuf:"bytes,2,opt,name=local_dir,json=localDir,proto3" json:"local_dir,omitempty"`                     // The local directory to download to.
	UseBurst       bool   `protobuf:"varint,3,opt,name=use_burst,json=useBurst,proto3" json:"use_burst,omitempty"`                    // Use burst for faster downloading.
}

func (x *SubscribeDownloadRequest) Reset() {
	*x = SubscribeDownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeDownloadRequest) ProtoMessage() {}

func (x *SubscribeDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeDownloadRequest.ProtoReflect.Descriptor instead.
func (*SubscribeDownloadRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeDownloadRequest) GetRemoteFilePath() string {
	if x != nil {
		return x.RemoteFilePath
	}
	return ""
}

func (x *SubscribeDownloadRequest) GetLocalDir() string {
	if x != nil {
		return x.LocalDir
	}
	return ""
}

func (x *SubscribeDownloadRequest) GetUseBurst() bool {
	if x != nil {
		return x.UseBurst
	}
	return false
}

type DownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult    *FtpResult    `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
	ProgressData *ProgressData `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"` // The progress data if result is next
}

func (x *DownloadResponse) Reset() {
	*x = DownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResponse) ProtoMessage() {}

func (x *DownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResponse.ProtoReflect.Descriptor instead.
func (*DownloadResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{1}
}

func (x *DownloadResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

func (x *DownloadResponse) GetProgressData() *ProgressData {
	if x != nil {
		return x.ProgressData
	}
	return nil
}

type SubscribeUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalFilePath string `protobuf:"bytes,1,opt,name=local_file_path,json=localFilePath,proto3" json:"local_file_path,omitempty"` // The local file path to upload.
	RemoteDir     string `protobuf:"bytes,2,opt,name=remote_dir,json=remoteDir,proto3" json:"remote_dir,omitempty"`               // The remote directory to upload to.
}

func (x *SubscribeUploadRequest) Reset() {
	*x = SubscribeUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeUploadRequest) ProtoMessage() {}

func (x *SubscribeUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeUploadRequest.ProtoReflect.Descriptor instead.
func (*SubscribeUploadRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeUploadRequest) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *SubscribeUploadRequest) GetRemoteDir() string {
	if x != nil {
		return x.RemoteDir
	}
	return ""
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult    *FtpResult    `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
	ProgressData *ProgressData `protobuf:"bytes,2,opt,name=progress_data,json=progressData,proto3" json:"progress_data,omitempty"` // The progress data if result is next
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{3}
}

func (x *UploadResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

func (x *UploadResponse) GetProgressData() *ProgressData {
	if x != nil {
		return x.ProgressData
	}
	return nil
}

type ListDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDir string `protobuf:"bytes,1,opt,name=remote_dir,json=remoteDir,proto3" json:"remote_dir,omitempty"` // The remote directory to list the contents for.
}

func (x *ListDirectoryRequest) Reset() {
	*x = ListDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryRequest) ProtoMessage() {}

func (x *ListDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryRequest.ProtoReflect.Descriptor instead.
func (*ListDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{4}
}

func (x *ListDirectoryRequest) GetRemoteDir() string {
	if x != nil {
		return x.RemoteDir
	}
	return ""
}

type ListDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult *FtpResult `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
	Paths     []string   `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"` // The found directory contents.
}

func (x *ListDirectoryResponse) Reset() {
	*x = ListDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryResponse) ProtoMessage() {}

func (x *ListDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryResponse.ProtoReflect.Descriptor instead.
func (*ListDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{5}
}

func (x *ListDirectoryResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

func (x *ListDirectoryResponse) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type CreateDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDir string `protobuf:"bytes,1,opt,name=remote_dir,json=remoteDir,proto3" json:"remote_dir,omitempty"` // The remote directory to create.
}

func (x *CreateDirectoryRequest) Reset() {
	*x = CreateDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryRequest) ProtoMessage() {}

func (x *CreateDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryRequest.ProtoReflect.Descriptor instead.
func (*CreateDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDirectoryRequest) GetRemoteDir() string {
	if x != nil {
		return x.RemoteDir
	}
	return ""
}

type CreateDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult *FtpResult `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
}

func (x *CreateDirectoryResponse) Reset() {
	*x = CreateDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryResponse) ProtoMessage() {}

func (x *CreateDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryResponse.ProtoReflect.Descriptor instead.
func (*CreateDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDirectoryResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

type RemoveDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteDir string `protobuf:"bytes,1,opt,name=remote_dir,json=remoteDir,proto3" json:"remote_dir,omitempty"` // The remote directory to remove.
}

func (x *RemoveDirectoryRequest) Reset() {
	*x = RemoveDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDirectoryRequest) ProtoMessage() {}

func (x *RemoveDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDirectoryRequest.ProtoReflect.Descriptor instead.
func (*RemoveDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveDirectoryRequest) GetRemoteDir() string {
	if x != nil {
		return x.RemoteDir
	}
	return ""
}

type RemoveDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult *FtpResult `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
}

func (x *RemoveDirectoryResponse) Reset() {
	*x = RemoveDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDirectoryResponse) ProtoMessage() {}

func (x *RemoveDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDirectoryResponse.ProtoReflect.Descriptor instead.
func (*RemoveDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveDirectoryResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

type RemoveFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFilePath string `protobuf:"bytes,1,opt,name=remote_file_path,json=remoteFilePath,proto3" json:"remote_file_path,omitempty"` // The path of the remote file to remove.
}

func (x *RemoveFileRequest) Reset() {
	*x = RemoveFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFileRequest) ProtoMessage() {}

func (x *RemoveFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFileRequest.ProtoReflect.Descriptor instead.
func (*RemoveFileRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveFileRequest) GetRemoteFilePath() string {
	if x != nil {
		return x.RemoteFilePath
	}
	return ""
}

type RemoveFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult *FtpResult `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
}

func (x *RemoveFileResponse) Reset() {
	*x = RemoveFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFileResponse) ProtoMessage() {}

func (x *RemoveFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFileResponse.ProtoReflect.Descriptor instead.
func (*RemoveFileResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveFileResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

type RenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteFromPath string `protobuf:"bytes,1,opt,name=remote_from_path,json=remoteFromPath,proto3" json:"remote_from_path,omitempty"` // The remote source path.
	RemoteToPath   string `protobuf:"bytes,2,opt,name=remote_to_path,json=remoteToPath,proto3" json:"remote_to_path,omitempty"`       // The remote destination path.
}

func (x *RenameRequest) Reset() {
	*x = RenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRequest) ProtoMessage() {}

func (x *RenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRequest.ProtoReflect.Descriptor instead.
func (*RenameRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{12}
}

func (x *RenameRequest) GetRemoteFromPath() string {
	if x != nil {
		return x.RemoteFromPath
	}
	return ""
}

func (x *RenameRequest) GetRemoteToPath() string {
	if x != nil {
		return x.RemoteToPath
	}
	return ""
}

type RenameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult *FtpResult `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
}

func (x *RenameResponse) Reset() {
	*x = RenameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameResponse) ProtoMessage() {}

func (x *RenameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameResponse.ProtoReflect.Descriptor instead.
func (*RenameResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{13}
}

func (x *RenameResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

type AreFilesIdenticalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalFilePath  string `protobuf:"bytes,1,opt,name=local_file_path,json=localFilePath,proto3" json:"local_file_path,omitempty"`    // The path of the local file.
	RemoteFilePath string `protobuf:"bytes,2,opt,name=remote_file_path,json=remoteFilePath,proto3" json:"remote_file_path,omitempty"` // The path of the remote file.
}

func (x *AreFilesIdenticalRequest) Reset() {
	*x = AreFilesIdenticalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreFilesIdenticalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreFilesIdenticalRequest) ProtoMessage() {}

func (x *AreFilesIdenticalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreFilesIdenticalRequest.ProtoReflect.Descriptor instead.
func (*AreFilesIdenticalRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{14}
}

func (x *AreFilesIdenticalRequest) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *AreFilesIdenticalRequest) GetRemoteFilePath() string {
	if x != nil {
		return x.RemoteFilePath
	}
	return ""
}

type AreFilesIdenticalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult    *FtpResult `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
	AreIdentical bool       `protobuf:"varint,2,opt,name=are_identical,json=areIdentical,proto3" json:"are_identical,omitempty"` // Whether the files are identical.
}

func (x *AreFilesIdenticalResponse) Reset() {
	*x = AreFilesIdenticalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreFilesIdenticalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreFilesIdenticalResponse) ProtoMessage() {}

func (x *AreFilesIdenticalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreFilesIdenticalResponse.ProtoReflect.Descriptor instead.
func (*AreFilesIdenticalResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{15}
}

func (x *AreFilesIdenticalResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

func (x *AreFilesIdenticalResponse) GetAreIdentical() bool {
	if x != nil {
		return x.AreIdentical
	}
	return false
}

type SetTargetCompidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compid uint32 `protobuf:"varint,1,opt,name=compid,proto3" json:"compid,omitempty"` // The component ID to set.
}

func (x *SetTargetCompidRequest) Reset() {
	*x = SetTargetCompidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTargetCompidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTargetCompidRequest) ProtoMessage() {}

func (x *SetTargetCompidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTargetCompidRequest.ProtoReflect.Descriptor instead.
func (*SetTargetCompidRequest) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{16}
}

func (x *SetTargetCompidRequest) GetCompid() uint32 {
	if x != nil {
		return x.Compid
	}
	return 0
}

type SetTargetCompidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtpResult *FtpResult `protobuf:"bytes,1,opt,name=ftp_result,json=ftpResult,proto3" json:"ftp_result,omitempty"`
}

func (x *SetTargetCompidResponse) Reset() {
	*x = SetTargetCompidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTargetCompidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTargetCompidResponse) ProtoMessage() {}

func (x *SetTargetCompidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTargetCompidResponse.ProtoReflect.Descriptor instead.
func (*SetTargetCompidResponse) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{17}
}

func (x *SetTargetCompidResponse) GetFtpResult() *FtpResult {
	if x != nil {
		return x.FtpResult
	}
	return nil
}

// Progress data type for file transfer.
type ProgressData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesTransferred uint32 `protobuf:"varint,1,opt,name=bytes_transferred,json=bytesTransferred,proto3" json:"bytes_transferred,omitempty"` // The number of bytes already transferred.
	TotalBytes       uint32 `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`                   // The total bytes to transfer.
}

func (x *ProgressData) Reset() {
	*x = ProgressData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressData) ProtoMessage() {}

func (x *ProgressData) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressData.ProtoReflect.Descriptor instead.
func (*ProgressData) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{18}
}

func (x *ProgressData) GetBytesTransferred() uint32 {
	if x != nil {
		return x.BytesTransferred
	}
	return 0
}

func (x *ProgressData) GetTotalBytes() uint32 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

// Result type.
type FtpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    FtpResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.ftp.FtpResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string           `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                // Human-readable English string describing the result
}

func (x *FtpResult) Reset() {
	*x = FtpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ftp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtpResult) ProtoMessage() {}

func (x *FtpResult) ProtoReflect() protoreflect.Message {
	mi := &file_ftp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtpResult.ProtoReflect.Descriptor instead.
func (*FtpResult) Descriptor() ([]byte, []int) {
	return file_ftp_proto_rawDescGZIP(), []int{19}
}

func (x *FtpResult) GetResult() FtpResult_Result {
	if x != nil {
		return x.Result
	}
	return FtpResult_RESULT_UNKNOWN
}

func (x *FtpResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_ftp_proto protoreflect.FileDescriptor

var file_ftp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x1a, 0x14, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x7e, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x42, 0x75, 0x72, 0x73,
	0x74, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x69, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x72, 0x22, 0x67, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x22, 0x37, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x72, 0x22, 0x53, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74,
	0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x37, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x72, 0x22, 0x53, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x3d, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x4e, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x5f, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6c, 0x0a, 0x18,
	0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x7a, 0x0a, 0x19, 0x41, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x30, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x09, 0x66, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa1, 0x03, 0x0a, 0x09,
	0x46, 0x74, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x46, 0x74, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x72, 0x22, 0xba, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4f, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x06, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0c, 0x32,
	0x84, 0x07, 0x0a, 0x0a, 0x46, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b,
	0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x74, 0x70, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x0f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0x80, 0xb5, 0x18, 0x00, 0x88, 0xb5, 0x18, 0x01,
	0x30, 0x01, 0x12, 0x5e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x74, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x74, 0x70, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70,
	0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6a, 0x0a, 0x11, 0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70,
	0x2e, 0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x12,
	0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x74, 0x70, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x42, 0x11, 0x42, 0x08, 0x46, 0x74, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x05, 0x2e, 0x3b, 0x66, 0x74, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ftp_proto_rawDescOnce sync.Once
	file_ftp_proto_rawDescData = file_ftp_proto_rawDesc
)

func file_ftp_proto_rawDescGZIP() []byte {
	file_ftp_proto_rawDescOnce.Do(func() {
		file_ftp_proto_rawDescData = protoimpl.X.CompressGZIP(file_ftp_proto_rawDescData)
	})
	return file_ftp_proto_rawDescData
}

var file_ftp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ftp_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ftp_proto_goTypes = []any{
	(FtpResult_Result)(0),             // 0: mavsdk.rpc.ftp.FtpResult.Result
	(*SubscribeDownloadRequest)(nil),  // 1: mavsdk.rpc.ftp.SubscribeDownloadRequest
	(*DownloadResponse)(nil),          // 2: mavsdk.rpc.ftp.DownloadResponse
	(*SubscribeUploadRequest)(nil),    // 3: mavsdk.rpc.ftp.SubscribeUploadRequest
	(*UploadResponse)(nil),            // 4: mavsdk.rpc.ftp.UploadResponse
	(*ListDirectoryRequest)(nil),      // 5: mavsdk.rpc.ftp.ListDirectoryRequest
	(*ListDirectoryResponse)(nil),     // 6: mavsdk.rpc.ftp.ListDirectoryResponse
	(*CreateDirectoryRequest)(nil),    // 7: mavsdk.rpc.ftp.CreateDirectoryRequest
	(*CreateDirectoryResponse)(nil),   // 8: mavsdk.rpc.ftp.CreateDirectoryResponse
	(*RemoveDirectoryRequest)(nil),    // 9: mavsdk.rpc.ftp.RemoveDirectoryRequest
	(*RemoveDirectoryResponse)(nil),   // 10: mavsdk.rpc.ftp.RemoveDirectoryResponse
	(*RemoveFileRequest)(nil),         // 11: mavsdk.rpc.ftp.RemoveFileRequest
	(*RemoveFileResponse)(nil),        // 12: mavsdk.rpc.ftp.RemoveFileResponse
	(*RenameRequest)(nil),             // 13: mavsdk.rpc.ftp.RenameRequest
	(*RenameResponse)(nil),            // 14: mavsdk.rpc.ftp.RenameResponse
	(*AreFilesIdenticalRequest)(nil),  // 15: mavsdk.rpc.ftp.AreFilesIdenticalRequest
	(*AreFilesIdenticalResponse)(nil), // 16: mavsdk.rpc.ftp.AreFilesIdenticalResponse
	(*SetTargetCompidRequest)(nil),    // 17: mavsdk.rpc.ftp.SetTargetCompidRequest
	(*SetTargetCompidResponse)(nil),   // 18: mavsdk.rpc.ftp.SetTargetCompidResponse
	(*ProgressData)(nil),              // 19: mavsdk.rpc.ftp.ProgressData
	(*FtpResult)(nil),                 // 20: mavsdk.rpc.ftp.FtpResult
}
var file_ftp_proto_depIdxs = []int32{
	20, // 0: mavsdk.rpc.ftp.DownloadResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	19, // 1: mavsdk.rpc.ftp.DownloadResponse.progress_data:type_name -> mavsdk.rpc.ftp.ProgressData
	20, // 2: mavsdk.rpc.ftp.UploadResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	19, // 3: mavsdk.rpc.ftp.UploadResponse.progress_data:type_name -> mavsdk.rpc.ftp.ProgressData
	20, // 4: mavsdk.rpc.ftp.ListDirectoryResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	20, // 5: mavsdk.rpc.ftp.CreateDirectoryResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	20, // 6: mavsdk.rpc.ftp.RemoveDirectoryResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	20, // 7: mavsdk.rpc.ftp.RemoveFileResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	20, // 8: mavsdk.rpc.ftp.RenameResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	20, // 9: mavsdk.rpc.ftp.AreFilesIdenticalResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	20, // 10: mavsdk.rpc.ftp.SetTargetCompidResponse.ftp_result:type_name -> mavsdk.rpc.ftp.FtpResult
	0,  // 11: mavsdk.rpc.ftp.FtpResult.result:type_name -> mavsdk.rpc.ftp.FtpResult.Result
	1,  // 12: mavsdk.rpc.ftp.FtpService.SubscribeDownload:input_type -> mavsdk.rpc.ftp.SubscribeDownloadRequest
	3,  // 13: mavsdk.rpc.ftp.FtpService.SubscribeUpload:input_type -> mavsdk.rpc.ftp.SubscribeUploadRequest
	5,  // 14: mavsdk.rpc.ftp.FtpService.ListDirectory:input_type -> mavsdk.rpc.ftp.ListDirectoryRequest
	7,  // 15: mavsdk.rpc.ftp.FtpService.CreateDirectory:input_type -> mavsdk.rpc.ftp.CreateDirectoryRequest
	9,  // 16: mavsdk.rpc.ftp.FtpService.RemoveDirectory:input_type -> mavsdk.rpc.ftp.RemoveDirectoryRequest
	11, // 17: mavsdk.rpc.ftp.FtpService.RemoveFile:input_type -> mavsdk.rpc.ftp.RemoveFileRequest
	13, // 18: mavsdk.rpc.ftp.FtpService.Rename:input_type -> mavsdk.rpc.ftp.RenameRequest
	15, // 19: mavsdk.rpc.ftp.FtpService.AreFilesIdentical:input_type -> mavsdk.rpc.ftp.AreFilesIdenticalRequest
	17, // 20: mavsdk.rpc.ftp.FtpService.SetTargetCompid:input_type -> mavsdk.rpc.ftp.SetTargetCompidRequest
	2,  // 21: mavsdk.rpc.ftp.FtpService.SubscribeDownload:output_type -> mavsdk.rpc.ftp.DownloadResponse
	4,  // 22: mavsdk.rpc.ftp.FtpService.SubscribeUpload:output_type -> mavsdk.rpc.ftp.UploadResponse
	6,  // 23: mavsdk.rpc.ftp.FtpService.ListDirectory:output_type -> mavsdk.rpc.ftp.ListDirectoryResponse
	8,  // 24: mavsdk.rpc.ftp.FtpService.CreateDirectory:output_type -> mavsdk.rpc.ftp.CreateDirectoryResponse
	10, // 25: mavsdk.rpc.ftp.FtpService.RemoveDirectory:output_type -> mavsdk.rpc.ftp.RemoveDirectoryResponse
	12, // 26: mavsdk.rpc.ftp.FtpService.RemoveFile:output_type -> mavsdk.rpc.ftp.RemoveFileResponse
	14, // 27: mavsdk.rpc.ftp.FtpService.Rename:output_type -> mavsdk.rpc.ftp.RenameResponse
	16, // 28: mavsdk.rpc.ftp.FtpService.AreFilesIdentical:output_type -> mavsdk.rpc.ftp.AreFilesIdenticalResponse
	18, // 29: mavsdk.rpc.ftp.FtpService.SetTargetCompid:output_type -> mavsdk.rpc.ftp.SetTargetCompidResponse
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_ftp_proto_init() }
func file_ftp_proto_init() {
	if File_ftp_proto != nil {
		return
	}
	
	if !protoimpl.UnsafeEnabled {
		file_ftp_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeDownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RenameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AreFilesIdenticalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*AreFilesIdenticalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SetTargetCompidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SetTargetCompidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ProgressData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ftp_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FtpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ftp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ftp_proto_goTypes,
		DependencyIndexes: file_ftp_proto_depIdxs,
		EnumInfos:         file_ftp_proto_enumTypes,
		MessageInfos:      file_ftp_proto_msgTypes,
	}.Build()
	File_ftp_proto = out.File
	file_ftp_proto_rawDesc = nil
	file_ftp_proto_goTypes = nil
	file_ftp_proto_depIdxs = nil
}
