// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: ftp.proto

package ftp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FtpService_SubscribeDownload_FullMethodName = "/mavsdk.rpc.ftp.FtpService/SubscribeDownload"
	FtpService_SubscribeUpload_FullMethodName   = "/mavsdk.rpc.ftp.FtpService/SubscribeUpload"
	FtpService_ListDirectory_FullMethodName     = "/mavsdk.rpc.ftp.FtpService/ListDirectory"
	FtpService_CreateDirectory_FullMethodName   = "/mavsdk.rpc.ftp.FtpService/CreateDirectory"
	FtpService_RemoveDirectory_FullMethodName   = "/mavsdk.rpc.ftp.FtpService/RemoveDirectory"
	FtpService_RemoveFile_FullMethodName        = "/mavsdk.rpc.ftp.FtpService/RemoveFile"
	FtpService_Rename_FullMethodName            = "/mavsdk.rpc.ftp.FtpService/Rename"
	FtpService_AreFilesIdentical_FullMethodName = "/mavsdk.rpc.ftp.FtpService/AreFilesIdentical"
	FtpService_SetTargetCompid_FullMethodName   = "/mavsdk.rpc.ftp.FtpService/SetTargetCompid"
)

// FtpServiceClient is the client API for FtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Implements file transfer functionality using MAVLink FTP.
type FtpServiceClient interface {
	// Downloads a file to local directory.
	SubscribeDownload(ctx context.Context, in *SubscribeDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadResponse], error)
	// Uploads local file to remote directory.
	SubscribeUpload(ctx context.Context, in *SubscribeUploadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UploadResponse], error)
	// Lists items from a remote directory.
	ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error)
	// Creates a remote directory.
	CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error)
	// Removes a remote directory.
	RemoveDirectory(ctx context.Context, in *RemoveDirectoryRequest, opts ...grpc.CallOption) (*RemoveDirectoryResponse, error)
	// Removes a remote file.
	RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*RemoveFileResponse, error)
	// Renames a remote file or remote directory.
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	// Compares a local file to a remote file using a CRC32 checksum.
	AreFilesIdentical(ctx context.Context, in *AreFilesIdenticalRequest, opts ...grpc.CallOption) (*AreFilesIdenticalResponse, error)
	// Set target component ID. By default it is the autopilot.
	SetTargetCompid(ctx context.Context, in *SetTargetCompidRequest, opts ...grpc.CallOption) (*SetTargetCompidResponse, error)
}

type ftpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFtpServiceClient(cc grpc.ClientConnInterface) FtpServiceClient {
	return &ftpServiceClient{cc}
}

func (c *ftpServiceClient) SubscribeDownload(ctx context.Context, in *SubscribeDownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FtpService_ServiceDesc.Streams[0], FtpService_SubscribeDownload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeDownloadRequest, DownloadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FtpService_SubscribeDownloadClient = grpc.ServerStreamingClient[DownloadResponse]

func (c *ftpServiceClient) SubscribeUpload(ctx context.Context, in *SubscribeUploadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FtpService_ServiceDesc.Streams[1], FtpService_SubscribeUpload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeUploadRequest, UploadResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FtpService_SubscribeUploadClient = grpc.ServerStreamingClient[UploadResponse]

func (c *ftpServiceClient) ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDirectoryResponse)
	err := c.cc.Invoke(ctx, FtpService_ListDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDirectoryResponse)
	err := c.cc.Invoke(ctx, FtpService_CreateDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) RemoveDirectory(ctx context.Context, in *RemoveDirectoryRequest, opts ...grpc.CallOption) (*RemoveDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDirectoryResponse)
	err := c.cc.Invoke(ctx, FtpService_RemoveDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) RemoveFile(ctx context.Context, in *RemoveFileRequest, opts ...grpc.CallOption) (*RemoveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFileResponse)
	err := c.cc.Invoke(ctx, FtpService_RemoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameResponse)
	err := c.cc.Invoke(ctx, FtpService_Rename_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) AreFilesIdentical(ctx context.Context, in *AreFilesIdenticalRequest, opts ...grpc.CallOption) (*AreFilesIdenticalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AreFilesIdenticalResponse)
	err := c.cc.Invoke(ctx, FtpService_AreFilesIdentical_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ftpServiceClient) SetTargetCompid(ctx context.Context, in *SetTargetCompidRequest, opts ...grpc.CallOption) (*SetTargetCompidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTargetCompidResponse)
	err := c.cc.Invoke(ctx, FtpService_SetTargetCompid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FtpServiceServer is the server API for FtpService service.
// All implementations must embed UnimplementedFtpServiceServer
// for forward compatibility.
//
// Implements file transfer functionality using MAVLink FTP.
type FtpServiceServer interface {
	// Downloads a file to local directory.
	SubscribeDownload(*SubscribeDownloadRequest, grpc.ServerStreamingServer[DownloadResponse]) error
	// Uploads local file to remote directory.
	SubscribeUpload(*SubscribeUploadRequest, grpc.ServerStreamingServer[UploadResponse]) error
	// Lists items from a remote directory.
	ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error)
	// Creates a remote directory.
	CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error)
	// Removes a remote directory.
	RemoveDirectory(context.Context, *RemoveDirectoryRequest) (*RemoveDirectoryResponse, error)
	// Removes a remote file.
	RemoveFile(context.Context, *RemoveFileRequest) (*RemoveFileResponse, error)
	// Renames a remote file or remote directory.
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	// Compares a local file to a remote file using a CRC32 checksum.
	AreFilesIdentical(context.Context, *AreFilesIdenticalRequest) (*AreFilesIdenticalResponse, error)
	// Set target component ID. By default it is the autopilot.
	SetTargetCompid(context.Context, *SetTargetCompidRequest) (*SetTargetCompidResponse, error)
	mustEmbedUnimplementedFtpServiceServer()
}

// UnimplementedFtpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFtpServiceServer struct{}

func (UnimplementedFtpServiceServer) SubscribeDownload(*SubscribeDownloadRequest, grpc.ServerStreamingServer[DownloadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDownload not implemented")
}
func (UnimplementedFtpServiceServer) SubscribeUpload(*SubscribeUploadRequest, grpc.ServerStreamingServer[UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeUpload not implemented")
}
func (UnimplementedFtpServiceServer) ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (UnimplementedFtpServiceServer) CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (UnimplementedFtpServiceServer) RemoveDirectory(context.Context, *RemoveDirectoryRequest) (*RemoveDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDirectory not implemented")
}
func (UnimplementedFtpServiceServer) RemoveFile(context.Context, *RemoveFileRequest) (*RemoveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}
func (UnimplementedFtpServiceServer) Rename(context.Context, *RenameRequest) (*RenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFtpServiceServer) AreFilesIdentical(context.Context, *AreFilesIdenticalRequest) (*AreFilesIdenticalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreFilesIdentical not implemented")
}
func (UnimplementedFtpServiceServer) SetTargetCompid(context.Context, *SetTargetCompidRequest) (*SetTargetCompidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTargetCompid not implemented")
}
func (UnimplementedFtpServiceServer) mustEmbedUnimplementedFtpServiceServer() {}
func (UnimplementedFtpServiceServer) testEmbeddedByValue()                    {}

// UnsafeFtpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FtpServiceServer will
// result in compilation errors.
type UnsafeFtpServiceServer interface {
	mustEmbedUnimplementedFtpServiceServer()
}

func RegisterFtpServiceServer(s grpc.ServiceRegistrar, srv FtpServiceServer) {
	// If the following call pancis, it indicates UnimplementedFtpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FtpService_ServiceDesc, srv)
}

func _FtpService_SubscribeDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FtpServiceServer).SubscribeDownload(m, &grpc.GenericServerStream[SubscribeDownloadRequest, DownloadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FtpService_SubscribeDownloadServer = grpc.ServerStreamingServer[DownloadResponse]

func _FtpService_SubscribeUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeUploadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FtpServiceServer).SubscribeUpload(m, &grpc.GenericServerStream[SubscribeUploadRequest, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FtpService_SubscribeUploadServer = grpc.ServerStreamingServer[UploadResponse]

func _FtpService_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FtpService_ListDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).ListDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FtpService_CreateDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).CreateDirectory(ctx, req.(*CreateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_RemoveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).RemoveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FtpService_RemoveDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).RemoveDirectory(ctx, req.(*RemoveDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FtpService_RemoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).RemoveFile(ctx, req.(*RemoveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FtpService_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_AreFilesIdentical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreFilesIdenticalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).AreFilesIdentical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FtpService_AreFilesIdentical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).AreFilesIdentical(ctx, req.(*AreFilesIdenticalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FtpService_SetTargetCompid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTargetCompidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FtpServiceServer).SetTargetCompid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FtpService_SetTargetCompid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FtpServiceServer).SetTargetCompid(ctx, req.(*SetTargetCompidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FtpService_ServiceDesc is the grpc.ServiceDesc for FtpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FtpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.ftp.FtpService",
	HandlerType: (*FtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDirectory",
			Handler:    _FtpService_ListDirectory_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _FtpService_CreateDirectory_Handler,
		},
		{
			MethodName: "RemoveDirectory",
			Handler:    _FtpService_RemoveDirectory_Handler,
		},
		{
			MethodName: "RemoveFile",
			Handler:    _FtpService_RemoveFile_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FtpService_Rename_Handler,
		},
		{
			MethodName: "AreFilesIdentical",
			Handler:    _FtpService_AreFilesIdentical_Handler,
		},
		{
			MethodName: "SetTargetCompid",
			Handler:    _FtpService_SetTargetCompid_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDownload",
			Handler:       _FtpService_SubscribeDownload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeUpload",
			Handler:       _FtpService_SubscribeUpload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ftp.proto",
}
