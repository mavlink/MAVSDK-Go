// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: camera_server.proto

package camera_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible feedback results for camera respond command.
type CameraFeedback int32

const (
	CameraFeedback_CAMERA_FEEDBACK_UNKNOWN CameraFeedback = 0 // Unknown
	CameraFeedback_CAMERA_FEEDBACK_OK      CameraFeedback = 1 // Ok
	CameraFeedback_CAMERA_FEEDBACK_BUSY    CameraFeedback = 2 // Busy
	CameraFeedback_CAMERA_FEEDBACK_FAILED  CameraFeedback = 3 // Failed
)

// Enum value maps for CameraFeedback.
var (
	CameraFeedback_name = map[int32]string{
		0: "CAMERA_FEEDBACK_UNKNOWN",
		1: "CAMERA_FEEDBACK_OK",
		2: "CAMERA_FEEDBACK_BUSY",
		3: "CAMERA_FEEDBACK_FAILED",
	}
	CameraFeedback_value = map[string]int32{
		"CAMERA_FEEDBACK_UNKNOWN": 0,
		"CAMERA_FEEDBACK_OK":      1,
		"CAMERA_FEEDBACK_BUSY":    2,
		"CAMERA_FEEDBACK_FAILED":  3,
	}
)

func (x CameraFeedback) Enum() *CameraFeedback {
	p := new(CameraFeedback)
	*p = x
	return p
}

func (x CameraFeedback) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraFeedback) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_server_proto_enumTypes[0].Descriptor()
}

func (CameraFeedback) Type() protoreflect.EnumType {
	return &file_camera_server_proto_enumTypes[0]
}

func (x CameraFeedback) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraFeedback.Descriptor instead.
func (CameraFeedback) EnumDescriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{0}
}

// Camera mode type.
type Mode int32

const (
	Mode_MODE_UNKNOWN Mode = 0 // Unknown mode
	Mode_MODE_PHOTO   Mode = 1 // Photo mode
	Mode_MODE_VIDEO   Mode = 2 // Video mode
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_PHOTO",
		2: "MODE_VIDEO",
	}
	Mode_value = map[string]int32{
		"MODE_UNKNOWN": 0,
		"MODE_PHOTO":   1,
		"MODE_VIDEO":   2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_server_proto_enumTypes[1].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_camera_server_proto_enumTypes[1]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{1}
}

// Possible results returned for action requests.
type CameraServerResult_Result int32

const (
	CameraServerResult_RESULT_UNKNOWN        CameraServerResult_Result = 0 // Unknown result
	CameraServerResult_RESULT_SUCCESS        CameraServerResult_Result = 1 // Command executed successfully
	CameraServerResult_RESULT_IN_PROGRESS    CameraServerResult_Result = 2 // Command in progress
	CameraServerResult_RESULT_BUSY           CameraServerResult_Result = 3 // Camera is busy and rejected command
	CameraServerResult_RESULT_DENIED         CameraServerResult_Result = 4 // Camera denied the command
	CameraServerResult_RESULT_ERROR          CameraServerResult_Result = 5 // An error has occurred while executing the command
	CameraServerResult_RESULT_TIMEOUT        CameraServerResult_Result = 6 // Command timed out
	CameraServerResult_RESULT_WRONG_ARGUMENT CameraServerResult_Result = 7 // Command has wrong argument(s)
	CameraServerResult_RESULT_NO_SYSTEM      CameraServerResult_Result = 8 // No system connected
)

// Enum value maps for CameraServerResult_Result.
var (
	CameraServerResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_IN_PROGRESS",
		3: "RESULT_BUSY",
		4: "RESULT_DENIED",
		5: "RESULT_ERROR",
		6: "RESULT_TIMEOUT",
		7: "RESULT_WRONG_ARGUMENT",
		8: "RESULT_NO_SYSTEM",
	}
	CameraServerResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":        0,
		"RESULT_SUCCESS":        1,
		"RESULT_IN_PROGRESS":    2,
		"RESULT_BUSY":           3,
		"RESULT_DENIED":         4,
		"RESULT_ERROR":          5,
		"RESULT_TIMEOUT":        6,
		"RESULT_WRONG_ARGUMENT": 7,
		"RESULT_NO_SYSTEM":      8,
	}
)

func (x CameraServerResult_Result) Enum() *CameraServerResult_Result {
	p := new(CameraServerResult_Result)
	*p = x
	return p
}

func (x CameraServerResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraServerResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_server_proto_enumTypes[2].Descriptor()
}

func (CameraServerResult_Result) Type() protoreflect.EnumType {
	return &file_camera_server_proto_enumTypes[2]
}

func (x CameraServerResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraServerResult_Result.Descriptor instead.
func (CameraServerResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{67, 0}
}

// Storage status type.
type StorageInformation_StorageStatus int32

const (
	StorageInformation_STORAGE_STATUS_NOT_AVAILABLE StorageInformation_StorageStatus = 0 // Storage not available
	StorageInformation_STORAGE_STATUS_UNFORMATTED   StorageInformation_StorageStatus = 1 // Storage is not formatted (i.e. has no recognized file system)
	StorageInformation_STORAGE_STATUS_FORMATTED     StorageInformation_StorageStatus = 2 // Storage is formatted (i.e. has recognized a file system)
	StorageInformation_STORAGE_STATUS_NOT_SUPPORTED StorageInformation_StorageStatus = 3 // Storage status is not supported
)

// Enum value maps for StorageInformation_StorageStatus.
var (
	StorageInformation_StorageStatus_name = map[int32]string{
		0: "STORAGE_STATUS_NOT_AVAILABLE",
		1: "STORAGE_STATUS_UNFORMATTED",
		2: "STORAGE_STATUS_FORMATTED",
		3: "STORAGE_STATUS_NOT_SUPPORTED",
	}
	StorageInformation_StorageStatus_value = map[string]int32{
		"STORAGE_STATUS_NOT_AVAILABLE": 0,
		"STORAGE_STATUS_UNFORMATTED":   1,
		"STORAGE_STATUS_FORMATTED":     2,
		"STORAGE_STATUS_NOT_SUPPORTED": 3,
	}
)

func (x StorageInformation_StorageStatus) Enum() *StorageInformation_StorageStatus {
	p := new(StorageInformation_StorageStatus)
	*p = x
	return p
}

func (x StorageInformation_StorageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageInformation_StorageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_server_proto_enumTypes[3].Descriptor()
}

func (StorageInformation_StorageStatus) Type() protoreflect.EnumType {
	return &file_camera_server_proto_enumTypes[3]
}

func (x StorageInformation_StorageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageInformation_StorageStatus.Descriptor instead.
func (StorageInformation_StorageStatus) EnumDescriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{68, 0}
}

// Storage type.
type StorageInformation_StorageType int32

const (
	StorageInformation_STORAGE_TYPE_UNKNOWN   StorageInformation_StorageType = 0   // Storage type unknown
	StorageInformation_STORAGE_TYPE_USB_STICK StorageInformation_StorageType = 1   // Storage type USB stick
	StorageInformation_STORAGE_TYPE_SD        StorageInformation_StorageType = 2   // Storage type SD card
	StorageInformation_STORAGE_TYPE_MICROSD   StorageInformation_StorageType = 3   // Storage type MicroSD card
	StorageInformation_STORAGE_TYPE_HD        StorageInformation_StorageType = 7   // Storage type HD mass storage
	StorageInformation_STORAGE_TYPE_OTHER     StorageInformation_StorageType = 254 // Storage type other, not listed
)

// Enum value maps for StorageInformation_StorageType.
var (
	StorageInformation_StorageType_name = map[int32]string{
		0:   "STORAGE_TYPE_UNKNOWN",
		1:   "STORAGE_TYPE_USB_STICK",
		2:   "STORAGE_TYPE_SD",
		3:   "STORAGE_TYPE_MICROSD",
		7:   "STORAGE_TYPE_HD",
		254: "STORAGE_TYPE_OTHER",
	}
	StorageInformation_StorageType_value = map[string]int32{
		"STORAGE_TYPE_UNKNOWN":   0,
		"STORAGE_TYPE_USB_STICK": 1,
		"STORAGE_TYPE_SD":        2,
		"STORAGE_TYPE_MICROSD":   3,
		"STORAGE_TYPE_HD":        7,
		"STORAGE_TYPE_OTHER":     254,
	}
)

func (x StorageInformation_StorageType) Enum() *StorageInformation_StorageType {
	p := new(StorageInformation_StorageType)
	*p = x
	return p
}

func (x StorageInformation_StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageInformation_StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_server_proto_enumTypes[4].Descriptor()
}

func (StorageInformation_StorageType) Type() protoreflect.EnumType {
	return &file_camera_server_proto_enumTypes[4]
}

func (x StorageInformation_StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageInformation_StorageType.Descriptor instead.
func (StorageInformation_StorageType) EnumDescriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{68, 1}
}

type CaptureStatus_ImageStatus int32

const (
	CaptureStatus_IMAGE_STATUS_IDLE                 CaptureStatus_ImageStatus = 0 // idle
	CaptureStatus_IMAGE_STATUS_CAPTURE_IN_PROGRESS  CaptureStatus_ImageStatus = 1 // capture in progress
	CaptureStatus_IMAGE_STATUS_INTERVAL_IDLE        CaptureStatus_ImageStatus = 2 // interval set but idle
	CaptureStatus_IMAGE_STATUS_INTERVAL_IN_PROGRESS CaptureStatus_ImageStatus = 3 // interval set and capture in progress)
)

// Enum value maps for CaptureStatus_ImageStatus.
var (
	CaptureStatus_ImageStatus_name = map[int32]string{
		0: "IMAGE_STATUS_IDLE",
		1: "IMAGE_STATUS_CAPTURE_IN_PROGRESS",
		2: "IMAGE_STATUS_INTERVAL_IDLE",
		3: "IMAGE_STATUS_INTERVAL_IN_PROGRESS",
	}
	CaptureStatus_ImageStatus_value = map[string]int32{
		"IMAGE_STATUS_IDLE":                 0,
		"IMAGE_STATUS_CAPTURE_IN_PROGRESS":  1,
		"IMAGE_STATUS_INTERVAL_IDLE":        2,
		"IMAGE_STATUS_INTERVAL_IN_PROGRESS": 3,
	}
)

func (x CaptureStatus_ImageStatus) Enum() *CaptureStatus_ImageStatus {
	p := new(CaptureStatus_ImageStatus)
	*p = x
	return p
}

func (x CaptureStatus_ImageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptureStatus_ImageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_server_proto_enumTypes[5].Descriptor()
}

func (CaptureStatus_ImageStatus) Type() protoreflect.EnumType {
	return &file_camera_server_proto_enumTypes[5]
}

func (x CaptureStatus_ImageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaptureStatus_ImageStatus.Descriptor instead.
func (CaptureStatus_ImageStatus) EnumDescriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{69, 0}
}

type CaptureStatus_VideoStatus int32

const (
	CaptureStatus_VIDEO_STATUS_IDLE                CaptureStatus_VideoStatus = 0 // idle
	CaptureStatus_VIDEO_STATUS_CAPTURE_IN_PROGRESS CaptureStatus_VideoStatus = 1 // capture in progress
)

// Enum value maps for CaptureStatus_VideoStatus.
var (
	CaptureStatus_VideoStatus_name = map[int32]string{
		0: "VIDEO_STATUS_IDLE",
		1: "VIDEO_STATUS_CAPTURE_IN_PROGRESS",
	}
	CaptureStatus_VideoStatus_value = map[string]int32{
		"VIDEO_STATUS_IDLE":                0,
		"VIDEO_STATUS_CAPTURE_IN_PROGRESS": 1,
	}
)

func (x CaptureStatus_VideoStatus) Enum() *CaptureStatus_VideoStatus {
	p := new(CaptureStatus_VideoStatus)
	*p = x
	return p
}

func (x CaptureStatus_VideoStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptureStatus_VideoStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_server_proto_enumTypes[6].Descriptor()
}

func (CaptureStatus_VideoStatus) Type() protoreflect.EnumType {
	return &file_camera_server_proto_enumTypes[6]
}

func (x CaptureStatus_VideoStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaptureStatus_VideoStatus.Descriptor instead.
func (CaptureStatus_VideoStatus) EnumDescriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{69, 1}
}

type SetInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Information *Information `protobuf:"bytes,1,opt,name=information,proto3" json:"information,omitempty"` // information about the camera
}

func (x *SetInformationRequest) Reset() {
	*x = SetInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInformationRequest) ProtoMessage() {}

func (x *SetInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInformationRequest.ProtoReflect.Descriptor instead.
func (*SetInformationRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{0}
}

func (x *SetInformationRequest) GetInformation() *Information {
	if x != nil {
		return x.Information
	}
	return nil
}

type SetInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *SetInformationResponse) Reset() {
	*x = SetInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInformationResponse) ProtoMessage() {}

func (x *SetInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInformationResponse.ProtoReflect.Descriptor instead.
func (*SetInformationResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{1}
}

func (x *SetInformationResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SetVideoStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoStreaming *VideoStreaming `protobuf:"bytes,1,opt,name=video_streaming,json=videoStreaming,proto3" json:"video_streaming,omitempty"` // information about the video stream
}

func (x *SetVideoStreamingRequest) Reset() {
	*x = SetVideoStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVideoStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoStreamingRequest) ProtoMessage() {}

func (x *SetVideoStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoStreamingRequest.ProtoReflect.Descriptor instead.
func (*SetVideoStreamingRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{2}
}

func (x *SetVideoStreamingRequest) GetVideoStreaming() *VideoStreaming {
	if x != nil {
		return x.VideoStreaming
	}
	return nil
}

type SetVideoStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *SetVideoStreamingResponse) Reset() {
	*x = SetVideoStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVideoStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVideoStreamingResponse) ProtoMessage() {}

func (x *SetVideoStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVideoStreamingResponse.ProtoReflect.Descriptor instead.
func (*SetVideoStreamingResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{3}
}

func (x *SetVideoStreamingResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SetInProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InProgress bool `protobuf:"varint,1,opt,name=in_progress,json=inProgress,proto3" json:"in_progress,omitempty"` // true if capture is in progress or false for idle.
}

func (x *SetInProgressRequest) Reset() {
	*x = SetInProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInProgressRequest) ProtoMessage() {}

func (x *SetInProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInProgressRequest.ProtoReflect.Descriptor instead.
func (*SetInProgressRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{4}
}

func (x *SetInProgressRequest) GetInProgress() bool {
	if x != nil {
		return x.InProgress
	}
	return false
}

type SetInProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *SetInProgressResponse) Reset() {
	*x = SetInProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInProgressResponse) ProtoMessage() {}

func (x *SetInProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInProgressResponse.ProtoReflect.Descriptor instead.
func (*SetInProgressResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{5}
}

func (x *SetInProgressResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeTakePhotoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTakePhotoRequest) Reset() {
	*x = SubscribeTakePhotoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTakePhotoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTakePhotoRequest) ProtoMessage() {}

func (x *SubscribeTakePhotoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTakePhotoRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTakePhotoRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{6}
}

type TakePhotoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TakePhotoResponse) Reset() {
	*x = TakePhotoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakePhotoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakePhotoResponse) ProtoMessage() {}

func (x *TakePhotoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakePhotoResponse.ProtoReflect.Descriptor instead.
func (*TakePhotoResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{7}
}

func (x *TakePhotoResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RespondTakePhotoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakePhotoFeedback CameraFeedback `protobuf:"varint,1,opt,name=take_photo_feedback,json=takePhotoFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"take_photo_feedback,omitempty"` // the feedback
	CaptureInfo       *CaptureInfo   `protobuf:"bytes,2,opt,name=capture_info,json=captureInfo,proto3" json:"capture_info,omitempty"`                                                                   // the capture information
}

func (x *RespondTakePhotoRequest) Reset() {
	*x = RespondTakePhotoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondTakePhotoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondTakePhotoRequest) ProtoMessage() {}

func (x *RespondTakePhotoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondTakePhotoRequest.ProtoReflect.Descriptor instead.
func (*RespondTakePhotoRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{8}
}

func (x *RespondTakePhotoRequest) GetTakePhotoFeedback() CameraFeedback {
	if x != nil {
		return x.TakePhotoFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

func (x *RespondTakePhotoRequest) GetCaptureInfo() *CaptureInfo {
	if x != nil {
		return x.CaptureInfo
	}
	return nil
}

type RespondTakePhotoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondTakePhotoResponse) Reset() {
	*x = RespondTakePhotoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondTakePhotoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondTakePhotoResponse) ProtoMessage() {}

func (x *RespondTakePhotoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondTakePhotoResponse.ProtoReflect.Descriptor instead.
func (*RespondTakePhotoResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{9}
}

func (x *RespondTakePhotoResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeStartVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeStartVideoRequest) Reset() {
	*x = SubscribeStartVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeStartVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStartVideoRequest) ProtoMessage() {}

func (x *SubscribeStartVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStartVideoRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStartVideoRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{10}
}

type StartVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // video stream id
}

func (x *StartVideoResponse) Reset() {
	*x = StartVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVideoResponse) ProtoMessage() {}

func (x *StartVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVideoResponse.ProtoReflect.Descriptor instead.
func (*StartVideoResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{11}
}

func (x *StartVideoResponse) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type RespondStartVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartVideoFeedback CameraFeedback `protobuf:"varint,1,opt,name=start_video_feedback,json=startVideoFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"start_video_feedback,omitempty"` // the feedback
}

func (x *RespondStartVideoRequest) Reset() {
	*x = RespondStartVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStartVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStartVideoRequest) ProtoMessage() {}

func (x *RespondStartVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStartVideoRequest.ProtoReflect.Descriptor instead.
func (*RespondStartVideoRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{12}
}

func (x *RespondStartVideoRequest) GetStartVideoFeedback() CameraFeedback {
	if x != nil {
		return x.StartVideoFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondStartVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondStartVideoResponse) Reset() {
	*x = RespondStartVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStartVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStartVideoResponse) ProtoMessage() {}

func (x *RespondStartVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStartVideoResponse.ProtoReflect.Descriptor instead.
func (*RespondStartVideoResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{13}
}

func (x *RespondStartVideoResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeStopVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeStopVideoRequest) Reset() {
	*x = SubscribeStopVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeStopVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStopVideoRequest) ProtoMessage() {}

func (x *SubscribeStopVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStopVideoRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStopVideoRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{14}
}

type StopVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // video stream id
}

func (x *StopVideoResponse) Reset() {
	*x = StopVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVideoResponse) ProtoMessage() {}

func (x *StopVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVideoResponse.ProtoReflect.Descriptor instead.
func (*StopVideoResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{15}
}

func (x *StopVideoResponse) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type RespondStopVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopVideoFeedback CameraFeedback `protobuf:"varint,1,opt,name=stop_video_feedback,json=stopVideoFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"stop_video_feedback,omitempty"` // the feedback
}

func (x *RespondStopVideoRequest) Reset() {
	*x = RespondStopVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStopVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStopVideoRequest) ProtoMessage() {}

func (x *RespondStopVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStopVideoRequest.ProtoReflect.Descriptor instead.
func (*RespondStopVideoRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{16}
}

func (x *RespondStopVideoRequest) GetStopVideoFeedback() CameraFeedback {
	if x != nil {
		return x.StopVideoFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondStopVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondStopVideoResponse) Reset() {
	*x = RespondStopVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStopVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStopVideoResponse) ProtoMessage() {}

func (x *RespondStopVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStopVideoResponse.ProtoReflect.Descriptor instead.
func (*RespondStopVideoResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{17}
}

func (x *RespondStopVideoResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeStartVideoStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeStartVideoStreamingRequest) Reset() {
	*x = SubscribeStartVideoStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeStartVideoStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStartVideoStreamingRequest) ProtoMessage() {}

func (x *SubscribeStartVideoStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStartVideoStreamingRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStartVideoStreamingRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{18}
}

type StartVideoStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // video stream id
}

func (x *StartVideoStreamingResponse) Reset() {
	*x = StartVideoStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVideoStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVideoStreamingResponse) ProtoMessage() {}

func (x *StartVideoStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVideoStreamingResponse.ProtoReflect.Descriptor instead.
func (*StartVideoStreamingResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{19}
}

func (x *StartVideoStreamingResponse) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type RespondStartVideoStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartVideoStreamingFeedback CameraFeedback `protobuf:"varint,1,opt,name=start_video_streaming_feedback,json=startVideoStreamingFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"start_video_streaming_feedback,omitempty"` // the feedback
}

func (x *RespondStartVideoStreamingRequest) Reset() {
	*x = RespondStartVideoStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStartVideoStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStartVideoStreamingRequest) ProtoMessage() {}

func (x *RespondStartVideoStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStartVideoStreamingRequest.ProtoReflect.Descriptor instead.
func (*RespondStartVideoStreamingRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{20}
}

func (x *RespondStartVideoStreamingRequest) GetStartVideoStreamingFeedback() CameraFeedback {
	if x != nil {
		return x.StartVideoStreamingFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondStartVideoStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondStartVideoStreamingResponse) Reset() {
	*x = RespondStartVideoStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStartVideoStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStartVideoStreamingResponse) ProtoMessage() {}

func (x *RespondStartVideoStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStartVideoStreamingResponse.ProtoReflect.Descriptor instead.
func (*RespondStartVideoStreamingResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{21}
}

func (x *RespondStartVideoStreamingResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeStopVideoStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeStopVideoStreamingRequest) Reset() {
	*x = SubscribeStopVideoStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeStopVideoStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStopVideoStreamingRequest) ProtoMessage() {}

func (x *SubscribeStopVideoStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStopVideoStreamingRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStopVideoStreamingRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{22}
}

type StopVideoStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // video stream id
}

func (x *StopVideoStreamingResponse) Reset() {
	*x = StopVideoStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVideoStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVideoStreamingResponse) ProtoMessage() {}

func (x *StopVideoStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVideoStreamingResponse.ProtoReflect.Descriptor instead.
func (*StopVideoStreamingResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{23}
}

func (x *StopVideoStreamingResponse) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type RespondStopVideoStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopVideoStreamingFeedback CameraFeedback `protobuf:"varint,1,opt,name=stop_video_streaming_feedback,json=stopVideoStreamingFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"stop_video_streaming_feedback,omitempty"` // the feedback
}

func (x *RespondStopVideoStreamingRequest) Reset() {
	*x = RespondStopVideoStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStopVideoStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStopVideoStreamingRequest) ProtoMessage() {}

func (x *RespondStopVideoStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStopVideoStreamingRequest.ProtoReflect.Descriptor instead.
func (*RespondStopVideoStreamingRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{24}
}

func (x *RespondStopVideoStreamingRequest) GetStopVideoStreamingFeedback() CameraFeedback {
	if x != nil {
		return x.StopVideoStreamingFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondStopVideoStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondStopVideoStreamingResponse) Reset() {
	*x = RespondStopVideoStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStopVideoStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStopVideoStreamingResponse) ProtoMessage() {}

func (x *RespondStopVideoStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStopVideoStreamingResponse.ProtoReflect.Descriptor instead.
func (*RespondStopVideoStreamingResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{25}
}

func (x *RespondStopVideoStreamingResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeSetModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeSetModeRequest) Reset() {
	*x = SubscribeSetModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeSetModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeSetModeRequest) ProtoMessage() {}

func (x *SubscribeSetModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeSetModeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeSetModeRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{26}
}

type SetModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=mavsdk.rpc.camera_server.Mode" json:"mode,omitempty"`
}

func (x *SetModeResponse) Reset() {
	*x = SetModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModeResponse) ProtoMessage() {}

func (x *SetModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModeResponse.ProtoReflect.Descriptor instead.
func (*SetModeResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{27}
}

func (x *SetModeResponse) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_MODE_UNKNOWN
}

type RespondSetModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetModeFeedback CameraFeedback `protobuf:"varint,1,opt,name=set_mode_feedback,json=setModeFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"set_mode_feedback,omitempty"` // the feedback
}

func (x *RespondSetModeRequest) Reset() {
	*x = RespondSetModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondSetModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondSetModeRequest) ProtoMessage() {}

func (x *RespondSetModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondSetModeRequest.ProtoReflect.Descriptor instead.
func (*RespondSetModeRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{28}
}

func (x *RespondSetModeRequest) GetSetModeFeedback() CameraFeedback {
	if x != nil {
		return x.SetModeFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondSetModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondSetModeResponse) Reset() {
	*x = RespondSetModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondSetModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondSetModeResponse) ProtoMessage() {}

func (x *RespondSetModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondSetModeResponse.ProtoReflect.Descriptor instead.
func (*RespondSetModeResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{29}
}

func (x *RespondSetModeResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeStorageInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeStorageInformationRequest) Reset() {
	*x = SubscribeStorageInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeStorageInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStorageInformationRequest) ProtoMessage() {}

func (x *SubscribeStorageInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStorageInformationRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStorageInformationRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{30}
}

type StorageInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageId int32 `protobuf:"varint,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
}

func (x *StorageInformationResponse) Reset() {
	*x = StorageInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageInformationResponse) ProtoMessage() {}

func (x *StorageInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageInformationResponse.ProtoReflect.Descriptor instead.
func (*StorageInformationResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{31}
}

func (x *StorageInformationResponse) GetStorageId() int32 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

type RespondStorageInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageInformationFeedback CameraFeedback      `protobuf:"varint,1,opt,name=storage_information_feedback,json=storageInformationFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"storage_information_feedback,omitempty"` // the feedback
	StorageInformation         *StorageInformation `protobuf:"bytes,2,opt,name=storage_information,json=storageInformation,proto3" json:"storage_information,omitempty"`                                                                         // the storage information
}

func (x *RespondStorageInformationRequest) Reset() {
	*x = RespondStorageInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStorageInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStorageInformationRequest) ProtoMessage() {}

func (x *RespondStorageInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStorageInformationRequest.ProtoReflect.Descriptor instead.
func (*RespondStorageInformationRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{32}
}

func (x *RespondStorageInformationRequest) GetStorageInformationFeedback() CameraFeedback {
	if x != nil {
		return x.StorageInformationFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

func (x *RespondStorageInformationRequest) GetStorageInformation() *StorageInformation {
	if x != nil {
		return x.StorageInformation
	}
	return nil
}

type RespondStorageInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondStorageInformationResponse) Reset() {
	*x = RespondStorageInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondStorageInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondStorageInformationResponse) ProtoMessage() {}

func (x *RespondStorageInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondStorageInformationResponse.ProtoReflect.Descriptor instead.
func (*RespondStorageInformationResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{33}
}

func (x *RespondStorageInformationResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeCaptureStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeCaptureStatusRequest) Reset() {
	*x = SubscribeCaptureStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCaptureStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCaptureStatusRequest) ProtoMessage() {}

func (x *SubscribeCaptureStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCaptureStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCaptureStatusRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{34}
}

type CaptureStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved int32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"` // reserved, just make protoc-gen-mavsdk working
}

func (x *CaptureStatusResponse) Reset() {
	*x = CaptureStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStatusResponse) ProtoMessage() {}

func (x *CaptureStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStatusResponse.ProtoReflect.Descriptor instead.
func (*CaptureStatusResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{35}
}

func (x *CaptureStatusResponse) GetReserved() int32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

type RespondCaptureStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureStatusFeedback CameraFeedback `protobuf:"varint,1,opt,name=capture_status_feedback,json=captureStatusFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"capture_status_feedback,omitempty"` // the feedback
	CaptureStatus         *CaptureStatus `protobuf:"bytes,2,opt,name=capture_status,json=captureStatus,proto3" json:"capture_status,omitempty"`                                                                         // the capture status
}

func (x *RespondCaptureStatusRequest) Reset() {
	*x = RespondCaptureStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondCaptureStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondCaptureStatusRequest) ProtoMessage() {}

func (x *RespondCaptureStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondCaptureStatusRequest.ProtoReflect.Descriptor instead.
func (*RespondCaptureStatusRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{36}
}

func (x *RespondCaptureStatusRequest) GetCaptureStatusFeedback() CameraFeedback {
	if x != nil {
		return x.CaptureStatusFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

func (x *RespondCaptureStatusRequest) GetCaptureStatus() *CaptureStatus {
	if x != nil {
		return x.CaptureStatus
	}
	return nil
}

type RespondCaptureStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondCaptureStatusResponse) Reset() {
	*x = RespondCaptureStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondCaptureStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondCaptureStatusResponse) ProtoMessage() {}

func (x *RespondCaptureStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondCaptureStatusResponse.ProtoReflect.Descriptor instead.
func (*RespondCaptureStatusResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{37}
}

func (x *RespondCaptureStatusResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeFormatStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeFormatStorageRequest) Reset() {
	*x = SubscribeFormatStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeFormatStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeFormatStorageRequest) ProtoMessage() {}

func (x *SubscribeFormatStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeFormatStorageRequest.ProtoReflect.Descriptor instead.
func (*SubscribeFormatStorageRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{38}
}

type FormatStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageId int32 `protobuf:"varint,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"` // the storage id to format
}

func (x *FormatStorageResponse) Reset() {
	*x = FormatStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatStorageResponse) ProtoMessage() {}

func (x *FormatStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatStorageResponse.ProtoReflect.Descriptor instead.
func (*FormatStorageResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{39}
}

func (x *FormatStorageResponse) GetStorageId() int32 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

type RespondFormatStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatStorageFeedback CameraFeedback `protobuf:"varint,1,opt,name=format_storage_feedback,json=formatStorageFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"format_storage_feedback,omitempty"` // the feedback
}

func (x *RespondFormatStorageRequest) Reset() {
	*x = RespondFormatStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondFormatStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondFormatStorageRequest) ProtoMessage() {}

func (x *RespondFormatStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondFormatStorageRequest.ProtoReflect.Descriptor instead.
func (*RespondFormatStorageRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{40}
}

func (x *RespondFormatStorageRequest) GetFormatStorageFeedback() CameraFeedback {
	if x != nil {
		return x.FormatStorageFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondFormatStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondFormatStorageResponse) Reset() {
	*x = RespondFormatStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondFormatStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondFormatStorageResponse) ProtoMessage() {}

func (x *RespondFormatStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondFormatStorageResponse.ProtoReflect.Descriptor instead.
func (*RespondFormatStorageResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{41}
}

func (x *RespondFormatStorageResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeResetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeResetSettingsRequest) Reset() {
	*x = SubscribeResetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResetSettingsRequest) ProtoMessage() {}

func (x *SubscribeResetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResetSettingsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeResetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{42}
}

type ResetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved int32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"` // reserved, just make protoc-gen-mavsdk working
}

func (x *ResetSettingsResponse) Reset() {
	*x = ResetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSettingsResponse) ProtoMessage() {}

func (x *ResetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSettingsResponse.ProtoReflect.Descriptor instead.
func (*ResetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{43}
}

func (x *ResetSettingsResponse) GetReserved() int32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

type RespondResetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResetSettingsFeedback CameraFeedback `protobuf:"varint,1,opt,name=reset_settings_feedback,json=resetSettingsFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"reset_settings_feedback,omitempty"` // the feedback
}

func (x *RespondResetSettingsRequest) Reset() {
	*x = RespondResetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondResetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondResetSettingsRequest) ProtoMessage() {}

func (x *RespondResetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondResetSettingsRequest.ProtoReflect.Descriptor instead.
func (*RespondResetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{44}
}

func (x *RespondResetSettingsRequest) GetResetSettingsFeedback() CameraFeedback {
	if x != nil {
		return x.ResetSettingsFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondResetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondResetSettingsResponse) Reset() {
	*x = RespondResetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondResetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondResetSettingsResponse) ProtoMessage() {}

func (x *RespondResetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondResetSettingsResponse.ProtoReflect.Descriptor instead.
func (*RespondResetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{45}
}

func (x *RespondResetSettingsResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeZoomInStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeZoomInStartRequest) Reset() {
	*x = SubscribeZoomInStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeZoomInStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeZoomInStartRequest) ProtoMessage() {}

func (x *SubscribeZoomInStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeZoomInStartRequest.ProtoReflect.Descriptor instead.
func (*SubscribeZoomInStartRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{46}
}

type ZoomInStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved int32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"` // reserved, just make protoc-gen-mavsdk working
}

func (x *ZoomInStartResponse) Reset() {
	*x = ZoomInStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomInStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomInStartResponse) ProtoMessage() {}

func (x *ZoomInStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomInStartResponse.ProtoReflect.Descriptor instead.
func (*ZoomInStartResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{47}
}

func (x *ZoomInStartResponse) GetReserved() int32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

type RespondZoomInStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoomInStartFeedback CameraFeedback `protobuf:"varint,1,opt,name=zoom_in_start_feedback,json=zoomInStartFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"zoom_in_start_feedback,omitempty"` // the feedback
}

func (x *RespondZoomInStartRequest) Reset() {
	*x = RespondZoomInStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondZoomInStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondZoomInStartRequest) ProtoMessage() {}

func (x *RespondZoomInStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondZoomInStartRequest.ProtoReflect.Descriptor instead.
func (*RespondZoomInStartRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{48}
}

func (x *RespondZoomInStartRequest) GetZoomInStartFeedback() CameraFeedback {
	if x != nil {
		return x.ZoomInStartFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondZoomInStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondZoomInStartResponse) Reset() {
	*x = RespondZoomInStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondZoomInStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondZoomInStartResponse) ProtoMessage() {}

func (x *RespondZoomInStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondZoomInStartResponse.ProtoReflect.Descriptor instead.
func (*RespondZoomInStartResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{49}
}

func (x *RespondZoomInStartResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeZoomOutStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeZoomOutStartRequest) Reset() {
	*x = SubscribeZoomOutStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeZoomOutStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeZoomOutStartRequest) ProtoMessage() {}

func (x *SubscribeZoomOutStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeZoomOutStartRequest.ProtoReflect.Descriptor instead.
func (*SubscribeZoomOutStartRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{50}
}

type ZoomOutStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved int32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"` // reserved, just make protoc-gen-mavsdk working
}

func (x *ZoomOutStartResponse) Reset() {
	*x = ZoomOutStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomOutStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomOutStartResponse) ProtoMessage() {}

func (x *ZoomOutStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomOutStartResponse.ProtoReflect.Descriptor instead.
func (*ZoomOutStartResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{51}
}

func (x *ZoomOutStartResponse) GetReserved() int32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

type RespondZoomOutStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoomOutStartFeedback CameraFeedback `protobuf:"varint,1,opt,name=zoom_out_start_feedback,json=zoomOutStartFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"zoom_out_start_feedback,omitempty"` // the feedback
}

func (x *RespondZoomOutStartRequest) Reset() {
	*x = RespondZoomOutStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondZoomOutStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondZoomOutStartRequest) ProtoMessage() {}

func (x *RespondZoomOutStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondZoomOutStartRequest.ProtoReflect.Descriptor instead.
func (*RespondZoomOutStartRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{52}
}

func (x *RespondZoomOutStartRequest) GetZoomOutStartFeedback() CameraFeedback {
	if x != nil {
		return x.ZoomOutStartFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondZoomOutStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondZoomOutStartResponse) Reset() {
	*x = RespondZoomOutStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondZoomOutStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondZoomOutStartResponse) ProtoMessage() {}

func (x *RespondZoomOutStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondZoomOutStartResponse.ProtoReflect.Descriptor instead.
func (*RespondZoomOutStartResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{53}
}

func (x *RespondZoomOutStartResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeZoomStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeZoomStopRequest) Reset() {
	*x = SubscribeZoomStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeZoomStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeZoomStopRequest) ProtoMessage() {}

func (x *SubscribeZoomStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeZoomStopRequest.ProtoReflect.Descriptor instead.
func (*SubscribeZoomStopRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{54}
}

type ZoomStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserved int32 `protobuf:"varint,1,opt,name=reserved,proto3" json:"reserved,omitempty"` // reserved, just make protoc-gen-mavsdk working
}

func (x *ZoomStopResponse) Reset() {
	*x = ZoomStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomStopResponse) ProtoMessage() {}

func (x *ZoomStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomStopResponse.ProtoReflect.Descriptor instead.
func (*ZoomStopResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{55}
}

func (x *ZoomStopResponse) GetReserved() int32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

type RespondZoomStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoomStopFeedback CameraFeedback `protobuf:"varint,1,opt,name=zoom_stop_feedback,json=zoomStopFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"zoom_stop_feedback,omitempty"` // the feedback
}

func (x *RespondZoomStopRequest) Reset() {
	*x = RespondZoomStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondZoomStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondZoomStopRequest) ProtoMessage() {}

func (x *RespondZoomStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondZoomStopRequest.ProtoReflect.Descriptor instead.
func (*RespondZoomStopRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{56}
}

func (x *RespondZoomStopRequest) GetZoomStopFeedback() CameraFeedback {
	if x != nil {
		return x.ZoomStopFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondZoomStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondZoomStopResponse) Reset() {
	*x = RespondZoomStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondZoomStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondZoomStopResponse) ProtoMessage() {}

func (x *RespondZoomStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondZoomStopResponse.ProtoReflect.Descriptor instead.
func (*RespondZoomStopResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{57}
}

func (x *RespondZoomStopResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type SubscribeZoomRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeZoomRangeRequest) Reset() {
	*x = SubscribeZoomRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeZoomRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeZoomRangeRequest) ProtoMessage() {}

func (x *SubscribeZoomRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeZoomRangeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeZoomRangeRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{58}
}

type ZoomRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Factor float32 `protobuf:"fixed32,1,opt,name=factor,proto3" json:"factor,omitempty"` // The zoom factor, starting at 1x.
}

func (x *ZoomRangeResponse) Reset() {
	*x = ZoomRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomRangeResponse) ProtoMessage() {}

func (x *ZoomRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomRangeResponse.ProtoReflect.Descriptor instead.
func (*ZoomRangeResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{59}
}

func (x *ZoomRangeResponse) GetFactor() float32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

type RespondZoomRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoomRangeFeedback CameraFeedback `protobuf:"varint,1,opt,name=zoom_range_feedback,json=zoomRangeFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"zoom_range_feedback,omitempty"` // the feedback
}

func (x *RespondZoomRangeRequest) Reset() {
	*x = RespondZoomRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondZoomRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondZoomRangeRequest) ProtoMessage() {}

func (x *RespondZoomRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondZoomRangeRequest.ProtoReflect.Descriptor instead.
func (*RespondZoomRangeRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{60}
}

func (x *RespondZoomRangeRequest) GetZoomRangeFeedback() CameraFeedback {
	if x != nil {
		return x.ZoomRangeFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondZoomRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"`
}

func (x *RespondZoomRangeResponse) Reset() {
	*x = RespondZoomRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondZoomRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondZoomRangeResponse) ProtoMessage() {}

func (x *RespondZoomRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondZoomRangeResponse.ProtoReflect.Descriptor instead.
func (*RespondZoomRangeResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{61}
}

func (x *RespondZoomRangeResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

// Type to represent a camera information.
type Information struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorName             string  `protobuf:"bytes,1,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                           // Name of the camera vendor
	ModelName              string  `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                              // Name of the camera model
	FirmwareVersion        string  `protobuf:"bytes,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`                            // Camera firmware version in major[.minor[.patch[.dev]]] format
	FocalLengthMm          float32 `protobuf:"fixed32,4,opt,name=focal_length_mm,json=focalLengthMm,proto3" json:"focal_length_mm,omitempty"`                              // Focal length
	HorizontalSensorSizeMm float32 `protobuf:"fixed32,5,opt,name=horizontal_sensor_size_mm,json=horizontalSensorSizeMm,proto3" json:"horizontal_sensor_size_mm,omitempty"` // Horizontal sensor size
	VerticalSensorSizeMm   float32 `protobuf:"fixed32,6,opt,name=vertical_sensor_size_mm,json=verticalSensorSizeMm,proto3" json:"vertical_sensor_size_mm,omitempty"`       // Vertical sensor size
	HorizontalResolutionPx uint32  `protobuf:"varint,7,opt,name=horizontal_resolution_px,json=horizontalResolutionPx,proto3" json:"horizontal_resolution_px,omitempty"`    // Horizontal image resolution in pixels
	VerticalResolutionPx   uint32  `protobuf:"varint,8,opt,name=vertical_resolution_px,json=verticalResolutionPx,proto3" json:"vertical_resolution_px,omitempty"`          // Vertical image resolution in pixels
	LensId                 uint32  `protobuf:"varint,9,opt,name=lens_id,json=lensId,proto3" json:"lens_id,omitempty"`                                                      // Lens ID
	DefinitionFileVersion  uint32  `protobuf:"varint,10,opt,name=definition_file_version,json=definitionFileVersion,proto3" json:"definition_file_version,omitempty"`      // Camera definition file version (iteration)
	DefinitionFileUri      string  `protobuf:"bytes,11,opt,name=definition_file_uri,json=definitionFileUri,proto3" json:"definition_file_uri,omitempty"`                   // Camera definition URI (http or mavlink ftp)
}

func (x *Information) Reset() {
	*x = Information{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Information) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Information) ProtoMessage() {}

func (x *Information) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Information.ProtoReflect.Descriptor instead.
func (*Information) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{62}
}

func (x *Information) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Information) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *Information) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Information) GetFocalLengthMm() float32 {
	if x != nil {
		return x.FocalLengthMm
	}
	return 0
}

func (x *Information) GetHorizontalSensorSizeMm() float32 {
	if x != nil {
		return x.HorizontalSensorSizeMm
	}
	return 0
}

func (x *Information) GetVerticalSensorSizeMm() float32 {
	if x != nil {
		return x.VerticalSensorSizeMm
	}
	return 0
}

func (x *Information) GetHorizontalResolutionPx() uint32 {
	if x != nil {
		return x.HorizontalResolutionPx
	}
	return 0
}

func (x *Information) GetVerticalResolutionPx() uint32 {
	if x != nil {
		return x.VerticalResolutionPx
	}
	return 0
}

func (x *Information) GetLensId() uint32 {
	if x != nil {
		return x.LensId
	}
	return 0
}

func (x *Information) GetDefinitionFileVersion() uint32 {
	if x != nil {
		return x.DefinitionFileVersion
	}
	return 0
}

func (x *Information) GetDefinitionFileUri() string {
	if x != nil {
		return x.DefinitionFileUri
	}
	return ""
}

// Type to represent video streaming settings
type VideoStreaming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasRtspServer bool   `protobuf:"varint,1,opt,name=has_rtsp_server,json=hasRtspServer,proto3" json:"has_rtsp_server,omitempty"` // True if the capture was successful
	RtspUri       string `protobuf:"bytes,2,opt,name=rtsp_uri,json=rtspUri,proto3" json:"rtsp_uri,omitempty"`                      // RTSP URI (e.g. rtsp://192.168.1.42:8554/live)
}

func (x *VideoStreaming) Reset() {
	*x = VideoStreaming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoStreaming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStreaming) ProtoMessage() {}

func (x *VideoStreaming) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStreaming.ProtoReflect.Descriptor instead.
func (*VideoStreaming) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{63}
}

func (x *VideoStreaming) GetHasRtspServer() bool {
	if x != nil {
		return x.HasRtspServer
	}
	return false
}

func (x *VideoStreaming) GetRtspUri() string {
	if x != nil {
		return x.RtspUri
	}
	return ""
}

// Position type in global coordinates.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatitudeDeg       float64 `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                     // Latitude in degrees (range: -90 to +90)
	LongitudeDeg      float64 `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                  // Longitude in degrees (range: -180 to +180)
	AbsoluteAltitudeM float32 `protobuf:"fixed32,3,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"` // Altitude AMSL (above mean sea level) in metres
	RelativeAltitudeM float32 `protobuf:"fixed32,4,opt,name=relative_altitude_m,json=relativeAltitudeM,proto3" json:"relative_altitude_m,omitempty"` // Altitude relative to takeoff altitude in metres
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{64}
}

func (x *Position) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *Position) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *Position) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

func (x *Position) GetRelativeAltitudeM() float32 {
	if x != nil {
		return x.RelativeAltitudeM
	}
	return 0
}

// Quaternion type.
//
// All rotations and axis systems follow the right-hand rule.
// The Hamilton quaternion product definition is used.
// A zero-rotation quaternion is represented by (1,0,0,0).
// The quaternion could also be written as w + xi + yj + zk.
//
// For more info see: https://en.wikipedia.org/wiki/Quaternion
type Quaternion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	W float32 `protobuf:"fixed32,1,opt,name=w,proto3" json:"w,omitempty"` // Quaternion entry 0, also denoted as a
	X float32 `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"` // Quaternion entry 1, also denoted as b
	Y float32 `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"` // Quaternion entry 2, also denoted as c
	Z float32 `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"` // Quaternion entry 3, also denoted as d
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{65}
}

func (x *Quaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Quaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Information about a picture just captured.
type CaptureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position           *Position   `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`                                               // Location where the picture was taken
	AttitudeQuaternion *Quaternion `protobuf:"bytes,2,opt,name=attitude_quaternion,json=attitudeQuaternion,proto3" json:"attitude_quaternion,omitempty"` // Attitude of the camera when the picture was taken (quaternion)
	TimeUtcUs          uint64      `protobuf:"varint,3,opt,name=time_utc_us,json=timeUtcUs,proto3" json:"time_utc_us,omitempty"`                         // Timestamp in UTC (since UNIX epoch) in microseconds
	IsSuccess          bool        `protobuf:"varint,4,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`                           // True if the capture was successful
	Index              int32       `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`                                                    // Index from TakePhotoResponse
	FileUrl            string      `protobuf:"bytes,6,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`                                  // Download URL of this image
}

func (x *CaptureInfo) Reset() {
	*x = CaptureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInfo) ProtoMessage() {}

func (x *CaptureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInfo.ProtoReflect.Descriptor instead.
func (*CaptureInfo) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{66}
}

func (x *CaptureInfo) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CaptureInfo) GetAttitudeQuaternion() *Quaternion {
	if x != nil {
		return x.AttitudeQuaternion
	}
	return nil
}

func (x *CaptureInfo) GetTimeUtcUs() uint64 {
	if x != nil {
		return x.TimeUtcUs
	}
	return 0
}

func (x *CaptureInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *CaptureInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CaptureInfo) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

// Result type.
type CameraServerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    CameraServerResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.camera_server.CameraServerResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string                    `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                                   // Human-readable English string describing the result
}

func (x *CameraServerResult) Reset() {
	*x = CameraServerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraServerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraServerResult) ProtoMessage() {}

func (x *CameraServerResult) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraServerResult.ProtoReflect.Descriptor instead.
func (*CameraServerResult) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{67}
}

func (x *CameraServerResult) GetResult() CameraServerResult_Result {
	if x != nil {
		return x.Result
	}
	return CameraServerResult_RESULT_UNKNOWN
}

func (x *CameraServerResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

// Information about the camera storage.
type StorageInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedStorageMib      float32                          `protobuf:"fixed32,1,opt,name=used_storage_mib,json=usedStorageMib,proto3" json:"used_storage_mib,omitempty"`                                                          // Used storage (in MiB)
	AvailableStorageMib float32                          `protobuf:"fixed32,2,opt,name=available_storage_mib,json=availableStorageMib,proto3" json:"available_storage_mib,omitempty"`                                           // Available storage (in MiB)
	TotalStorageMib     float32                          `protobuf:"fixed32,3,opt,name=total_storage_mib,json=totalStorageMib,proto3" json:"total_storage_mib,omitempty"`                                                       // Total storage (in MiB)
	StorageStatus       StorageInformation_StorageStatus `protobuf:"varint,4,opt,name=storage_status,json=storageStatus,proto3,enum=mavsdk.rpc.camera_server.StorageInformation_StorageStatus" json:"storage_status,omitempty"` // Storage status
	StorageId           uint32                           `protobuf:"varint,5,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                                                                            // Storage ID starting at 1
	StorageType         StorageInformation_StorageType   `protobuf:"varint,6,opt,name=storage_type,json=storageType,proto3,enum=mavsdk.rpc.camera_server.StorageInformation_StorageType" json:"storage_type,omitempty"`         // Storage type
	ReadSpeedMibS       float32                          `protobuf:"fixed32,7,opt,name=read_speed_mib_s,json=readSpeedMibS,proto3" json:"read_speed_mib_s,omitempty"`                                                           // Read speed [MiB/s]
	WriteSpeedMibS      float32                          `protobuf:"fixed32,8,opt,name=write_speed_mib_s,json=writeSpeedMibS,proto3" json:"write_speed_mib_s,omitempty"`                                                        // Write speed [MiB/s]
}

func (x *StorageInformation) Reset() {
	*x = StorageInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageInformation) ProtoMessage() {}

func (x *StorageInformation) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageInformation.ProtoReflect.Descriptor instead.
func (*StorageInformation) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{68}
}

func (x *StorageInformation) GetUsedStorageMib() float32 {
	if x != nil {
		return x.UsedStorageMib
	}
	return 0
}

func (x *StorageInformation) GetAvailableStorageMib() float32 {
	if x != nil {
		return x.AvailableStorageMib
	}
	return 0
}

func (x *StorageInformation) GetTotalStorageMib() float32 {
	if x != nil {
		return x.TotalStorageMib
	}
	return 0
}

func (x *StorageInformation) GetStorageStatus() StorageInformation_StorageStatus {
	if x != nil {
		return x.StorageStatus
	}
	return StorageInformation_STORAGE_STATUS_NOT_AVAILABLE
}

func (x *StorageInformation) GetStorageId() uint32 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

func (x *StorageInformation) GetStorageType() StorageInformation_StorageType {
	if x != nil {
		return x.StorageType
	}
	return StorageInformation_STORAGE_TYPE_UNKNOWN
}

func (x *StorageInformation) GetReadSpeedMibS() float32 {
	if x != nil {
		return x.ReadSpeedMibS
	}
	return 0
}

func (x *StorageInformation) GetWriteSpeedMibS() float32 {
	if x != nil {
		return x.WriteSpeedMibS
	}
	return 0
}

type CaptureStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageIntervalS       float32                   `protobuf:"fixed32,1,opt,name=image_interval_s,json=imageIntervalS,proto3" json:"image_interval_s,omitempty"`                                             // Image capture interval (in s)
	RecordingTimeS       float32                   `protobuf:"fixed32,2,opt,name=recording_time_s,json=recordingTimeS,proto3" json:"recording_time_s,omitempty"`                                             // Elapsed time since recording started (in s)
	AvailableCapacityMib float32                   `protobuf:"fixed32,3,opt,name=available_capacity_mib,json=availableCapacityMib,proto3" json:"available_capacity_mib,omitempty"`                           // Available storage capacity. (in MiB)
	ImageStatus          CaptureStatus_ImageStatus `protobuf:"varint,4,opt,name=image_status,json=imageStatus,proto3,enum=mavsdk.rpc.camera_server.CaptureStatus_ImageStatus" json:"image_status,omitempty"` // Current status of image capturing
	VideoStatus          CaptureStatus_VideoStatus `protobuf:"varint,5,opt,name=video_status,json=videoStatus,proto3,enum=mavsdk.rpc.camera_server.CaptureStatus_VideoStatus" json:"video_status,omitempty"` // Current status of video capturing
	ImageCount           int32                     `protobuf:"varint,6,opt,name=image_count,json=imageCount,proto3" json:"image_count,omitempty"`                                                            // Total number of images captured ('forever', or until reset using MAV_CMD_STORAGE_FORMAT)
}

func (x *CaptureStatus) Reset() {
	*x = CaptureStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStatus) ProtoMessage() {}

func (x *CaptureStatus) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStatus.ProtoReflect.Descriptor instead.
func (*CaptureStatus) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{69}
}

func (x *CaptureStatus) GetImageIntervalS() float32 {
	if x != nil {
		return x.ImageIntervalS
	}
	return 0
}

func (x *CaptureStatus) GetRecordingTimeS() float32 {
	if x != nil {
		return x.RecordingTimeS
	}
	return 0
}

func (x *CaptureStatus) GetAvailableCapacityMib() float32 {
	if x != nil {
		return x.AvailableCapacityMib
	}
	return 0
}

func (x *CaptureStatus) GetImageStatus() CaptureStatus_ImageStatus {
	if x != nil {
		return x.ImageStatus
	}
	return CaptureStatus_IMAGE_STATUS_IDLE
}

func (x *CaptureStatus) GetVideoStatus() CaptureStatus_VideoStatus {
	if x != nil {
		return x.VideoStatus
	}
	return CaptureStatus_VIDEO_STATUS_IDLE
}

func (x *CaptureStatus) GetImageCount() int32 {
	if x != nil {
		return x.ImageCount
	}
	return 0
}

type SetTrackingPointStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackedPoint *TrackPoint `protobuf:"bytes,1,opt,name=tracked_point,json=trackedPoint,proto3" json:"tracked_point,omitempty"` // The tracked point
}

func (x *SetTrackingPointStatusRequest) Reset() {
	*x = SetTrackingPointStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrackingPointStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrackingPointStatusRequest) ProtoMessage() {}

func (x *SetTrackingPointStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrackingPointStatusRequest.ProtoReflect.Descriptor instead.
func (*SetTrackingPointStatusRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{70}
}

func (x *SetTrackingPointStatusRequest) GetTrackedPoint() *TrackPoint {
	if x != nil {
		return x.TrackedPoint
	}
	return nil
}

type SetTrackingPointStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTrackingPointStatusResponse) Reset() {
	*x = SetTrackingPointStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrackingPointStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrackingPointStatusResponse) ProtoMessage() {}

func (x *SetTrackingPointStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrackingPointStatusResponse.ProtoReflect.Descriptor instead.
func (*SetTrackingPointStatusResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{71}
}

type SetTrackingRectangleStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackedRectangle *TrackRectangle `protobuf:"bytes,1,opt,name=tracked_rectangle,json=trackedRectangle,proto3" json:"tracked_rectangle,omitempty"` // The tracked rectangle
}

func (x *SetTrackingRectangleStatusRequest) Reset() {
	*x = SetTrackingRectangleStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrackingRectangleStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrackingRectangleStatusRequest) ProtoMessage() {}

func (x *SetTrackingRectangleStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrackingRectangleStatusRequest.ProtoReflect.Descriptor instead.
func (*SetTrackingRectangleStatusRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{72}
}

func (x *SetTrackingRectangleStatusRequest) GetTrackedRectangle() *TrackRectangle {
	if x != nil {
		return x.TrackedRectangle
	}
	return nil
}

type SetTrackingRectangleStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTrackingRectangleStatusResponse) Reset() {
	*x = SetTrackingRectangleStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrackingRectangleStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrackingRectangleStatusResponse) ProtoMessage() {}

func (x *SetTrackingRectangleStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrackingRectangleStatusResponse.ProtoReflect.Descriptor instead.
func (*SetTrackingRectangleStatusResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{73}
}

type SetTrackingOffStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTrackingOffStatusRequest) Reset() {
	*x = SetTrackingOffStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrackingOffStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrackingOffStatusRequest) ProtoMessage() {}

func (x *SetTrackingOffStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrackingOffStatusRequest.ProtoReflect.Descriptor instead.
func (*SetTrackingOffStatusRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{74}
}

type SetTrackingOffStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTrackingOffStatusResponse) Reset() {
	*x = SetTrackingOffStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTrackingOffStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTrackingOffStatusResponse) ProtoMessage() {}

func (x *SetTrackingOffStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTrackingOffStatusResponse.ProtoReflect.Descriptor instead.
func (*SetTrackingOffStatusResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{75}
}

type SubscribeTrackingPointCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTrackingPointCommandRequest) Reset() {
	*x = SubscribeTrackingPointCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTrackingPointCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTrackingPointCommandRequest) ProtoMessage() {}

func (x *SubscribeTrackingPointCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTrackingPointCommandRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTrackingPointCommandRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{76}
}

type TrackingPointCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackPoint *TrackPoint `protobuf:"bytes,1,opt,name=track_point,json=trackPoint,proto3" json:"track_point,omitempty"` // The point to track if a point is to be tracked
}

func (x *TrackingPointCommandResponse) Reset() {
	*x = TrackingPointCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackingPointCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingPointCommandResponse) ProtoMessage() {}

func (x *TrackingPointCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingPointCommandResponse.ProtoReflect.Descriptor instead.
func (*TrackingPointCommandResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{77}
}

func (x *TrackingPointCommandResponse) GetTrackPoint() *TrackPoint {
	if x != nil {
		return x.TrackPoint
	}
	return nil
}

type SubscribeTrackingRectangleCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTrackingRectangleCommandRequest) Reset() {
	*x = SubscribeTrackingRectangleCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTrackingRectangleCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTrackingRectangleCommandRequest) ProtoMessage() {}

func (x *SubscribeTrackingRectangleCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTrackingRectangleCommandRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTrackingRectangleCommandRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{78}
}

type TrackingRectangleCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackRectangle *TrackRectangle `protobuf:"bytes,1,opt,name=track_rectangle,json=trackRectangle,proto3" json:"track_rectangle,omitempty"` // The point to track if a point is to be tracked
}

func (x *TrackingRectangleCommandResponse) Reset() {
	*x = TrackingRectangleCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackingRectangleCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingRectangleCommandResponse) ProtoMessage() {}

func (x *TrackingRectangleCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingRectangleCommandResponse.ProtoReflect.Descriptor instead.
func (*TrackingRectangleCommandResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{79}
}

func (x *TrackingRectangleCommandResponse) GetTrackRectangle() *TrackRectangle {
	if x != nil {
		return x.TrackRectangle
	}
	return nil
}

type SubscribeTrackingOffCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTrackingOffCommandRequest) Reset() {
	*x = SubscribeTrackingOffCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTrackingOffCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTrackingOffCommandRequest) ProtoMessage() {}

func (x *SubscribeTrackingOffCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTrackingOffCommandRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTrackingOffCommandRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{80}
}

type TrackingOffCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy int32 `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"` // Unused
}

func (x *TrackingOffCommandResponse) Reset() {
	*x = TrackingOffCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackingOffCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingOffCommandResponse) ProtoMessage() {}

func (x *TrackingOffCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingOffCommandResponse.ProtoReflect.Descriptor instead.
func (*TrackingOffCommandResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{81}
}

func (x *TrackingOffCommandResponse) GetDummy() int32 {
	if x != nil {
		return x.Dummy
	}
	return 0
}

type RespondTrackingPointCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopVideoFeedback CameraFeedback `protobuf:"varint,1,opt,name=stop_video_feedback,json=stopVideoFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"stop_video_feedback,omitempty"` // the feedback
}

func (x *RespondTrackingPointCommandRequest) Reset() {
	*x = RespondTrackingPointCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondTrackingPointCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondTrackingPointCommandRequest) ProtoMessage() {}

func (x *RespondTrackingPointCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondTrackingPointCommandRequest.ProtoReflect.Descriptor instead.
func (*RespondTrackingPointCommandRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{82}
}

func (x *RespondTrackingPointCommandRequest) GetStopVideoFeedback() CameraFeedback {
	if x != nil {
		return x.StopVideoFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondTrackingPointCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"` // The result of sending the response.
}

func (x *RespondTrackingPointCommandResponse) Reset() {
	*x = RespondTrackingPointCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondTrackingPointCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondTrackingPointCommandResponse) ProtoMessage() {}

func (x *RespondTrackingPointCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondTrackingPointCommandResponse.ProtoReflect.Descriptor instead.
func (*RespondTrackingPointCommandResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{83}
}

func (x *RespondTrackingPointCommandResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type RespondTrackingRectangleCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopVideoFeedback CameraFeedback `protobuf:"varint,1,opt,name=stop_video_feedback,json=stopVideoFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"stop_video_feedback,omitempty"` // the feedback
}

func (x *RespondTrackingRectangleCommandRequest) Reset() {
	*x = RespondTrackingRectangleCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondTrackingRectangleCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondTrackingRectangleCommandRequest) ProtoMessage() {}

func (x *RespondTrackingRectangleCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondTrackingRectangleCommandRequest.ProtoReflect.Descriptor instead.
func (*RespondTrackingRectangleCommandRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{84}
}

func (x *RespondTrackingRectangleCommandRequest) GetStopVideoFeedback() CameraFeedback {
	if x != nil {
		return x.StopVideoFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondTrackingRectangleCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"` // The result of sending the response.
}

func (x *RespondTrackingRectangleCommandResponse) Reset() {
	*x = RespondTrackingRectangleCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondTrackingRectangleCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondTrackingRectangleCommandResponse) ProtoMessage() {}

func (x *RespondTrackingRectangleCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondTrackingRectangleCommandResponse.ProtoReflect.Descriptor instead.
func (*RespondTrackingRectangleCommandResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{85}
}

func (x *RespondTrackingRectangleCommandResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

type RespondTrackingOffCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopVideoFeedback CameraFeedback `protobuf:"varint,1,opt,name=stop_video_feedback,json=stopVideoFeedback,proto3,enum=mavsdk.rpc.camera_server.CameraFeedback" json:"stop_video_feedback,omitempty"` // the feedback
}

func (x *RespondTrackingOffCommandRequest) Reset() {
	*x = RespondTrackingOffCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondTrackingOffCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondTrackingOffCommandRequest) ProtoMessage() {}

func (x *RespondTrackingOffCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondTrackingOffCommandRequest.ProtoReflect.Descriptor instead.
func (*RespondTrackingOffCommandRequest) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{86}
}

func (x *RespondTrackingOffCommandRequest) GetStopVideoFeedback() CameraFeedback {
	if x != nil {
		return x.StopVideoFeedback
	}
	return CameraFeedback_CAMERA_FEEDBACK_UNKNOWN
}

type RespondTrackingOffCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraServerResult *CameraServerResult `protobuf:"bytes,1,opt,name=camera_server_result,json=cameraServerResult,proto3" json:"camera_server_result,omitempty"` // The result of sending the response.
}

func (x *RespondTrackingOffCommandResponse) Reset() {
	*x = RespondTrackingOffCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondTrackingOffCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondTrackingOffCommandResponse) ProtoMessage() {}

func (x *RespondTrackingOffCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondTrackingOffCommandResponse.ProtoReflect.Descriptor instead.
func (*RespondTrackingOffCommandResponse) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{87}
}

func (x *RespondTrackingOffCommandResponse) GetCameraServerResult() *CameraServerResult {
	if x != nil {
		return x.CameraServerResult
	}
	return nil
}

// Point description type
type TrackPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointX float32 `protobuf:"fixed32,1,opt,name=point_x,json=pointX,proto3" json:"point_x,omitempty"` // Point to track x value (normalized 0..1, 0 is left, 1 is right).
	PointY float32 `protobuf:"fixed32,2,opt,name=point_y,json=pointY,proto3" json:"point_y,omitempty"` // Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
	Radius float32 `protobuf:"fixed32,3,opt,name=radius,proto3" json:"radius,omitempty"`               // Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
}

func (x *TrackPoint) Reset() {
	*x = TrackPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPoint) ProtoMessage() {}

func (x *TrackPoint) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPoint.ProtoReflect.Descriptor instead.
func (*TrackPoint) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{88}
}

func (x *TrackPoint) GetPointX() float32 {
	if x != nil {
		return x.PointX
	}
	return 0
}

func (x *TrackPoint) GetPointY() float32 {
	if x != nil {
		return x.PointY
	}
	return 0
}

func (x *TrackPoint) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// Rectangle description type
type TrackRectangle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeftCornerX     float32 `protobuf:"fixed32,1,opt,name=top_left_corner_x,json=topLeftCornerX,proto3" json:"top_left_corner_x,omitempty"`             // Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
	TopLeftCornerY     float32 `protobuf:"fixed32,2,opt,name=top_left_corner_y,json=topLeftCornerY,proto3" json:"top_left_corner_y,omitempty"`             // Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
	BottomRightCornerX float32 `protobuf:"fixed32,3,opt,name=bottom_right_corner_x,json=bottomRightCornerX,proto3" json:"bottom_right_corner_x,omitempty"` // Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
	BottomRightCornerY float32 `protobuf:"fixed32,4,opt,name=bottom_right_corner_y,json=bottomRightCornerY,proto3" json:"bottom_right_corner_y,omitempty"` // Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
}

func (x *TrackRectangle) Reset() {
	*x = TrackRectangle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_server_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackRectangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRectangle) ProtoMessage() {}

func (x *TrackRectangle) ProtoReflect() protoreflect.Message {
	mi := &file_camera_server_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRectangle.ProtoReflect.Descriptor instead.
func (*TrackRectangle) Descriptor() ([]byte, []int) {
	return file_camera_server_proto_rawDescGZIP(), []int{89}
}

func (x *TrackRectangle) GetTopLeftCornerX() float32 {
	if x != nil {
		return x.TopLeftCornerX
	}
	return 0
}

func (x *TrackRectangle) GetTopLeftCornerY() float32 {
	if x != nil {
		return x.TopLeftCornerY
	}
	return 0
}

func (x *TrackRectangle) GetBottomRightCornerX() float32 {
	if x != nil {
		return x.BottomRightCornerX
	}
	return 0
}

func (x *TrackRectangle) GetBottomRightCornerY() float32 {
	if x != nil {
		return x.BottomRightCornerY
	}
	return 0
}

var File_camera_server_proto protoreflect.FileDescriptor

var file_camera_server_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x14, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x6d, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x22, 0x7b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x37, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x1b, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x6b, 0x65,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x11,
	0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a,
	0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x31, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x7b, 0x0a, 0x19,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x7a, 0x0a,
	0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3a, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6d, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x22, 0x84, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39,
	0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x20, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b,
	0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x1a, 0x73, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x83, 0x01, 0x0a, 0x21,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x11,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x22, 0x78, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x0a, 0x22,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3b, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0xed, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x1a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x5d, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x83, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x1b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x17, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x15, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4e, 0x0a,
	0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7e, 0x0a,
	0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a,
	0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x36,
	0x0a, 0x15, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x7e, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x7f, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x17,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x7e,
	0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1d,
	0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a,
	0x13, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x22, 0x7a, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a,
	0x16, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x13, 0x7a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x7c, 0x0a, 0x1a,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x14, 0x5a, 0x6f,
	0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x7d,
	0x0a, 0x1a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x17,
	0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x14, 0x7a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x7d, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1a, 0x0a, 0x18,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x10, 0x5a, 0x6f, 0x6f, 0x6d,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x10, 0x7a, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x6f, 0x70, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x79, 0x0a, 0x17, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x73, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x7a, 0x6f,
	0x6f, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x11, 0x7a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x22, 0x7a, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a,
	0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x83, 0x04, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x66,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x4d, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x6d, 0x12, 0x35,
	0x0a, 0x17, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x4d, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x78, 0x12,
	0x34, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x22, 0x53, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f,
	0x72, 0x74, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x52, 0x74, 0x73, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x74, 0x73, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x74, 0x73, 0x70, 0x55, 0x72, 0x69, 0x22, 0xb2, 0x01, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4d,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4d,
	0x22, 0x44, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x94, 0x02, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51,
	0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x74, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x55, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xc6, 0x02,
	0x0a, 0x12, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72,
	0x22, 0xc3, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x08, 0x22, 0x88, 0x06, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x62, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x62, 0x12, 0x61, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x62, 0x5f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x69, 0x62, 0x53, 0x12,
	0x29, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x6d,
	0x69, 0x62, 0x5f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4d, 0x69, 0x62, 0x53, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa0,
	0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x42, 0x5f, 0x53, 0x54, 0x49,
	0x43, 0x4b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53,
	0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x44, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xfe,
	0x01, 0x22, 0xca, 0x04, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x69,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x62, 0x12, 0x56, 0x0a,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91,
	0x01, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x03, 0x22, 0x4a, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x22, 0x6a,
	0x0a, 0x1d, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x21,
	0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63,
	0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x0a, 0x1b, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1e, 0x0a,
	0x1c, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a,
	0x24, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x28,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22,
	0x24, 0x0a, 0x22, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x22, 0x7e, 0x0a, 0x22, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x58, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x85, 0x01, 0x0a, 0x23, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x7c, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x11, 0x73,
	0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x22, 0x83, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x12, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x56, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x58, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x59, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0xcc,
	0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x6f,
	0x70, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x58, 0x12, 0x29, 0x0a, 0x11,
	0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74,
	0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x59, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x58, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65,
	0x72, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x59, 0x2a, 0x7b, 0x0a,
	0x0e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x46,
	0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x38, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f,
	0x54, 0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x02, 0x32, 0xb8, 0x2b, 0x0a, 0x13, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x76, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x12, 0x7e, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5,
	0x18, 0x00, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x61,
	0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x34, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x32, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x7e,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x7f,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x31, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12,
	0x9c, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x3d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x9d,
	0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x99,
	0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3c,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x78, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30,
	0x01, 0x12, 0x79, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x99, 0x01, 0x0a,
	0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00,
	0x30, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x12, 0x8a, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x37, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x8b, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x35, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x16,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x35, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x35, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x85, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x36, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12,
	0x88, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x7b, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x32, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x5a,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x30, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x7e, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80,
	0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5a,
	0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x9d, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x12, 0x9f, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04,
	0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0xab, 0x01, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x42, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5,
	0x18, 0x00, 0x30, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01,
	0x12, 0xa0, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x3c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x40, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x3a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x42,
	0x24, 0x42, 0x11, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0f, 0x2e, 0x3b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_camera_server_proto_rawDescOnce sync.Once
	file_camera_server_proto_rawDescData = file_camera_server_proto_rawDesc
)

func file_camera_server_proto_rawDescGZIP() []byte {
	file_camera_server_proto_rawDescOnce.Do(func() {
		file_camera_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_camera_server_proto_rawDescData)
	})
	return file_camera_server_proto_rawDescData
}

var file_camera_server_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_camera_server_proto_msgTypes = make([]protoimpl.MessageInfo, 90)
var file_camera_server_proto_goTypes = []any{
	(CameraFeedback)(0),                              // 0: mavsdk.rpc.camera_server.CameraFeedback
	(Mode)(0),                                        // 1: mavsdk.rpc.camera_server.Mode
	(CameraServerResult_Result)(0),                   // 2: mavsdk.rpc.camera_server.CameraServerResult.Result
	(StorageInformation_StorageStatus)(0),            // 3: mavsdk.rpc.camera_server.StorageInformation.StorageStatus
	(StorageInformation_StorageType)(0),              // 4: mavsdk.rpc.camera_server.StorageInformation.StorageType
	(CaptureStatus_ImageStatus)(0),                   // 5: mavsdk.rpc.camera_server.CaptureStatus.ImageStatus
	(CaptureStatus_VideoStatus)(0),                   // 6: mavsdk.rpc.camera_server.CaptureStatus.VideoStatus
	(*SetInformationRequest)(nil),                    // 7: mavsdk.rpc.camera_server.SetInformationRequest
	(*SetInformationResponse)(nil),                   // 8: mavsdk.rpc.camera_server.SetInformationResponse
	(*SetVideoStreamingRequest)(nil),                 // 9: mavsdk.rpc.camera_server.SetVideoStreamingRequest
	(*SetVideoStreamingResponse)(nil),                // 10: mavsdk.rpc.camera_server.SetVideoStreamingResponse
	(*SetInProgressRequest)(nil),                     // 11: mavsdk.rpc.camera_server.SetInProgressRequest
	(*SetInProgressResponse)(nil),                    // 12: mavsdk.rpc.camera_server.SetInProgressResponse
	(*SubscribeTakePhotoRequest)(nil),                // 13: mavsdk.rpc.camera_server.SubscribeTakePhotoRequest
	(*TakePhotoResponse)(nil),                        // 14: mavsdk.rpc.camera_server.TakePhotoResponse
	(*RespondTakePhotoRequest)(nil),                  // 15: mavsdk.rpc.camera_server.RespondTakePhotoRequest
	(*RespondTakePhotoResponse)(nil),                 // 16: mavsdk.rpc.camera_server.RespondTakePhotoResponse
	(*SubscribeStartVideoRequest)(nil),               // 17: mavsdk.rpc.camera_server.SubscribeStartVideoRequest
	(*StartVideoResponse)(nil),                       // 18: mavsdk.rpc.camera_server.StartVideoResponse
	(*RespondStartVideoRequest)(nil),                 // 19: mavsdk.rpc.camera_server.RespondStartVideoRequest
	(*RespondStartVideoResponse)(nil),                // 20: mavsdk.rpc.camera_server.RespondStartVideoResponse
	(*SubscribeStopVideoRequest)(nil),                // 21: mavsdk.rpc.camera_server.SubscribeStopVideoRequest
	(*StopVideoResponse)(nil),                        // 22: mavsdk.rpc.camera_server.StopVideoResponse
	(*RespondStopVideoRequest)(nil),                  // 23: mavsdk.rpc.camera_server.RespondStopVideoRequest
	(*RespondStopVideoResponse)(nil),                 // 24: mavsdk.rpc.camera_server.RespondStopVideoResponse
	(*SubscribeStartVideoStreamingRequest)(nil),      // 25: mavsdk.rpc.camera_server.SubscribeStartVideoStreamingRequest
	(*StartVideoStreamingResponse)(nil),              // 26: mavsdk.rpc.camera_server.StartVideoStreamingResponse
	(*RespondStartVideoStreamingRequest)(nil),        // 27: mavsdk.rpc.camera_server.RespondStartVideoStreamingRequest
	(*RespondStartVideoStreamingResponse)(nil),       // 28: mavsdk.rpc.camera_server.RespondStartVideoStreamingResponse
	(*SubscribeStopVideoStreamingRequest)(nil),       // 29: mavsdk.rpc.camera_server.SubscribeStopVideoStreamingRequest
	(*StopVideoStreamingResponse)(nil),               // 30: mavsdk.rpc.camera_server.StopVideoStreamingResponse
	(*RespondStopVideoStreamingRequest)(nil),         // 31: mavsdk.rpc.camera_server.RespondStopVideoStreamingRequest
	(*RespondStopVideoStreamingResponse)(nil),        // 32: mavsdk.rpc.camera_server.RespondStopVideoStreamingResponse
	(*SubscribeSetModeRequest)(nil),                  // 33: mavsdk.rpc.camera_server.SubscribeSetModeRequest
	(*SetModeResponse)(nil),                          // 34: mavsdk.rpc.camera_server.SetModeResponse
	(*RespondSetModeRequest)(nil),                    // 35: mavsdk.rpc.camera_server.RespondSetModeRequest
	(*RespondSetModeResponse)(nil),                   // 36: mavsdk.rpc.camera_server.RespondSetModeResponse
	(*SubscribeStorageInformationRequest)(nil),       // 37: mavsdk.rpc.camera_server.SubscribeStorageInformationRequest
	(*StorageInformationResponse)(nil),               // 38: mavsdk.rpc.camera_server.StorageInformationResponse
	(*RespondStorageInformationRequest)(nil),         // 39: mavsdk.rpc.camera_server.RespondStorageInformationRequest
	(*RespondStorageInformationResponse)(nil),        // 40: mavsdk.rpc.camera_server.RespondStorageInformationResponse
	(*SubscribeCaptureStatusRequest)(nil),            // 41: mavsdk.rpc.camera_server.SubscribeCaptureStatusRequest
	(*CaptureStatusResponse)(nil),                    // 42: mavsdk.rpc.camera_server.CaptureStatusResponse
	(*RespondCaptureStatusRequest)(nil),              // 43: mavsdk.rpc.camera_server.RespondCaptureStatusRequest
	(*RespondCaptureStatusResponse)(nil),             // 44: mavsdk.rpc.camera_server.RespondCaptureStatusResponse
	(*SubscribeFormatStorageRequest)(nil),            // 45: mavsdk.rpc.camera_server.SubscribeFormatStorageRequest
	(*FormatStorageResponse)(nil),                    // 46: mavsdk.rpc.camera_server.FormatStorageResponse
	(*RespondFormatStorageRequest)(nil),              // 47: mavsdk.rpc.camera_server.RespondFormatStorageRequest
	(*RespondFormatStorageResponse)(nil),             // 48: mavsdk.rpc.camera_server.RespondFormatStorageResponse
	(*SubscribeResetSettingsRequest)(nil),            // 49: mavsdk.rpc.camera_server.SubscribeResetSettingsRequest
	(*ResetSettingsResponse)(nil),                    // 50: mavsdk.rpc.camera_server.ResetSettingsResponse
	(*RespondResetSettingsRequest)(nil),              // 51: mavsdk.rpc.camera_server.RespondResetSettingsRequest
	(*RespondResetSettingsResponse)(nil),             // 52: mavsdk.rpc.camera_server.RespondResetSettingsResponse
	(*SubscribeZoomInStartRequest)(nil),              // 53: mavsdk.rpc.camera_server.SubscribeZoomInStartRequest
	(*ZoomInStartResponse)(nil),                      // 54: mavsdk.rpc.camera_server.ZoomInStartResponse
	(*RespondZoomInStartRequest)(nil),                // 55: mavsdk.rpc.camera_server.RespondZoomInStartRequest
	(*RespondZoomInStartResponse)(nil),               // 56: mavsdk.rpc.camera_server.RespondZoomInStartResponse
	(*SubscribeZoomOutStartRequest)(nil),             // 57: mavsdk.rpc.camera_server.SubscribeZoomOutStartRequest
	(*ZoomOutStartResponse)(nil),                     // 58: mavsdk.rpc.camera_server.ZoomOutStartResponse
	(*RespondZoomOutStartRequest)(nil),               // 59: mavsdk.rpc.camera_server.RespondZoomOutStartRequest
	(*RespondZoomOutStartResponse)(nil),              // 60: mavsdk.rpc.camera_server.RespondZoomOutStartResponse
	(*SubscribeZoomStopRequest)(nil),                 // 61: mavsdk.rpc.camera_server.SubscribeZoomStopRequest
	(*ZoomStopResponse)(nil),                         // 62: mavsdk.rpc.camera_server.ZoomStopResponse
	(*RespondZoomStopRequest)(nil),                   // 63: mavsdk.rpc.camera_server.RespondZoomStopRequest
	(*RespondZoomStopResponse)(nil),                  // 64: mavsdk.rpc.camera_server.RespondZoomStopResponse
	(*SubscribeZoomRangeRequest)(nil),                // 65: mavsdk.rpc.camera_server.SubscribeZoomRangeRequest
	(*ZoomRangeResponse)(nil),                        // 66: mavsdk.rpc.camera_server.ZoomRangeResponse
	(*RespondZoomRangeRequest)(nil),                  // 67: mavsdk.rpc.camera_server.RespondZoomRangeRequest
	(*RespondZoomRangeResponse)(nil),                 // 68: mavsdk.rpc.camera_server.RespondZoomRangeResponse
	(*Information)(nil),                              // 69: mavsdk.rpc.camera_server.Information
	(*VideoStreaming)(nil),                           // 70: mavsdk.rpc.camera_server.VideoStreaming
	(*Position)(nil),                                 // 71: mavsdk.rpc.camera_server.Position
	(*Quaternion)(nil),                               // 72: mavsdk.rpc.camera_server.Quaternion
	(*CaptureInfo)(nil),                              // 73: mavsdk.rpc.camera_server.CaptureInfo
	(*CameraServerResult)(nil),                       // 74: mavsdk.rpc.camera_server.CameraServerResult
	(*StorageInformation)(nil),                       // 75: mavsdk.rpc.camera_server.StorageInformation
	(*CaptureStatus)(nil),                            // 76: mavsdk.rpc.camera_server.CaptureStatus
	(*SetTrackingPointStatusRequest)(nil),            // 77: mavsdk.rpc.camera_server.SetTrackingPointStatusRequest
	(*SetTrackingPointStatusResponse)(nil),           // 78: mavsdk.rpc.camera_server.SetTrackingPointStatusResponse
	(*SetTrackingRectangleStatusRequest)(nil),        // 79: mavsdk.rpc.camera_server.SetTrackingRectangleStatusRequest
	(*SetTrackingRectangleStatusResponse)(nil),       // 80: mavsdk.rpc.camera_server.SetTrackingRectangleStatusResponse
	(*SetTrackingOffStatusRequest)(nil),              // 81: mavsdk.rpc.camera_server.SetTrackingOffStatusRequest
	(*SetTrackingOffStatusResponse)(nil),             // 82: mavsdk.rpc.camera_server.SetTrackingOffStatusResponse
	(*SubscribeTrackingPointCommandRequest)(nil),     // 83: mavsdk.rpc.camera_server.SubscribeTrackingPointCommandRequest
	(*TrackingPointCommandResponse)(nil),             // 84: mavsdk.rpc.camera_server.TrackingPointCommandResponse
	(*SubscribeTrackingRectangleCommandRequest)(nil), // 85: mavsdk.rpc.camera_server.SubscribeTrackingRectangleCommandRequest
	(*TrackingRectangleCommandResponse)(nil),         // 86: mavsdk.rpc.camera_server.TrackingRectangleCommandResponse
	(*SubscribeTrackingOffCommandRequest)(nil),       // 87: mavsdk.rpc.camera_server.SubscribeTrackingOffCommandRequest
	(*TrackingOffCommandResponse)(nil),               // 88: mavsdk.rpc.camera_server.TrackingOffCommandResponse
	(*RespondTrackingPointCommandRequest)(nil),       // 89: mavsdk.rpc.camera_server.RespondTrackingPointCommandRequest
	(*RespondTrackingPointCommandResponse)(nil),      // 90: mavsdk.rpc.camera_server.RespondTrackingPointCommandResponse
	(*RespondTrackingRectangleCommandRequest)(nil),   // 91: mavsdk.rpc.camera_server.RespondTrackingRectangleCommandRequest
	(*RespondTrackingRectangleCommandResponse)(nil),  // 92: mavsdk.rpc.camera_server.RespondTrackingRectangleCommandResponse
	(*RespondTrackingOffCommandRequest)(nil),         // 93: mavsdk.rpc.camera_server.RespondTrackingOffCommandRequest
	(*RespondTrackingOffCommandResponse)(nil),        // 94: mavsdk.rpc.camera_server.RespondTrackingOffCommandResponse
	(*TrackPoint)(nil),                               // 95: mavsdk.rpc.camera_server.TrackPoint
	(*TrackRectangle)(nil),                           // 96: mavsdk.rpc.camera_server.TrackRectangle
}
var file_camera_server_proto_depIdxs = []int32{
	69, // 0: mavsdk.rpc.camera_server.SetInformationRequest.information:type_name -> mavsdk.rpc.camera_server.Information
	74, // 1: mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	70, // 2: mavsdk.rpc.camera_server.SetVideoStreamingRequest.video_streaming:type_name -> mavsdk.rpc.camera_server.VideoStreaming
	74, // 3: mavsdk.rpc.camera_server.SetVideoStreamingResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	74, // 4: mavsdk.rpc.camera_server.SetInProgressResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 5: mavsdk.rpc.camera_server.RespondTakePhotoRequest.take_photo_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	73, // 6: mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info:type_name -> mavsdk.rpc.camera_server.CaptureInfo
	74, // 7: mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 8: mavsdk.rpc.camera_server.RespondStartVideoRequest.start_video_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 9: mavsdk.rpc.camera_server.RespondStartVideoResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 10: mavsdk.rpc.camera_server.RespondStopVideoRequest.stop_video_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 11: mavsdk.rpc.camera_server.RespondStopVideoResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 12: mavsdk.rpc.camera_server.RespondStartVideoStreamingRequest.start_video_streaming_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 13: mavsdk.rpc.camera_server.RespondStartVideoStreamingResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 14: mavsdk.rpc.camera_server.RespondStopVideoStreamingRequest.stop_video_streaming_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 15: mavsdk.rpc.camera_server.RespondStopVideoStreamingResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	1,  // 16: mavsdk.rpc.camera_server.SetModeResponse.mode:type_name -> mavsdk.rpc.camera_server.Mode
	0,  // 17: mavsdk.rpc.camera_server.RespondSetModeRequest.set_mode_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 18: mavsdk.rpc.camera_server.RespondSetModeResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 19: mavsdk.rpc.camera_server.RespondStorageInformationRequest.storage_information_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	75, // 20: mavsdk.rpc.camera_server.RespondStorageInformationRequest.storage_information:type_name -> mavsdk.rpc.camera_server.StorageInformation
	74, // 21: mavsdk.rpc.camera_server.RespondStorageInformationResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 22: mavsdk.rpc.camera_server.RespondCaptureStatusRequest.capture_status_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	76, // 23: mavsdk.rpc.camera_server.RespondCaptureStatusRequest.capture_status:type_name -> mavsdk.rpc.camera_server.CaptureStatus
	74, // 24: mavsdk.rpc.camera_server.RespondCaptureStatusResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 25: mavsdk.rpc.camera_server.RespondFormatStorageRequest.format_storage_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 26: mavsdk.rpc.camera_server.RespondFormatStorageResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 27: mavsdk.rpc.camera_server.RespondResetSettingsRequest.reset_settings_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 28: mavsdk.rpc.camera_server.RespondResetSettingsResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 29: mavsdk.rpc.camera_server.RespondZoomInStartRequest.zoom_in_start_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 30: mavsdk.rpc.camera_server.RespondZoomInStartResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 31: mavsdk.rpc.camera_server.RespondZoomOutStartRequest.zoom_out_start_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 32: mavsdk.rpc.camera_server.RespondZoomOutStartResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 33: mavsdk.rpc.camera_server.RespondZoomStopRequest.zoom_stop_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 34: mavsdk.rpc.camera_server.RespondZoomStopResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 35: mavsdk.rpc.camera_server.RespondZoomRangeRequest.zoom_range_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 36: mavsdk.rpc.camera_server.RespondZoomRangeResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	71, // 37: mavsdk.rpc.camera_server.CaptureInfo.position:type_name -> mavsdk.rpc.camera_server.Position
	72, // 38: mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion:type_name -> mavsdk.rpc.camera_server.Quaternion
	2,  // 39: mavsdk.rpc.camera_server.CameraServerResult.result:type_name -> mavsdk.rpc.camera_server.CameraServerResult.Result
	3,  // 40: mavsdk.rpc.camera_server.StorageInformation.storage_status:type_name -> mavsdk.rpc.camera_server.StorageInformation.StorageStatus
	4,  // 41: mavsdk.rpc.camera_server.StorageInformation.storage_type:type_name -> mavsdk.rpc.camera_server.StorageInformation.StorageType
	5,  // 42: mavsdk.rpc.camera_server.CaptureStatus.image_status:type_name -> mavsdk.rpc.camera_server.CaptureStatus.ImageStatus
	6,  // 43: mavsdk.rpc.camera_server.CaptureStatus.video_status:type_name -> mavsdk.rpc.camera_server.CaptureStatus.VideoStatus
	95, // 44: mavsdk.rpc.camera_server.SetTrackingPointStatusRequest.tracked_point:type_name -> mavsdk.rpc.camera_server.TrackPoint
	96, // 45: mavsdk.rpc.camera_server.SetTrackingRectangleStatusRequest.tracked_rectangle:type_name -> mavsdk.rpc.camera_server.TrackRectangle
	95, // 46: mavsdk.rpc.camera_server.TrackingPointCommandResponse.track_point:type_name -> mavsdk.rpc.camera_server.TrackPoint
	96, // 47: mavsdk.rpc.camera_server.TrackingRectangleCommandResponse.track_rectangle:type_name -> mavsdk.rpc.camera_server.TrackRectangle
	0,  // 48: mavsdk.rpc.camera_server.RespondTrackingPointCommandRequest.stop_video_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 49: mavsdk.rpc.camera_server.RespondTrackingPointCommandResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 50: mavsdk.rpc.camera_server.RespondTrackingRectangleCommandRequest.stop_video_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 51: mavsdk.rpc.camera_server.RespondTrackingRectangleCommandResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	0,  // 52: mavsdk.rpc.camera_server.RespondTrackingOffCommandRequest.stop_video_feedback:type_name -> mavsdk.rpc.camera_server.CameraFeedback
	74, // 53: mavsdk.rpc.camera_server.RespondTrackingOffCommandResponse.camera_server_result:type_name -> mavsdk.rpc.camera_server.CameraServerResult
	7,  // 54: mavsdk.rpc.camera_server.CameraServerService.SetInformation:input_type -> mavsdk.rpc.camera_server.SetInformationRequest
	9,  // 55: mavsdk.rpc.camera_server.CameraServerService.SetVideoStreaming:input_type -> mavsdk.rpc.camera_server.SetVideoStreamingRequest
	11, // 56: mavsdk.rpc.camera_server.CameraServerService.SetInProgress:input_type -> mavsdk.rpc.camera_server.SetInProgressRequest
	13, // 57: mavsdk.rpc.camera_server.CameraServerService.SubscribeTakePhoto:input_type -> mavsdk.rpc.camera_server.SubscribeTakePhotoRequest
	15, // 58: mavsdk.rpc.camera_server.CameraServerService.RespondTakePhoto:input_type -> mavsdk.rpc.camera_server.RespondTakePhotoRequest
	17, // 59: mavsdk.rpc.camera_server.CameraServerService.SubscribeStartVideo:input_type -> mavsdk.rpc.camera_server.SubscribeStartVideoRequest
	19, // 60: mavsdk.rpc.camera_server.CameraServerService.RespondStartVideo:input_type -> mavsdk.rpc.camera_server.RespondStartVideoRequest
	21, // 61: mavsdk.rpc.camera_server.CameraServerService.SubscribeStopVideo:input_type -> mavsdk.rpc.camera_server.SubscribeStopVideoRequest
	23, // 62: mavsdk.rpc.camera_server.CameraServerService.RespondStopVideo:input_type -> mavsdk.rpc.camera_server.RespondStopVideoRequest
	25, // 63: mavsdk.rpc.camera_server.CameraServerService.SubscribeStartVideoStreaming:input_type -> mavsdk.rpc.camera_server.SubscribeStartVideoStreamingRequest
	27, // 64: mavsdk.rpc.camera_server.CameraServerService.RespondStartVideoStreaming:input_type -> mavsdk.rpc.camera_server.RespondStartVideoStreamingRequest
	29, // 65: mavsdk.rpc.camera_server.CameraServerService.SubscribeStopVideoStreaming:input_type -> mavsdk.rpc.camera_server.SubscribeStopVideoStreamingRequest
	31, // 66: mavsdk.rpc.camera_server.CameraServerService.RespondStopVideoStreaming:input_type -> mavsdk.rpc.camera_server.RespondStopVideoStreamingRequest
	33, // 67: mavsdk.rpc.camera_server.CameraServerService.SubscribeSetMode:input_type -> mavsdk.rpc.camera_server.SubscribeSetModeRequest
	35, // 68: mavsdk.rpc.camera_server.CameraServerService.RespondSetMode:input_type -> mavsdk.rpc.camera_server.RespondSetModeRequest
	37, // 69: mavsdk.rpc.camera_server.CameraServerService.SubscribeStorageInformation:input_type -> mavsdk.rpc.camera_server.SubscribeStorageInformationRequest
	39, // 70: mavsdk.rpc.camera_server.CameraServerService.RespondStorageInformation:input_type -> mavsdk.rpc.camera_server.RespondStorageInformationRequest
	41, // 71: mavsdk.rpc.camera_server.CameraServerService.SubscribeCaptureStatus:input_type -> mavsdk.rpc.camera_server.SubscribeCaptureStatusRequest
	43, // 72: mavsdk.rpc.camera_server.CameraServerService.RespondCaptureStatus:input_type -> mavsdk.rpc.camera_server.RespondCaptureStatusRequest
	45, // 73: mavsdk.rpc.camera_server.CameraServerService.SubscribeFormatStorage:input_type -> mavsdk.rpc.camera_server.SubscribeFormatStorageRequest
	47, // 74: mavsdk.rpc.camera_server.CameraServerService.RespondFormatStorage:input_type -> mavsdk.rpc.camera_server.RespondFormatStorageRequest
	49, // 75: mavsdk.rpc.camera_server.CameraServerService.SubscribeResetSettings:input_type -> mavsdk.rpc.camera_server.SubscribeResetSettingsRequest
	51, // 76: mavsdk.rpc.camera_server.CameraServerService.RespondResetSettings:input_type -> mavsdk.rpc.camera_server.RespondResetSettingsRequest
	53, // 77: mavsdk.rpc.camera_server.CameraServerService.SubscribeZoomInStart:input_type -> mavsdk.rpc.camera_server.SubscribeZoomInStartRequest
	55, // 78: mavsdk.rpc.camera_server.CameraServerService.RespondZoomInStart:input_type -> mavsdk.rpc.camera_server.RespondZoomInStartRequest
	57, // 79: mavsdk.rpc.camera_server.CameraServerService.SubscribeZoomOutStart:input_type -> mavsdk.rpc.camera_server.SubscribeZoomOutStartRequest
	59, // 80: mavsdk.rpc.camera_server.CameraServerService.RespondZoomOutStart:input_type -> mavsdk.rpc.camera_server.RespondZoomOutStartRequest
	61, // 81: mavsdk.rpc.camera_server.CameraServerService.SubscribeZoomStop:input_type -> mavsdk.rpc.camera_server.SubscribeZoomStopRequest
	63, // 82: mavsdk.rpc.camera_server.CameraServerService.RespondZoomStop:input_type -> mavsdk.rpc.camera_server.RespondZoomStopRequest
	65, // 83: mavsdk.rpc.camera_server.CameraServerService.SubscribeZoomRange:input_type -> mavsdk.rpc.camera_server.SubscribeZoomRangeRequest
	67, // 84: mavsdk.rpc.camera_server.CameraServerService.RespondZoomRange:input_type -> mavsdk.rpc.camera_server.RespondZoomRangeRequest
	79, // 85: mavsdk.rpc.camera_server.CameraServerService.SetTrackingRectangleStatus:input_type -> mavsdk.rpc.camera_server.SetTrackingRectangleStatusRequest
	81, // 86: mavsdk.rpc.camera_server.CameraServerService.SetTrackingOffStatus:input_type -> mavsdk.rpc.camera_server.SetTrackingOffStatusRequest
	83, // 87: mavsdk.rpc.camera_server.CameraServerService.SubscribeTrackingPointCommand:input_type -> mavsdk.rpc.camera_server.SubscribeTrackingPointCommandRequest
	85, // 88: mavsdk.rpc.camera_server.CameraServerService.SubscribeTrackingRectangleCommand:input_type -> mavsdk.rpc.camera_server.SubscribeTrackingRectangleCommandRequest
	87, // 89: mavsdk.rpc.camera_server.CameraServerService.SubscribeTrackingOffCommand:input_type -> mavsdk.rpc.camera_server.SubscribeTrackingOffCommandRequest
	89, // 90: mavsdk.rpc.camera_server.CameraServerService.RespondTrackingPointCommand:input_type -> mavsdk.rpc.camera_server.RespondTrackingPointCommandRequest
	91, // 91: mavsdk.rpc.camera_server.CameraServerService.RespondTrackingRectangleCommand:input_type -> mavsdk.rpc.camera_server.RespondTrackingRectangleCommandRequest
	93, // 92: mavsdk.rpc.camera_server.CameraServerService.RespondTrackingOffCommand:input_type -> mavsdk.rpc.camera_server.RespondTrackingOffCommandRequest
	8,  // 93: mavsdk.rpc.camera_server.CameraServerService.SetInformation:output_type -> mavsdk.rpc.camera_server.SetInformationResponse
	10, // 94: mavsdk.rpc.camera_server.CameraServerService.SetVideoStreaming:output_type -> mavsdk.rpc.camera_server.SetVideoStreamingResponse
	12, // 95: mavsdk.rpc.camera_server.CameraServerService.SetInProgress:output_type -> mavsdk.rpc.camera_server.SetInProgressResponse
	14, // 96: mavsdk.rpc.camera_server.CameraServerService.SubscribeTakePhoto:output_type -> mavsdk.rpc.camera_server.TakePhotoResponse
	16, // 97: mavsdk.rpc.camera_server.CameraServerService.RespondTakePhoto:output_type -> mavsdk.rpc.camera_server.RespondTakePhotoResponse
	18, // 98: mavsdk.rpc.camera_server.CameraServerService.SubscribeStartVideo:output_type -> mavsdk.rpc.camera_server.StartVideoResponse
	20, // 99: mavsdk.rpc.camera_server.CameraServerService.RespondStartVideo:output_type -> mavsdk.rpc.camera_server.RespondStartVideoResponse
	22, // 100: mavsdk.rpc.camera_server.CameraServerService.SubscribeStopVideo:output_type -> mavsdk.rpc.camera_server.StopVideoResponse
	24, // 101: mavsdk.rpc.camera_server.CameraServerService.RespondStopVideo:output_type -> mavsdk.rpc.camera_server.RespondStopVideoResponse
	26, // 102: mavsdk.rpc.camera_server.CameraServerService.SubscribeStartVideoStreaming:output_type -> mavsdk.rpc.camera_server.StartVideoStreamingResponse
	28, // 103: mavsdk.rpc.camera_server.CameraServerService.RespondStartVideoStreaming:output_type -> mavsdk.rpc.camera_server.RespondStartVideoStreamingResponse
	30, // 104: mavsdk.rpc.camera_server.CameraServerService.SubscribeStopVideoStreaming:output_type -> mavsdk.rpc.camera_server.StopVideoStreamingResponse
	32, // 105: mavsdk.rpc.camera_server.CameraServerService.RespondStopVideoStreaming:output_type -> mavsdk.rpc.camera_server.RespondStopVideoStreamingResponse
	34, // 106: mavsdk.rpc.camera_server.CameraServerService.SubscribeSetMode:output_type -> mavsdk.rpc.camera_server.SetModeResponse
	36, // 107: mavsdk.rpc.camera_server.CameraServerService.RespondSetMode:output_type -> mavsdk.rpc.camera_server.RespondSetModeResponse
	38, // 108: mavsdk.rpc.camera_server.CameraServerService.SubscribeStorageInformation:output_type -> mavsdk.rpc.camera_server.StorageInformationResponse
	40, // 109: mavsdk.rpc.camera_server.CameraServerService.RespondStorageInformation:output_type -> mavsdk.rpc.camera_server.RespondStorageInformationResponse
	42, // 110: mavsdk.rpc.camera_server.CameraServerService.SubscribeCaptureStatus:output_type -> mavsdk.rpc.camera_server.CaptureStatusResponse
	44, // 111: mavsdk.rpc.camera_server.CameraServerService.RespondCaptureStatus:output_type -> mavsdk.rpc.camera_server.RespondCaptureStatusResponse
	46, // 112: mavsdk.rpc.camera_server.CameraServerService.SubscribeFormatStorage:output_type -> mavsdk.rpc.camera_server.FormatStorageResponse
	48, // 113: mavsdk.rpc.camera_server.CameraServerService.RespondFormatStorage:output_type -> mavsdk.rpc.camera_server.RespondFormatStorageResponse
	50, // 114: mavsdk.rpc.camera_server.CameraServerService.SubscribeResetSettings:output_type -> mavsdk.rpc.camera_server.ResetSettingsResponse
	52, // 115: mavsdk.rpc.camera_server.CameraServerService.RespondResetSettings:output_type -> mavsdk.rpc.camera_server.RespondResetSettingsResponse
	54, // 116: mavsdk.rpc.camera_server.CameraServerService.SubscribeZoomInStart:output_type -> mavsdk.rpc.camera_server.ZoomInStartResponse
	56, // 117: mavsdk.rpc.camera_server.CameraServerService.RespondZoomInStart:output_type -> mavsdk.rpc.camera_server.RespondZoomInStartResponse
	58, // 118: mavsdk.rpc.camera_server.CameraServerService.SubscribeZoomOutStart:output_type -> mavsdk.rpc.camera_server.ZoomOutStartResponse
	60, // 119: mavsdk.rpc.camera_server.CameraServerService.RespondZoomOutStart:output_type -> mavsdk.rpc.camera_server.RespondZoomOutStartResponse
	62, // 120: mavsdk.rpc.camera_server.CameraServerService.SubscribeZoomStop:output_type -> mavsdk.rpc.camera_server.ZoomStopResponse
	64, // 121: mavsdk.rpc.camera_server.CameraServerService.RespondZoomStop:output_type -> mavsdk.rpc.camera_server.RespondZoomStopResponse
	66, // 122: mavsdk.rpc.camera_server.CameraServerService.SubscribeZoomRange:output_type -> mavsdk.rpc.camera_server.ZoomRangeResponse
	68, // 123: mavsdk.rpc.camera_server.CameraServerService.RespondZoomRange:output_type -> mavsdk.rpc.camera_server.RespondZoomRangeResponse
	80, // 124: mavsdk.rpc.camera_server.CameraServerService.SetTrackingRectangleStatus:output_type -> mavsdk.rpc.camera_server.SetTrackingRectangleStatusResponse
	82, // 125: mavsdk.rpc.camera_server.CameraServerService.SetTrackingOffStatus:output_type -> mavsdk.rpc.camera_server.SetTrackingOffStatusResponse
	84, // 126: mavsdk.rpc.camera_server.CameraServerService.SubscribeTrackingPointCommand:output_type -> mavsdk.rpc.camera_server.TrackingPointCommandResponse
	86, // 127: mavsdk.rpc.camera_server.CameraServerService.SubscribeTrackingRectangleCommand:output_type -> mavsdk.rpc.camera_server.TrackingRectangleCommandResponse
	88, // 128: mavsdk.rpc.camera_server.CameraServerService.SubscribeTrackingOffCommand:output_type -> mavsdk.rpc.camera_server.TrackingOffCommandResponse
	90, // 129: mavsdk.rpc.camera_server.CameraServerService.RespondTrackingPointCommand:output_type -> mavsdk.rpc.camera_server.RespondTrackingPointCommandResponse
	92, // 130: mavsdk.rpc.camera_server.CameraServerService.RespondTrackingRectangleCommand:output_type -> mavsdk.rpc.camera_server.RespondTrackingRectangleCommandResponse
	94, // 131: mavsdk.rpc.camera_server.CameraServerService.RespondTrackingOffCommand:output_type -> mavsdk.rpc.camera_server.RespondTrackingOffCommandResponse
	93, // [93:132] is the sub-list for method output_type
	54, // [54:93] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_camera_server_proto_init() }
func file_camera_server_proto_init() {
	if File_camera_server_proto != nil {
		return
	}
	
	if !protoimpl.UnsafeEnabled {
		file_camera_server_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SetInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SetInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SetVideoStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SetVideoStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SetInProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SetInProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTakePhotoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TakePhotoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RespondTakePhotoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RespondTakePhotoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeStartVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*StartVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStartVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStartVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeStopVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StopVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStopVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStopVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeStartVideoStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*StartVideoStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStartVideoStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStartVideoStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeStopVideoStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*StopVideoStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStopVideoStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStopVideoStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeSetModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SetModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*RespondSetModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*RespondSetModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeStorageInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*StorageInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStorageInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*RespondStorageInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeCaptureStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CaptureStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*RespondCaptureStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*RespondCaptureStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeFormatStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*FormatStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*RespondFormatStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*RespondFormatStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeResetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*ResetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*RespondResetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*RespondResetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeZoomInStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomInStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*RespondZoomInStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*RespondZoomInStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeZoomOutStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomOutStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*RespondZoomOutStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*RespondZoomOutStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeZoomStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*RespondZoomStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*RespondZoomStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeZoomRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*RespondZoomRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*RespondZoomRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*Information); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*VideoStreaming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*Quaternion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*CaptureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*CameraServerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*StorageInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*CaptureStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*SetTrackingPointStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*SetTrackingPointStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*SetTrackingRectangleStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*SetTrackingRectangleStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*SetTrackingOffStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*SetTrackingOffStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTrackingPointCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*TrackingPointCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTrackingRectangleCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*TrackingRectangleCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTrackingOffCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*TrackingOffCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*RespondTrackingPointCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*RespondTrackingPointCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*RespondTrackingRectangleCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*RespondTrackingRectangleCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*RespondTrackingOffCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*RespondTrackingOffCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*TrackPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_server_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*TrackRectangle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_camera_server_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   90,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_camera_server_proto_goTypes,
		DependencyIndexes: file_camera_server_proto_depIdxs,
		EnumInfos:         file_camera_server_proto_enumTypes,
		MessageInfos:      file_camera_server_proto_msgTypes,
	}.Build()
	File_camera_server_proto = out.File
	file_camera_server_proto_rawDesc = nil
	file_camera_server_proto_goTypes = nil
	file_camera_server_proto_depIdxs = nil
}
