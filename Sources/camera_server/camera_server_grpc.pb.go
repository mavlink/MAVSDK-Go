// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: camera_server.proto

package camera_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CameraServerService_SetInformation_FullMethodName                    = "/mavsdk.rpc.camera_server.CameraServerService/SetInformation"
	CameraServerService_SetVideoStreaming_FullMethodName                 = "/mavsdk.rpc.camera_server.CameraServerService/SetVideoStreaming"
	CameraServerService_SetInProgress_FullMethodName                     = "/mavsdk.rpc.camera_server.CameraServerService/SetInProgress"
	CameraServerService_SubscribeTakePhoto_FullMethodName                = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeTakePhoto"
	CameraServerService_RespondTakePhoto_FullMethodName                  = "/mavsdk.rpc.camera_server.CameraServerService/RespondTakePhoto"
	CameraServerService_SubscribeStartVideo_FullMethodName               = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeStartVideo"
	CameraServerService_RespondStartVideo_FullMethodName                 = "/mavsdk.rpc.camera_server.CameraServerService/RespondStartVideo"
	CameraServerService_SubscribeStopVideo_FullMethodName                = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeStopVideo"
	CameraServerService_RespondStopVideo_FullMethodName                  = "/mavsdk.rpc.camera_server.CameraServerService/RespondStopVideo"
	CameraServerService_SubscribeStartVideoStreaming_FullMethodName      = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeStartVideoStreaming"
	CameraServerService_RespondStartVideoStreaming_FullMethodName        = "/mavsdk.rpc.camera_server.CameraServerService/RespondStartVideoStreaming"
	CameraServerService_SubscribeStopVideoStreaming_FullMethodName       = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeStopVideoStreaming"
	CameraServerService_RespondStopVideoStreaming_FullMethodName         = "/mavsdk.rpc.camera_server.CameraServerService/RespondStopVideoStreaming"
	CameraServerService_SubscribeSetMode_FullMethodName                  = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeSetMode"
	CameraServerService_RespondSetMode_FullMethodName                    = "/mavsdk.rpc.camera_server.CameraServerService/RespondSetMode"
	CameraServerService_SubscribeStorageInformation_FullMethodName       = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeStorageInformation"
	CameraServerService_RespondStorageInformation_FullMethodName         = "/mavsdk.rpc.camera_server.CameraServerService/RespondStorageInformation"
	CameraServerService_SubscribeCaptureStatus_FullMethodName            = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeCaptureStatus"
	CameraServerService_RespondCaptureStatus_FullMethodName              = "/mavsdk.rpc.camera_server.CameraServerService/RespondCaptureStatus"
	CameraServerService_SubscribeFormatStorage_FullMethodName            = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeFormatStorage"
	CameraServerService_RespondFormatStorage_FullMethodName              = "/mavsdk.rpc.camera_server.CameraServerService/RespondFormatStorage"
	CameraServerService_SubscribeResetSettings_FullMethodName            = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeResetSettings"
	CameraServerService_RespondResetSettings_FullMethodName              = "/mavsdk.rpc.camera_server.CameraServerService/RespondResetSettings"
	CameraServerService_SubscribeZoomInStart_FullMethodName              = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeZoomInStart"
	CameraServerService_RespondZoomInStart_FullMethodName                = "/mavsdk.rpc.camera_server.CameraServerService/RespondZoomInStart"
	CameraServerService_SubscribeZoomOutStart_FullMethodName             = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeZoomOutStart"
	CameraServerService_RespondZoomOutStart_FullMethodName               = "/mavsdk.rpc.camera_server.CameraServerService/RespondZoomOutStart"
	CameraServerService_SubscribeZoomStop_FullMethodName                 = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeZoomStop"
	CameraServerService_RespondZoomStop_FullMethodName                   = "/mavsdk.rpc.camera_server.CameraServerService/RespondZoomStop"
	CameraServerService_SubscribeZoomRange_FullMethodName                = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeZoomRange"
	CameraServerService_RespondZoomRange_FullMethodName                  = "/mavsdk.rpc.camera_server.CameraServerService/RespondZoomRange"
	CameraServerService_SetTrackingRectangleStatus_FullMethodName        = "/mavsdk.rpc.camera_server.CameraServerService/SetTrackingRectangleStatus"
	CameraServerService_SetTrackingOffStatus_FullMethodName              = "/mavsdk.rpc.camera_server.CameraServerService/SetTrackingOffStatus"
	CameraServerService_SubscribeTrackingPointCommand_FullMethodName     = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeTrackingPointCommand"
	CameraServerService_SubscribeTrackingRectangleCommand_FullMethodName = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeTrackingRectangleCommand"
	CameraServerService_SubscribeTrackingOffCommand_FullMethodName       = "/mavsdk.rpc.camera_server.CameraServerService/SubscribeTrackingOffCommand"
	CameraServerService_RespondTrackingPointCommand_FullMethodName       = "/mavsdk.rpc.camera_server.CameraServerService/RespondTrackingPointCommand"
	CameraServerService_RespondTrackingRectangleCommand_FullMethodName   = "/mavsdk.rpc.camera_server.CameraServerService/RespondTrackingRectangleCommand"
	CameraServerService_RespondTrackingOffCommand_FullMethodName         = "/mavsdk.rpc.camera_server.CameraServerService/RespondTrackingOffCommand"
)

// CameraServerServiceClient is the client API for CameraServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provides handling of camera interface
type CameraServerServiceClient interface {
	// Sets the camera information. This must be called as soon as the camera server is created.
	SetInformation(ctx context.Context, in *SetInformationRequest, opts ...grpc.CallOption) (*SetInformationResponse, error)
	// Sets video streaming settings.
	SetVideoStreaming(ctx context.Context, in *SetVideoStreamingRequest, opts ...grpc.CallOption) (*SetVideoStreamingResponse, error)
	// Sets image capture in progress status flags. This should be set to true when the camera is busy taking a photo and false when it is done.
	SetInProgress(ctx context.Context, in *SetInProgressRequest, opts ...grpc.CallOption) (*SetInProgressResponse, error)
	// Subscribe to image capture requests. Each request received should respond to using RespondTakePhoto.
	SubscribeTakePhoto(ctx context.Context, in *SubscribeTakePhotoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TakePhotoResponse], error)
	// Respond to an image capture request from SubscribeTakePhoto.
	RespondTakePhoto(ctx context.Context, in *RespondTakePhotoRequest, opts ...grpc.CallOption) (*RespondTakePhotoResponse, error)
	// Subscribe to start video requests. Each request received should respond to using RespondStartVideo
	SubscribeStartVideo(ctx context.Context, in *SubscribeStartVideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StartVideoResponse], error)
	// Subscribe to stop video requests. Each request received should respond using StopVideoResponse
	RespondStartVideo(ctx context.Context, in *RespondStartVideoRequest, opts ...grpc.CallOption) (*RespondStartVideoResponse, error)
	// Subscribe to stop video requests. Each request received should response to using RespondStopVideo
	SubscribeStopVideo(ctx context.Context, in *SubscribeStopVideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StopVideoResponse], error)
	// Respond to stop video request from SubscribeStopVideo.
	RespondStopVideo(ctx context.Context, in *RespondStopVideoRequest, opts ...grpc.CallOption) (*RespondStopVideoResponse, error)
	// Subscribe to start video streaming requests. Each request received should response to using RespondStartVideoStreaming
	SubscribeStartVideoStreaming(ctx context.Context, in *SubscribeStartVideoStreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StartVideoStreamingResponse], error)
	// Respond to start video streaming from SubscribeStartVideoStreaming.
	RespondStartVideoStreaming(ctx context.Context, in *RespondStartVideoStreamingRequest, opts ...grpc.CallOption) (*RespondStartVideoStreamingResponse, error)
	// Subscribe to stop video streaming requests. Each request received should response to using RespondStopVideoStreaming
	SubscribeStopVideoStreaming(ctx context.Context, in *SubscribeStopVideoStreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StopVideoStreamingResponse], error)
	// Respond to stop video streaming from SubscribeStopVideoStreaming.
	RespondStopVideoStreaming(ctx context.Context, in *RespondStopVideoStreamingRequest, opts ...grpc.CallOption) (*RespondStopVideoStreamingResponse, error)
	// Subscribe to set camera mode requests. Each request received should response to using RespondSetMode
	SubscribeSetMode(ctx context.Context, in *SubscribeSetModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SetModeResponse], error)
	// Respond to set camera mode from SubscribeSetMode.
	RespondSetMode(ctx context.Context, in *RespondSetModeRequest, opts ...grpc.CallOption) (*RespondSetModeResponse, error)
	// Subscribe to camera storage information requests. Each request received should response to using RespondStorageInformation
	SubscribeStorageInformation(ctx context.Context, in *SubscribeStorageInformationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageInformationResponse], error)
	// Respond to camera storage information from SubscribeStorageInformation.
	RespondStorageInformation(ctx context.Context, in *RespondStorageInformationRequest, opts ...grpc.CallOption) (*RespondStorageInformationResponse, error)
	// Subscribe to camera capture status requests. Each request received should response to using RespondCaptureStatus
	SubscribeCaptureStatus(ctx context.Context, in *SubscribeCaptureStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CaptureStatusResponse], error)
	// Respond to camera capture status from SubscribeCaptureStatus.
	RespondCaptureStatus(ctx context.Context, in *RespondCaptureStatusRequest, opts ...grpc.CallOption) (*RespondCaptureStatusResponse, error)
	// Subscribe to format storage requests. Each request received should response to using RespondFormatStorage
	SubscribeFormatStorage(ctx context.Context, in *SubscribeFormatStorageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FormatStorageResponse], error)
	// Respond to format storage from SubscribeFormatStorage.
	RespondFormatStorage(ctx context.Context, in *RespondFormatStorageRequest, opts ...grpc.CallOption) (*RespondFormatStorageResponse, error)
	// Subscribe to reset settings requests. Each request received should response to using RespondResetSettings
	SubscribeResetSettings(ctx context.Context, in *SubscribeResetSettingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResetSettingsResponse], error)
	// Respond to reset settings from SubscribeResetSettings.
	RespondResetSettings(ctx context.Context, in *RespondResetSettingsRequest, opts ...grpc.CallOption) (*RespondResetSettingsResponse, error)
	// Subscribe to zoom in start command
	SubscribeZoomInStart(ctx context.Context, in *SubscribeZoomInStartRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoomInStartResponse], error)
	// Respond to zoom in start.
	RespondZoomInStart(ctx context.Context, in *RespondZoomInStartRequest, opts ...grpc.CallOption) (*RespondZoomInStartResponse, error)
	// Subscribe to zoom out start command
	SubscribeZoomOutStart(ctx context.Context, in *SubscribeZoomOutStartRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoomOutStartResponse], error)
	// Respond to zoom out start.
	RespondZoomOutStart(ctx context.Context, in *RespondZoomOutStartRequest, opts ...grpc.CallOption) (*RespondZoomOutStartResponse, error)
	// Subscribe to zoom stop command
	SubscribeZoomStop(ctx context.Context, in *SubscribeZoomStopRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoomStopResponse], error)
	// Respond to zoom stop.
	RespondZoomStop(ctx context.Context, in *RespondZoomStopRequest, opts ...grpc.CallOption) (*RespondZoomStopResponse, error)
	// Subscribe to zoom range command
	SubscribeZoomRange(ctx context.Context, in *SubscribeZoomRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoomRangeResponse], error)
	// Respond to zoom range.
	RespondZoomRange(ctx context.Context, in *RespondZoomRangeRequest, opts ...grpc.CallOption) (*RespondZoomRangeResponse, error)
	// Set/update the current rectangle tracking status.
	SetTrackingRectangleStatus(ctx context.Context, in *SetTrackingRectangleStatusRequest, opts ...grpc.CallOption) (*SetTrackingRectangleStatusResponse, error)
	// Set the current tracking status to off.
	SetTrackingOffStatus(ctx context.Context, in *SetTrackingOffStatusRequest, opts ...grpc.CallOption) (*SetTrackingOffStatusResponse, error)
	// Subscribe to incoming tracking point command.
	SubscribeTrackingPointCommand(ctx context.Context, in *SubscribeTrackingPointCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TrackingPointCommandResponse], error)
	// Subscribe to incoming tracking rectangle command.
	SubscribeTrackingRectangleCommand(ctx context.Context, in *SubscribeTrackingRectangleCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TrackingRectangleCommandResponse], error)
	// Subscribe to incoming tracking off command.
	SubscribeTrackingOffCommand(ctx context.Context, in *SubscribeTrackingOffCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TrackingOffCommandResponse], error)
	// Respond to an incoming tracking point command.
	RespondTrackingPointCommand(ctx context.Context, in *RespondTrackingPointCommandRequest, opts ...grpc.CallOption) (*RespondTrackingPointCommandResponse, error)
	// Respond to an incoming tracking rectangle command.
	RespondTrackingRectangleCommand(ctx context.Context, in *RespondTrackingRectangleCommandRequest, opts ...grpc.CallOption) (*RespondTrackingRectangleCommandResponse, error)
	// Respond to an incoming tracking off command.
	RespondTrackingOffCommand(ctx context.Context, in *RespondTrackingOffCommandRequest, opts ...grpc.CallOption) (*RespondTrackingOffCommandResponse, error)
}

type cameraServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraServerServiceClient(cc grpc.ClientConnInterface) CameraServerServiceClient {
	return &cameraServerServiceClient{cc}
}

func (c *cameraServerServiceClient) SetInformation(ctx context.Context, in *SetInformationRequest, opts ...grpc.CallOption) (*SetInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetInformationResponse)
	err := c.cc.Invoke(ctx, CameraServerService_SetInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SetVideoStreaming(ctx context.Context, in *SetVideoStreamingRequest, opts ...grpc.CallOption) (*SetVideoStreamingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVideoStreamingResponse)
	err := c.cc.Invoke(ctx, CameraServerService_SetVideoStreaming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SetInProgress(ctx context.Context, in *SetInProgressRequest, opts ...grpc.CallOption) (*SetInProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetInProgressResponse)
	err := c.cc.Invoke(ctx, CameraServerService_SetInProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeTakePhoto(ctx context.Context, in *SubscribeTakePhotoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TakePhotoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[0], CameraServerService_SubscribeTakePhoto_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTakePhotoRequest, TakePhotoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeTakePhotoClient = grpc.ServerStreamingClient[TakePhotoResponse]

func (c *cameraServerServiceClient) RespondTakePhoto(ctx context.Context, in *RespondTakePhotoRequest, opts ...grpc.CallOption) (*RespondTakePhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondTakePhotoResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondTakePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeStartVideo(ctx context.Context, in *SubscribeStartVideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StartVideoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[1], CameraServerService_SubscribeStartVideo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeStartVideoRequest, StartVideoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStartVideoClient = grpc.ServerStreamingClient[StartVideoResponse]

func (c *cameraServerServiceClient) RespondStartVideo(ctx context.Context, in *RespondStartVideoRequest, opts ...grpc.CallOption) (*RespondStartVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondStartVideoResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondStartVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeStopVideo(ctx context.Context, in *SubscribeStopVideoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StopVideoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[2], CameraServerService_SubscribeStopVideo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeStopVideoRequest, StopVideoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStopVideoClient = grpc.ServerStreamingClient[StopVideoResponse]

func (c *cameraServerServiceClient) RespondStopVideo(ctx context.Context, in *RespondStopVideoRequest, opts ...grpc.CallOption) (*RespondStopVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondStopVideoResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondStopVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeStartVideoStreaming(ctx context.Context, in *SubscribeStartVideoStreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StartVideoStreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[3], CameraServerService_SubscribeStartVideoStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeStartVideoStreamingRequest, StartVideoStreamingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStartVideoStreamingClient = grpc.ServerStreamingClient[StartVideoStreamingResponse]

func (c *cameraServerServiceClient) RespondStartVideoStreaming(ctx context.Context, in *RespondStartVideoStreamingRequest, opts ...grpc.CallOption) (*RespondStartVideoStreamingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondStartVideoStreamingResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondStartVideoStreaming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeStopVideoStreaming(ctx context.Context, in *SubscribeStopVideoStreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StopVideoStreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[4], CameraServerService_SubscribeStopVideoStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeStopVideoStreamingRequest, StopVideoStreamingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStopVideoStreamingClient = grpc.ServerStreamingClient[StopVideoStreamingResponse]

func (c *cameraServerServiceClient) RespondStopVideoStreaming(ctx context.Context, in *RespondStopVideoStreamingRequest, opts ...grpc.CallOption) (*RespondStopVideoStreamingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondStopVideoStreamingResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondStopVideoStreaming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeSetMode(ctx context.Context, in *SubscribeSetModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SetModeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[5], CameraServerService_SubscribeSetMode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeSetModeRequest, SetModeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeSetModeClient = grpc.ServerStreamingClient[SetModeResponse]

func (c *cameraServerServiceClient) RespondSetMode(ctx context.Context, in *RespondSetModeRequest, opts ...grpc.CallOption) (*RespondSetModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondSetModeResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondSetMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeStorageInformation(ctx context.Context, in *SubscribeStorageInformationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageInformationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[6], CameraServerService_SubscribeStorageInformation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeStorageInformationRequest, StorageInformationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStorageInformationClient = grpc.ServerStreamingClient[StorageInformationResponse]

func (c *cameraServerServiceClient) RespondStorageInformation(ctx context.Context, in *RespondStorageInformationRequest, opts ...grpc.CallOption) (*RespondStorageInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondStorageInformationResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondStorageInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeCaptureStatus(ctx context.Context, in *SubscribeCaptureStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CaptureStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[7], CameraServerService_SubscribeCaptureStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCaptureStatusRequest, CaptureStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeCaptureStatusClient = grpc.ServerStreamingClient[CaptureStatusResponse]

func (c *cameraServerServiceClient) RespondCaptureStatus(ctx context.Context, in *RespondCaptureStatusRequest, opts ...grpc.CallOption) (*RespondCaptureStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondCaptureStatusResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondCaptureStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeFormatStorage(ctx context.Context, in *SubscribeFormatStorageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FormatStorageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[8], CameraServerService_SubscribeFormatStorage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeFormatStorageRequest, FormatStorageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeFormatStorageClient = grpc.ServerStreamingClient[FormatStorageResponse]

func (c *cameraServerServiceClient) RespondFormatStorage(ctx context.Context, in *RespondFormatStorageRequest, opts ...grpc.CallOption) (*RespondFormatStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondFormatStorageResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondFormatStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeResetSettings(ctx context.Context, in *SubscribeResetSettingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ResetSettingsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[9], CameraServerService_SubscribeResetSettings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeResetSettingsRequest, ResetSettingsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeResetSettingsClient = grpc.ServerStreamingClient[ResetSettingsResponse]

func (c *cameraServerServiceClient) RespondResetSettings(ctx context.Context, in *RespondResetSettingsRequest, opts ...grpc.CallOption) (*RespondResetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondResetSettingsResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondResetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeZoomInStart(ctx context.Context, in *SubscribeZoomInStartRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoomInStartResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[10], CameraServerService_SubscribeZoomInStart_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeZoomInStartRequest, ZoomInStartResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeZoomInStartClient = grpc.ServerStreamingClient[ZoomInStartResponse]

func (c *cameraServerServiceClient) RespondZoomInStart(ctx context.Context, in *RespondZoomInStartRequest, opts ...grpc.CallOption) (*RespondZoomInStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondZoomInStartResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondZoomInStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeZoomOutStart(ctx context.Context, in *SubscribeZoomOutStartRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoomOutStartResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[11], CameraServerService_SubscribeZoomOutStart_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeZoomOutStartRequest, ZoomOutStartResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeZoomOutStartClient = grpc.ServerStreamingClient[ZoomOutStartResponse]

func (c *cameraServerServiceClient) RespondZoomOutStart(ctx context.Context, in *RespondZoomOutStartRequest, opts ...grpc.CallOption) (*RespondZoomOutStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondZoomOutStartResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondZoomOutStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeZoomStop(ctx context.Context, in *SubscribeZoomStopRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoomStopResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[12], CameraServerService_SubscribeZoomStop_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeZoomStopRequest, ZoomStopResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeZoomStopClient = grpc.ServerStreamingClient[ZoomStopResponse]

func (c *cameraServerServiceClient) RespondZoomStop(ctx context.Context, in *RespondZoomStopRequest, opts ...grpc.CallOption) (*RespondZoomStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondZoomStopResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondZoomStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeZoomRange(ctx context.Context, in *SubscribeZoomRangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ZoomRangeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[13], CameraServerService_SubscribeZoomRange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeZoomRangeRequest, ZoomRangeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeZoomRangeClient = grpc.ServerStreamingClient[ZoomRangeResponse]

func (c *cameraServerServiceClient) RespondZoomRange(ctx context.Context, in *RespondZoomRangeRequest, opts ...grpc.CallOption) (*RespondZoomRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondZoomRangeResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondZoomRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SetTrackingRectangleStatus(ctx context.Context, in *SetTrackingRectangleStatusRequest, opts ...grpc.CallOption) (*SetTrackingRectangleStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTrackingRectangleStatusResponse)
	err := c.cc.Invoke(ctx, CameraServerService_SetTrackingRectangleStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SetTrackingOffStatus(ctx context.Context, in *SetTrackingOffStatusRequest, opts ...grpc.CallOption) (*SetTrackingOffStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTrackingOffStatusResponse)
	err := c.cc.Invoke(ctx, CameraServerService_SetTrackingOffStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) SubscribeTrackingPointCommand(ctx context.Context, in *SubscribeTrackingPointCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TrackingPointCommandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[14], CameraServerService_SubscribeTrackingPointCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTrackingPointCommandRequest, TrackingPointCommandResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeTrackingPointCommandClient = grpc.ServerStreamingClient[TrackingPointCommandResponse]

func (c *cameraServerServiceClient) SubscribeTrackingRectangleCommand(ctx context.Context, in *SubscribeTrackingRectangleCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TrackingRectangleCommandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[15], CameraServerService_SubscribeTrackingRectangleCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTrackingRectangleCommandRequest, TrackingRectangleCommandResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeTrackingRectangleCommandClient = grpc.ServerStreamingClient[TrackingRectangleCommandResponse]

func (c *cameraServerServiceClient) SubscribeTrackingOffCommand(ctx context.Context, in *SubscribeTrackingOffCommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TrackingOffCommandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraServerService_ServiceDesc.Streams[16], CameraServerService_SubscribeTrackingOffCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTrackingOffCommandRequest, TrackingOffCommandResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeTrackingOffCommandClient = grpc.ServerStreamingClient[TrackingOffCommandResponse]

func (c *cameraServerServiceClient) RespondTrackingPointCommand(ctx context.Context, in *RespondTrackingPointCommandRequest, opts ...grpc.CallOption) (*RespondTrackingPointCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondTrackingPointCommandResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondTrackingPointCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) RespondTrackingRectangleCommand(ctx context.Context, in *RespondTrackingRectangleCommandRequest, opts ...grpc.CallOption) (*RespondTrackingRectangleCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondTrackingRectangleCommandResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondTrackingRectangleCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServerServiceClient) RespondTrackingOffCommand(ctx context.Context, in *RespondTrackingOffCommandRequest, opts ...grpc.CallOption) (*RespondTrackingOffCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespondTrackingOffCommandResponse)
	err := c.cc.Invoke(ctx, CameraServerService_RespondTrackingOffCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServerServiceServer is the server API for CameraServerService service.
// All implementations must embed UnimplementedCameraServerServiceServer
// for forward compatibility.
//
// Provides handling of camera interface
type CameraServerServiceServer interface {
	// Sets the camera information. This must be called as soon as the camera server is created.
	SetInformation(context.Context, *SetInformationRequest) (*SetInformationResponse, error)
	// Sets video streaming settings.
	SetVideoStreaming(context.Context, *SetVideoStreamingRequest) (*SetVideoStreamingResponse, error)
	// Sets image capture in progress status flags. This should be set to true when the camera is busy taking a photo and false when it is done.
	SetInProgress(context.Context, *SetInProgressRequest) (*SetInProgressResponse, error)
	// Subscribe to image capture requests. Each request received should respond to using RespondTakePhoto.
	SubscribeTakePhoto(*SubscribeTakePhotoRequest, grpc.ServerStreamingServer[TakePhotoResponse]) error
	// Respond to an image capture request from SubscribeTakePhoto.
	RespondTakePhoto(context.Context, *RespondTakePhotoRequest) (*RespondTakePhotoResponse, error)
	// Subscribe to start video requests. Each request received should respond to using RespondStartVideo
	SubscribeStartVideo(*SubscribeStartVideoRequest, grpc.ServerStreamingServer[StartVideoResponse]) error
	// Subscribe to stop video requests. Each request received should respond using StopVideoResponse
	RespondStartVideo(context.Context, *RespondStartVideoRequest) (*RespondStartVideoResponse, error)
	// Subscribe to stop video requests. Each request received should response to using RespondStopVideo
	SubscribeStopVideo(*SubscribeStopVideoRequest, grpc.ServerStreamingServer[StopVideoResponse]) error
	// Respond to stop video request from SubscribeStopVideo.
	RespondStopVideo(context.Context, *RespondStopVideoRequest) (*RespondStopVideoResponse, error)
	// Subscribe to start video streaming requests. Each request received should response to using RespondStartVideoStreaming
	SubscribeStartVideoStreaming(*SubscribeStartVideoStreamingRequest, grpc.ServerStreamingServer[StartVideoStreamingResponse]) error
	// Respond to start video streaming from SubscribeStartVideoStreaming.
	RespondStartVideoStreaming(context.Context, *RespondStartVideoStreamingRequest) (*RespondStartVideoStreamingResponse, error)
	// Subscribe to stop video streaming requests. Each request received should response to using RespondStopVideoStreaming
	SubscribeStopVideoStreaming(*SubscribeStopVideoStreamingRequest, grpc.ServerStreamingServer[StopVideoStreamingResponse]) error
	// Respond to stop video streaming from SubscribeStopVideoStreaming.
	RespondStopVideoStreaming(context.Context, *RespondStopVideoStreamingRequest) (*RespondStopVideoStreamingResponse, error)
	// Subscribe to set camera mode requests. Each request received should response to using RespondSetMode
	SubscribeSetMode(*SubscribeSetModeRequest, grpc.ServerStreamingServer[SetModeResponse]) error
	// Respond to set camera mode from SubscribeSetMode.
	RespondSetMode(context.Context, *RespondSetModeRequest) (*RespondSetModeResponse, error)
	// Subscribe to camera storage information requests. Each request received should response to using RespondStorageInformation
	SubscribeStorageInformation(*SubscribeStorageInformationRequest, grpc.ServerStreamingServer[StorageInformationResponse]) error
	// Respond to camera storage information from SubscribeStorageInformation.
	RespondStorageInformation(context.Context, *RespondStorageInformationRequest) (*RespondStorageInformationResponse, error)
	// Subscribe to camera capture status requests. Each request received should response to using RespondCaptureStatus
	SubscribeCaptureStatus(*SubscribeCaptureStatusRequest, grpc.ServerStreamingServer[CaptureStatusResponse]) error
	// Respond to camera capture status from SubscribeCaptureStatus.
	RespondCaptureStatus(context.Context, *RespondCaptureStatusRequest) (*RespondCaptureStatusResponse, error)
	// Subscribe to format storage requests. Each request received should response to using RespondFormatStorage
	SubscribeFormatStorage(*SubscribeFormatStorageRequest, grpc.ServerStreamingServer[FormatStorageResponse]) error
	// Respond to format storage from SubscribeFormatStorage.
	RespondFormatStorage(context.Context, *RespondFormatStorageRequest) (*RespondFormatStorageResponse, error)
	// Subscribe to reset settings requests. Each request received should response to using RespondResetSettings
	SubscribeResetSettings(*SubscribeResetSettingsRequest, grpc.ServerStreamingServer[ResetSettingsResponse]) error
	// Respond to reset settings from SubscribeResetSettings.
	RespondResetSettings(context.Context, *RespondResetSettingsRequest) (*RespondResetSettingsResponse, error)
	// Subscribe to zoom in start command
	SubscribeZoomInStart(*SubscribeZoomInStartRequest, grpc.ServerStreamingServer[ZoomInStartResponse]) error
	// Respond to zoom in start.
	RespondZoomInStart(context.Context, *RespondZoomInStartRequest) (*RespondZoomInStartResponse, error)
	// Subscribe to zoom out start command
	SubscribeZoomOutStart(*SubscribeZoomOutStartRequest, grpc.ServerStreamingServer[ZoomOutStartResponse]) error
	// Respond to zoom out start.
	RespondZoomOutStart(context.Context, *RespondZoomOutStartRequest) (*RespondZoomOutStartResponse, error)
	// Subscribe to zoom stop command
	SubscribeZoomStop(*SubscribeZoomStopRequest, grpc.ServerStreamingServer[ZoomStopResponse]) error
	// Respond to zoom stop.
	RespondZoomStop(context.Context, *RespondZoomStopRequest) (*RespondZoomStopResponse, error)
	// Subscribe to zoom range command
	SubscribeZoomRange(*SubscribeZoomRangeRequest, grpc.ServerStreamingServer[ZoomRangeResponse]) error
	// Respond to zoom range.
	RespondZoomRange(context.Context, *RespondZoomRangeRequest) (*RespondZoomRangeResponse, error)
	// Set/update the current rectangle tracking status.
	SetTrackingRectangleStatus(context.Context, *SetTrackingRectangleStatusRequest) (*SetTrackingRectangleStatusResponse, error)
	// Set the current tracking status to off.
	SetTrackingOffStatus(context.Context, *SetTrackingOffStatusRequest) (*SetTrackingOffStatusResponse, error)
	// Subscribe to incoming tracking point command.
	SubscribeTrackingPointCommand(*SubscribeTrackingPointCommandRequest, grpc.ServerStreamingServer[TrackingPointCommandResponse]) error
	// Subscribe to incoming tracking rectangle command.
	SubscribeTrackingRectangleCommand(*SubscribeTrackingRectangleCommandRequest, grpc.ServerStreamingServer[TrackingRectangleCommandResponse]) error
	// Subscribe to incoming tracking off command.
	SubscribeTrackingOffCommand(*SubscribeTrackingOffCommandRequest, grpc.ServerStreamingServer[TrackingOffCommandResponse]) error
	// Respond to an incoming tracking point command.
	RespondTrackingPointCommand(context.Context, *RespondTrackingPointCommandRequest) (*RespondTrackingPointCommandResponse, error)
	// Respond to an incoming tracking rectangle command.
	RespondTrackingRectangleCommand(context.Context, *RespondTrackingRectangleCommandRequest) (*RespondTrackingRectangleCommandResponse, error)
	// Respond to an incoming tracking off command.
	RespondTrackingOffCommand(context.Context, *RespondTrackingOffCommandRequest) (*RespondTrackingOffCommandResponse, error)
	mustEmbedUnimplementedCameraServerServiceServer()
}

// UnimplementedCameraServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCameraServerServiceServer struct{}

func (UnimplementedCameraServerServiceServer) SetInformation(context.Context, *SetInformationRequest) (*SetInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInformation not implemented")
}
func (UnimplementedCameraServerServiceServer) SetVideoStreaming(context.Context, *SetVideoStreamingRequest) (*SetVideoStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVideoStreaming not implemented")
}
func (UnimplementedCameraServerServiceServer) SetInProgress(context.Context, *SetInProgressRequest) (*SetInProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInProgress not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeTakePhoto(*SubscribeTakePhotoRequest, grpc.ServerStreamingServer[TakePhotoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTakePhoto not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondTakePhoto(context.Context, *RespondTakePhotoRequest) (*RespondTakePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondTakePhoto not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeStartVideo(*SubscribeStartVideoRequest, grpc.ServerStreamingServer[StartVideoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStartVideo not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondStartVideo(context.Context, *RespondStartVideoRequest) (*RespondStartVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondStartVideo not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeStopVideo(*SubscribeStopVideoRequest, grpc.ServerStreamingServer[StopVideoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStopVideo not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondStopVideo(context.Context, *RespondStopVideoRequest) (*RespondStopVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondStopVideo not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeStartVideoStreaming(*SubscribeStartVideoStreamingRequest, grpc.ServerStreamingServer[StartVideoStreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStartVideoStreaming not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondStartVideoStreaming(context.Context, *RespondStartVideoStreamingRequest) (*RespondStartVideoStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondStartVideoStreaming not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeStopVideoStreaming(*SubscribeStopVideoStreamingRequest, grpc.ServerStreamingServer[StopVideoStreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStopVideoStreaming not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondStopVideoStreaming(context.Context, *RespondStopVideoStreamingRequest) (*RespondStopVideoStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondStopVideoStreaming not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeSetMode(*SubscribeSetModeRequest, grpc.ServerStreamingServer[SetModeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSetMode not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondSetMode(context.Context, *RespondSetModeRequest) (*RespondSetModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondSetMode not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeStorageInformation(*SubscribeStorageInformationRequest, grpc.ServerStreamingServer[StorageInformationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStorageInformation not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondStorageInformation(context.Context, *RespondStorageInformationRequest) (*RespondStorageInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondStorageInformation not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeCaptureStatus(*SubscribeCaptureStatusRequest, grpc.ServerStreamingServer[CaptureStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCaptureStatus not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondCaptureStatus(context.Context, *RespondCaptureStatusRequest) (*RespondCaptureStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondCaptureStatus not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeFormatStorage(*SubscribeFormatStorageRequest, grpc.ServerStreamingServer[FormatStorageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFormatStorage not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondFormatStorage(context.Context, *RespondFormatStorageRequest) (*RespondFormatStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondFormatStorage not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeResetSettings(*SubscribeResetSettingsRequest, grpc.ServerStreamingServer[ResetSettingsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeResetSettings not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondResetSettings(context.Context, *RespondResetSettingsRequest) (*RespondResetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondResetSettings not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeZoomInStart(*SubscribeZoomInStartRequest, grpc.ServerStreamingServer[ZoomInStartResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeZoomInStart not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondZoomInStart(context.Context, *RespondZoomInStartRequest) (*RespondZoomInStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondZoomInStart not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeZoomOutStart(*SubscribeZoomOutStartRequest, grpc.ServerStreamingServer[ZoomOutStartResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeZoomOutStart not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondZoomOutStart(context.Context, *RespondZoomOutStartRequest) (*RespondZoomOutStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondZoomOutStart not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeZoomStop(*SubscribeZoomStopRequest, grpc.ServerStreamingServer[ZoomStopResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeZoomStop not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondZoomStop(context.Context, *RespondZoomStopRequest) (*RespondZoomStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondZoomStop not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeZoomRange(*SubscribeZoomRangeRequest, grpc.ServerStreamingServer[ZoomRangeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeZoomRange not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondZoomRange(context.Context, *RespondZoomRangeRequest) (*RespondZoomRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondZoomRange not implemented")
}
func (UnimplementedCameraServerServiceServer) SetTrackingRectangleStatus(context.Context, *SetTrackingRectangleStatusRequest) (*SetTrackingRectangleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrackingRectangleStatus not implemented")
}
func (UnimplementedCameraServerServiceServer) SetTrackingOffStatus(context.Context, *SetTrackingOffStatusRequest) (*SetTrackingOffStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrackingOffStatus not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeTrackingPointCommand(*SubscribeTrackingPointCommandRequest, grpc.ServerStreamingServer[TrackingPointCommandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTrackingPointCommand not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeTrackingRectangleCommand(*SubscribeTrackingRectangleCommandRequest, grpc.ServerStreamingServer[TrackingRectangleCommandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTrackingRectangleCommand not implemented")
}
func (UnimplementedCameraServerServiceServer) SubscribeTrackingOffCommand(*SubscribeTrackingOffCommandRequest, grpc.ServerStreamingServer[TrackingOffCommandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTrackingOffCommand not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondTrackingPointCommand(context.Context, *RespondTrackingPointCommandRequest) (*RespondTrackingPointCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondTrackingPointCommand not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondTrackingRectangleCommand(context.Context, *RespondTrackingRectangleCommandRequest) (*RespondTrackingRectangleCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondTrackingRectangleCommand not implemented")
}
func (UnimplementedCameraServerServiceServer) RespondTrackingOffCommand(context.Context, *RespondTrackingOffCommandRequest) (*RespondTrackingOffCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondTrackingOffCommand not implemented")
}
func (UnimplementedCameraServerServiceServer) mustEmbedUnimplementedCameraServerServiceServer() {}
func (UnimplementedCameraServerServiceServer) testEmbeddedByValue()                             {}

// UnsafeCameraServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraServerServiceServer will
// result in compilation errors.
type UnsafeCameraServerServiceServer interface {
	mustEmbedUnimplementedCameraServerServiceServer()
}

func RegisterCameraServerServiceServer(s grpc.ServiceRegistrar, srv CameraServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedCameraServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CameraServerService_ServiceDesc, srv)
}

func _CameraServerService_SetInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).SetInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_SetInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).SetInformation(ctx, req.(*SetInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SetVideoStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVideoStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).SetVideoStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_SetVideoStreaming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).SetVideoStreaming(ctx, req.(*SetVideoStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SetInProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).SetInProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_SetInProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).SetInProgress(ctx, req.(*SetInProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeTakePhoto_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTakePhotoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeTakePhoto(m, &grpc.GenericServerStream[SubscribeTakePhotoRequest, TakePhotoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeTakePhotoServer = grpc.ServerStreamingServer[TakePhotoResponse]

func _CameraServerService_RespondTakePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondTakePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondTakePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondTakePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondTakePhoto(ctx, req.(*RespondTakePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeStartVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStartVideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeStartVideo(m, &grpc.GenericServerStream[SubscribeStartVideoRequest, StartVideoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStartVideoServer = grpc.ServerStreamingServer[StartVideoResponse]

func _CameraServerService_RespondStartVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondStartVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondStartVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondStartVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondStartVideo(ctx, req.(*RespondStartVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeStopVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStopVideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeStopVideo(m, &grpc.GenericServerStream[SubscribeStopVideoRequest, StopVideoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStopVideoServer = grpc.ServerStreamingServer[StopVideoResponse]

func _CameraServerService_RespondStopVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondStopVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondStopVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondStopVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondStopVideo(ctx, req.(*RespondStopVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeStartVideoStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStartVideoStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeStartVideoStreaming(m, &grpc.GenericServerStream[SubscribeStartVideoStreamingRequest, StartVideoStreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStartVideoStreamingServer = grpc.ServerStreamingServer[StartVideoStreamingResponse]

func _CameraServerService_RespondStartVideoStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondStartVideoStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondStartVideoStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondStartVideoStreaming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondStartVideoStreaming(ctx, req.(*RespondStartVideoStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeStopVideoStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStopVideoStreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeStopVideoStreaming(m, &grpc.GenericServerStream[SubscribeStopVideoStreamingRequest, StopVideoStreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStopVideoStreamingServer = grpc.ServerStreamingServer[StopVideoStreamingResponse]

func _CameraServerService_RespondStopVideoStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondStopVideoStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondStopVideoStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondStopVideoStreaming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondStopVideoStreaming(ctx, req.(*RespondStopVideoStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeSetMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeSetModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeSetMode(m, &grpc.GenericServerStream[SubscribeSetModeRequest, SetModeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeSetModeServer = grpc.ServerStreamingServer[SetModeResponse]

func _CameraServerService_RespondSetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondSetModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondSetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondSetMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondSetMode(ctx, req.(*RespondSetModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeStorageInformation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStorageInformationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeStorageInformation(m, &grpc.GenericServerStream[SubscribeStorageInformationRequest, StorageInformationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeStorageInformationServer = grpc.ServerStreamingServer[StorageInformationResponse]

func _CameraServerService_RespondStorageInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondStorageInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondStorageInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondStorageInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondStorageInformation(ctx, req.(*RespondStorageInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeCaptureStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCaptureStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeCaptureStatus(m, &grpc.GenericServerStream[SubscribeCaptureStatusRequest, CaptureStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeCaptureStatusServer = grpc.ServerStreamingServer[CaptureStatusResponse]

func _CameraServerService_RespondCaptureStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondCaptureStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondCaptureStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondCaptureStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondCaptureStatus(ctx, req.(*RespondCaptureStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeFormatStorage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFormatStorageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeFormatStorage(m, &grpc.GenericServerStream[SubscribeFormatStorageRequest, FormatStorageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeFormatStorageServer = grpc.ServerStreamingServer[FormatStorageResponse]

func _CameraServerService_RespondFormatStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondFormatStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondFormatStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondFormatStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondFormatStorage(ctx, req.(*RespondFormatStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeResetSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeResetSettingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeResetSettings(m, &grpc.GenericServerStream[SubscribeResetSettingsRequest, ResetSettingsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeResetSettingsServer = grpc.ServerStreamingServer[ResetSettingsResponse]

func _CameraServerService_RespondResetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondResetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondResetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondResetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondResetSettings(ctx, req.(*RespondResetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeZoomInStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeZoomInStartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeZoomInStart(m, &grpc.GenericServerStream[SubscribeZoomInStartRequest, ZoomInStartResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeZoomInStartServer = grpc.ServerStreamingServer[ZoomInStartResponse]

func _CameraServerService_RespondZoomInStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondZoomInStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondZoomInStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondZoomInStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondZoomInStart(ctx, req.(*RespondZoomInStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeZoomOutStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeZoomOutStartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeZoomOutStart(m, &grpc.GenericServerStream[SubscribeZoomOutStartRequest, ZoomOutStartResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeZoomOutStartServer = grpc.ServerStreamingServer[ZoomOutStartResponse]

func _CameraServerService_RespondZoomOutStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondZoomOutStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondZoomOutStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondZoomOutStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondZoomOutStart(ctx, req.(*RespondZoomOutStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeZoomStop_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeZoomStopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeZoomStop(m, &grpc.GenericServerStream[SubscribeZoomStopRequest, ZoomStopResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeZoomStopServer = grpc.ServerStreamingServer[ZoomStopResponse]

func _CameraServerService_RespondZoomStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondZoomStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondZoomStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondZoomStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondZoomStop(ctx, req.(*RespondZoomStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeZoomRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeZoomRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeZoomRange(m, &grpc.GenericServerStream[SubscribeZoomRangeRequest, ZoomRangeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeZoomRangeServer = grpc.ServerStreamingServer[ZoomRangeResponse]

func _CameraServerService_RespondZoomRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondZoomRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondZoomRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondZoomRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondZoomRange(ctx, req.(*RespondZoomRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SetTrackingRectangleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrackingRectangleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).SetTrackingRectangleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_SetTrackingRectangleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).SetTrackingRectangleStatus(ctx, req.(*SetTrackingRectangleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SetTrackingOffStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrackingOffStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).SetTrackingOffStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_SetTrackingOffStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).SetTrackingOffStatus(ctx, req.(*SetTrackingOffStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_SubscribeTrackingPointCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTrackingPointCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeTrackingPointCommand(m, &grpc.GenericServerStream[SubscribeTrackingPointCommandRequest, TrackingPointCommandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeTrackingPointCommandServer = grpc.ServerStreamingServer[TrackingPointCommandResponse]

func _CameraServerService_SubscribeTrackingRectangleCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTrackingRectangleCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeTrackingRectangleCommand(m, &grpc.GenericServerStream[SubscribeTrackingRectangleCommandRequest, TrackingRectangleCommandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeTrackingRectangleCommandServer = grpc.ServerStreamingServer[TrackingRectangleCommandResponse]

func _CameraServerService_SubscribeTrackingOffCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTrackingOffCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServerServiceServer).SubscribeTrackingOffCommand(m, &grpc.GenericServerStream[SubscribeTrackingOffCommandRequest, TrackingOffCommandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraServerService_SubscribeTrackingOffCommandServer = grpc.ServerStreamingServer[TrackingOffCommandResponse]

func _CameraServerService_RespondTrackingPointCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondTrackingPointCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondTrackingPointCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondTrackingPointCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondTrackingPointCommand(ctx, req.(*RespondTrackingPointCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_RespondTrackingRectangleCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondTrackingRectangleCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondTrackingRectangleCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondTrackingRectangleCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondTrackingRectangleCommand(ctx, req.(*RespondTrackingRectangleCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraServerService_RespondTrackingOffCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondTrackingOffCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServerServiceServer).RespondTrackingOffCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraServerService_RespondTrackingOffCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServerServiceServer).RespondTrackingOffCommand(ctx, req.(*RespondTrackingOffCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CameraServerService_ServiceDesc is the grpc.ServiceDesc for CameraServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CameraServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.camera_server.CameraServerService",
	HandlerType: (*CameraServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetInformation",
			Handler:    _CameraServerService_SetInformation_Handler,
		},
		{
			MethodName: "SetVideoStreaming",
			Handler:    _CameraServerService_SetVideoStreaming_Handler,
		},
		{
			MethodName: "SetInProgress",
			Handler:    _CameraServerService_SetInProgress_Handler,
		},
		{
			MethodName: "RespondTakePhoto",
			Handler:    _CameraServerService_RespondTakePhoto_Handler,
		},
		{
			MethodName: "RespondStartVideo",
			Handler:    _CameraServerService_RespondStartVideo_Handler,
		},
		{
			MethodName: "RespondStopVideo",
			Handler:    _CameraServerService_RespondStopVideo_Handler,
		},
		{
			MethodName: "RespondStartVideoStreaming",
			Handler:    _CameraServerService_RespondStartVideoStreaming_Handler,
		},
		{
			MethodName: "RespondStopVideoStreaming",
			Handler:    _CameraServerService_RespondStopVideoStreaming_Handler,
		},
		{
			MethodName: "RespondSetMode",
			Handler:    _CameraServerService_RespondSetMode_Handler,
		},
		{
			MethodName: "RespondStorageInformation",
			Handler:    _CameraServerService_RespondStorageInformation_Handler,
		},
		{
			MethodName: "RespondCaptureStatus",
			Handler:    _CameraServerService_RespondCaptureStatus_Handler,
		},
		{
			MethodName: "RespondFormatStorage",
			Handler:    _CameraServerService_RespondFormatStorage_Handler,
		},
		{
			MethodName: "RespondResetSettings",
			Handler:    _CameraServerService_RespondResetSettings_Handler,
		},
		{
			MethodName: "RespondZoomInStart",
			Handler:    _CameraServerService_RespondZoomInStart_Handler,
		},
		{
			MethodName: "RespondZoomOutStart",
			Handler:    _CameraServerService_RespondZoomOutStart_Handler,
		},
		{
			MethodName: "RespondZoomStop",
			Handler:    _CameraServerService_RespondZoomStop_Handler,
		},
		{
			MethodName: "RespondZoomRange",
			Handler:    _CameraServerService_RespondZoomRange_Handler,
		},
		{
			MethodName: "SetTrackingRectangleStatus",
			Handler:    _CameraServerService_SetTrackingRectangleStatus_Handler,
		},
		{
			MethodName: "SetTrackingOffStatus",
			Handler:    _CameraServerService_SetTrackingOffStatus_Handler,
		},
		{
			MethodName: "RespondTrackingPointCommand",
			Handler:    _CameraServerService_RespondTrackingPointCommand_Handler,
		},
		{
			MethodName: "RespondTrackingRectangleCommand",
			Handler:    _CameraServerService_RespondTrackingRectangleCommand_Handler,
		},
		{
			MethodName: "RespondTrackingOffCommand",
			Handler:    _CameraServerService_RespondTrackingOffCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTakePhoto",
			Handler:       _CameraServerService_SubscribeTakePhoto_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStartVideo",
			Handler:       _CameraServerService_SubscribeStartVideo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStopVideo",
			Handler:       _CameraServerService_SubscribeStopVideo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStartVideoStreaming",
			Handler:       _CameraServerService_SubscribeStartVideoStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStopVideoStreaming",
			Handler:       _CameraServerService_SubscribeStopVideoStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeSetMode",
			Handler:       _CameraServerService_SubscribeSetMode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStorageInformation",
			Handler:       _CameraServerService_SubscribeStorageInformation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCaptureStatus",
			Handler:       _CameraServerService_SubscribeCaptureStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeFormatStorage",
			Handler:       _CameraServerService_SubscribeFormatStorage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeResetSettings",
			Handler:       _CameraServerService_SubscribeResetSettings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeZoomInStart",
			Handler:       _CameraServerService_SubscribeZoomInStart_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeZoomOutStart",
			Handler:       _CameraServerService_SubscribeZoomOutStart_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeZoomStop",
			Handler:       _CameraServerService_SubscribeZoomStop_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeZoomRange",
			Handler:       _CameraServerService_SubscribeZoomRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTrackingPointCommand",
			Handler:       _CameraServerService_SubscribeTrackingPointCommand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTrackingRectangleCommand",
			Handler:       _CameraServerService_SubscribeTrackingRectangleCommand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTrackingOffCommand",
			Handler:       _CameraServerService_SubscribeTrackingOffCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "camera_server.proto",
}
