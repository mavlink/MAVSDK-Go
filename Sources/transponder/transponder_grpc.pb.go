// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: transponder.proto

package transponder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransponderService_SubscribeTransponder_FullMethodName = "/mavsdk.rpc.transponder.TransponderService/SubscribeTransponder"
	TransponderService_SetRateTransponder_FullMethodName   = "/mavsdk.rpc.transponder.TransponderService/SetRateTransponder"
)

// TransponderServiceClient is the client API for TransponderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Allow users to get ADS-B information
// and set ADS-B update rates.
type TransponderServiceClient interface {
	// Subscribe to 'transponder' updates.
	SubscribeTransponder(ctx context.Context, in *SubscribeTransponderRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransponderResponse], error)
	// Set rate to 'transponder' updates.
	SetRateTransponder(ctx context.Context, in *SetRateTransponderRequest, opts ...grpc.CallOption) (*SetRateTransponderResponse, error)
}

type transponderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransponderServiceClient(cc grpc.ClientConnInterface) TransponderServiceClient {
	return &transponderServiceClient{cc}
}

func (c *transponderServiceClient) SubscribeTransponder(ctx context.Context, in *SubscribeTransponderRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransponderResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransponderService_ServiceDesc.Streams[0], TransponderService_SubscribeTransponder_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTransponderRequest, TransponderResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransponderService_SubscribeTransponderClient = grpc.ServerStreamingClient[TransponderResponse]

func (c *transponderServiceClient) SetRateTransponder(ctx context.Context, in *SetRateTransponderRequest, opts ...grpc.CallOption) (*SetRateTransponderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRateTransponderResponse)
	err := c.cc.Invoke(ctx, TransponderService_SetRateTransponder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransponderServiceServer is the server API for TransponderService service.
// All implementations must embed UnimplementedTransponderServiceServer
// for forward compatibility.
//
// Allow users to get ADS-B information
// and set ADS-B update rates.
type TransponderServiceServer interface {
	// Subscribe to 'transponder' updates.
	SubscribeTransponder(*SubscribeTransponderRequest, grpc.ServerStreamingServer[TransponderResponse]) error
	// Set rate to 'transponder' updates.
	SetRateTransponder(context.Context, *SetRateTransponderRequest) (*SetRateTransponderResponse, error)
	mustEmbedUnimplementedTransponderServiceServer()
}

// UnimplementedTransponderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransponderServiceServer struct{}

func (UnimplementedTransponderServiceServer) SubscribeTransponder(*SubscribeTransponderRequest, grpc.ServerStreamingServer[TransponderResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransponder not implemented")
}
func (UnimplementedTransponderServiceServer) SetRateTransponder(context.Context, *SetRateTransponderRequest) (*SetRateTransponderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRateTransponder not implemented")
}
func (UnimplementedTransponderServiceServer) mustEmbedUnimplementedTransponderServiceServer() {}
func (UnimplementedTransponderServiceServer) testEmbeddedByValue()                            {}

// UnsafeTransponderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransponderServiceServer will
// result in compilation errors.
type UnsafeTransponderServiceServer interface {
	mustEmbedUnimplementedTransponderServiceServer()
}

func RegisterTransponderServiceServer(s grpc.ServiceRegistrar, srv TransponderServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransponderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransponderService_ServiceDesc, srv)
}

func _TransponderService_SubscribeTransponder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTransponderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransponderServiceServer).SubscribeTransponder(m, &grpc.GenericServerStream[SubscribeTransponderRequest, TransponderResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransponderService_SubscribeTransponderServer = grpc.ServerStreamingServer[TransponderResponse]

func _TransponderService_SetRateTransponder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRateTransponderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransponderServiceServer).SetRateTransponder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransponderService_SetRateTransponder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransponderServiceServer).SetRateTransponder(ctx, req.(*SetRateTransponderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransponderService_ServiceDesc is the grpc.ServiceDesc for TransponderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransponderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.transponder.TransponderService",
	HandlerType: (*TransponderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRateTransponder",
			Handler:    _TransponderService_SetRateTransponder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTransponder",
			Handler:       _TransponderService_SubscribeTransponder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transponder.proto",
}
