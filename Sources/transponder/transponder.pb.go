// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: transponder.proto

package transponder

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ADSB classification for the type of vehicle emitting the transponder signal.
type AdsbEmitterType int32

const (
	AdsbEmitterType_ADSB_EMITTER_TYPE_NO_INFO           AdsbEmitterType = 0  // No emitter info.
	AdsbEmitterType_ADSB_EMITTER_TYPE_LIGHT             AdsbEmitterType = 1  // Light emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_SMALL             AdsbEmitterType = 2  // Small emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_LARGE             AdsbEmitterType = 3  // Large emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE AdsbEmitterType = 4  // High vortex emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_HEAVY             AdsbEmitterType = 5  // Heavy emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_HIGHLY_MANUV      AdsbEmitterType = 6  // Highly maneuverable emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_ROTOCRAFT         AdsbEmitterType = 7  // Rotorcraft emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_UNASSIGNED        AdsbEmitterType = 8  // Unassigned emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_GLIDER            AdsbEmitterType = 9  // Glider emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_LIGHTER_AIR       AdsbEmitterType = 10 // Lighter air emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_PARACHUTE         AdsbEmitterType = 11 // Parachute emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_ULTRA_LIGHT       AdsbEmitterType = 12 // Ultra light emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_UNASSIGNED2       AdsbEmitterType = 13 // Unassigned2 emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_UAV               AdsbEmitterType = 14 // UAV emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_SPACE             AdsbEmitterType = 15 // Space emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_UNASSGINED3       AdsbEmitterType = 16 // Unassigned3 emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_EMERGENCY_SURFACE AdsbEmitterType = 17 // Emergency emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_SERVICE_SURFACE   AdsbEmitterType = 18 // Service surface emitter.
	AdsbEmitterType_ADSB_EMITTER_TYPE_POINT_OBSTACLE    AdsbEmitterType = 19 // Point obstacle emitter.
)

// Enum value maps for AdsbEmitterType.
var (
	AdsbEmitterType_name = map[int32]string{
		0:  "ADSB_EMITTER_TYPE_NO_INFO",
		1:  "ADSB_EMITTER_TYPE_LIGHT",
		2:  "ADSB_EMITTER_TYPE_SMALL",
		3:  "ADSB_EMITTER_TYPE_LARGE",
		4:  "ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE",
		5:  "ADSB_EMITTER_TYPE_HEAVY",
		6:  "ADSB_EMITTER_TYPE_HIGHLY_MANUV",
		7:  "ADSB_EMITTER_TYPE_ROTOCRAFT",
		8:  "ADSB_EMITTER_TYPE_UNASSIGNED",
		9:  "ADSB_EMITTER_TYPE_GLIDER",
		10: "ADSB_EMITTER_TYPE_LIGHTER_AIR",
		11: "ADSB_EMITTER_TYPE_PARACHUTE",
		12: "ADSB_EMITTER_TYPE_ULTRA_LIGHT",
		13: "ADSB_EMITTER_TYPE_UNASSIGNED2",
		14: "ADSB_EMITTER_TYPE_UAV",
		15: "ADSB_EMITTER_TYPE_SPACE",
		16: "ADSB_EMITTER_TYPE_UNASSGINED3",
		17: "ADSB_EMITTER_TYPE_EMERGENCY_SURFACE",
		18: "ADSB_EMITTER_TYPE_SERVICE_SURFACE",
		19: "ADSB_EMITTER_TYPE_POINT_OBSTACLE",
	}
	AdsbEmitterType_value = map[string]int32{
		"ADSB_EMITTER_TYPE_NO_INFO":           0,
		"ADSB_EMITTER_TYPE_LIGHT":             1,
		"ADSB_EMITTER_TYPE_SMALL":             2,
		"ADSB_EMITTER_TYPE_LARGE":             3,
		"ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE": 4,
		"ADSB_EMITTER_TYPE_HEAVY":             5,
		"ADSB_EMITTER_TYPE_HIGHLY_MANUV":      6,
		"ADSB_EMITTER_TYPE_ROTOCRAFT":         7,
		"ADSB_EMITTER_TYPE_UNASSIGNED":        8,
		"ADSB_EMITTER_TYPE_GLIDER":            9,
		"ADSB_EMITTER_TYPE_LIGHTER_AIR":       10,
		"ADSB_EMITTER_TYPE_PARACHUTE":         11,
		"ADSB_EMITTER_TYPE_ULTRA_LIGHT":       12,
		"ADSB_EMITTER_TYPE_UNASSIGNED2":       13,
		"ADSB_EMITTER_TYPE_UAV":               14,
		"ADSB_EMITTER_TYPE_SPACE":             15,
		"ADSB_EMITTER_TYPE_UNASSGINED3":       16,
		"ADSB_EMITTER_TYPE_EMERGENCY_SURFACE": 17,
		"ADSB_EMITTER_TYPE_SERVICE_SURFACE":   18,
		"ADSB_EMITTER_TYPE_POINT_OBSTACLE":    19,
	}
)

func (x AdsbEmitterType) Enum() *AdsbEmitterType {
	p := new(AdsbEmitterType)
	*p = x
	return p
}

func (x AdsbEmitterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdsbEmitterType) Descriptor() protoreflect.EnumDescriptor {
	return file_transponder_proto_enumTypes[0].Descriptor()
}

func (AdsbEmitterType) Type() protoreflect.EnumType {
	return &file_transponder_proto_enumTypes[0]
}

func (x AdsbEmitterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdsbEmitterType.Descriptor instead.
func (AdsbEmitterType) EnumDescriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{0}
}

// Altitude type used in AdsbVehicle message
type AdsbAltitudeType int32

const (
	AdsbAltitudeType_ADSB_ALTITUDE_TYPE_PRESSURE_QNH AdsbAltitudeType = 0 // Altitude reported from a Baro source using QNH reference
	AdsbAltitudeType_ADSB_ALTITUDE_TYPE_GEOMETRIC    AdsbAltitudeType = 1 // Altitude reported from a GNSS source
)

// Enum value maps for AdsbAltitudeType.
var (
	AdsbAltitudeType_name = map[int32]string{
		0: "ADSB_ALTITUDE_TYPE_PRESSURE_QNH",
		1: "ADSB_ALTITUDE_TYPE_GEOMETRIC",
	}
	AdsbAltitudeType_value = map[string]int32{
		"ADSB_ALTITUDE_TYPE_PRESSURE_QNH": 0,
		"ADSB_ALTITUDE_TYPE_GEOMETRIC":    1,
	}
)

func (x AdsbAltitudeType) Enum() *AdsbAltitudeType {
	p := new(AdsbAltitudeType)
	*p = x
	return p
}

func (x AdsbAltitudeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdsbAltitudeType) Descriptor() protoreflect.EnumDescriptor {
	return file_transponder_proto_enumTypes[1].Descriptor()
}

func (AdsbAltitudeType) Type() protoreflect.EnumType {
	return &file_transponder_proto_enumTypes[1]
}

func (x AdsbAltitudeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdsbAltitudeType.Descriptor instead.
func (AdsbAltitudeType) EnumDescriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{1}
}

// Possible results returned for transponder requests.
type TransponderResult_Result int32

const (
	TransponderResult_RESULT_UNKNOWN          TransponderResult_Result = 0 // Unknown result
	TransponderResult_RESULT_SUCCESS          TransponderResult_Result = 1 // Success: the transponder command was accepted by the vehicle
	TransponderResult_RESULT_NO_SYSTEM        TransponderResult_Result = 2 // No system connected
	TransponderResult_RESULT_CONNECTION_ERROR TransponderResult_Result = 3 // Connection error
	TransponderResult_RESULT_BUSY             TransponderResult_Result = 4 // Vehicle is busy
	TransponderResult_RESULT_COMMAND_DENIED   TransponderResult_Result = 5 // Command refused by vehicle
	TransponderResult_RESULT_TIMEOUT          TransponderResult_Result = 6 // Request timed out
)

// Enum value maps for TransponderResult_Result.
var (
	TransponderResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_NO_SYSTEM",
		3: "RESULT_CONNECTION_ERROR",
		4: "RESULT_BUSY",
		5: "RESULT_COMMAND_DENIED",
		6: "RESULT_TIMEOUT",
	}
	TransponderResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":          0,
		"RESULT_SUCCESS":          1,
		"RESULT_NO_SYSTEM":        2,
		"RESULT_CONNECTION_ERROR": 3,
		"RESULT_BUSY":             4,
		"RESULT_COMMAND_DENIED":   5,
		"RESULT_TIMEOUT":          6,
	}
)

func (x TransponderResult_Result) Enum() *TransponderResult_Result {
	p := new(TransponderResult_Result)
	*p = x
	return p
}

func (x TransponderResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransponderResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_transponder_proto_enumTypes[2].Descriptor()
}

func (TransponderResult_Result) Type() protoreflect.EnumType {
	return &file_transponder_proto_enumTypes[2]
}

func (x TransponderResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransponderResult_Result.Descriptor instead.
func (TransponderResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{5, 0}
}

type SubscribeTransponderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTransponderRequest) Reset() {
	*x = SubscribeTransponderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transponder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTransponderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTransponderRequest) ProtoMessage() {}

func (x *SubscribeTransponderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transponder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTransponderRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTransponderRequest) Descriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{0}
}

type TransponderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transponder *AdsbVehicle `protobuf:"bytes,1,opt,name=transponder,proto3" json:"transponder,omitempty"` // The next detection
}

func (x *TransponderResponse) Reset() {
	*x = TransponderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transponder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransponderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransponderResponse) ProtoMessage() {}

func (x *TransponderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transponder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransponderResponse.ProtoReflect.Descriptor instead.
func (*TransponderResponse) Descriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{1}
}

func (x *TransponderResponse) GetTransponder() *AdsbVehicle {
	if x != nil {
		return x.Transponder
	}
	return nil
}

type SetRateTransponderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateHz float64 `protobuf:"fixed64,1,opt,name=rate_hz,json=rateHz,proto3" json:"rate_hz,omitempty"` // The requested rate (in Hertz)
}

func (x *SetRateTransponderRequest) Reset() {
	*x = SetRateTransponderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transponder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRateTransponderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateTransponderRequest) ProtoMessage() {}

func (x *SetRateTransponderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transponder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateTransponderRequest.ProtoReflect.Descriptor instead.
func (*SetRateTransponderRequest) Descriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{2}
}

func (x *SetRateTransponderRequest) GetRateHz() float64 {
	if x != nil {
		return x.RateHz
	}
	return 0
}

type SetRateTransponderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransponderResult *TransponderResult `protobuf:"bytes,1,opt,name=transponder_result,json=transponderResult,proto3" json:"transponder_result,omitempty"`
}

func (x *SetRateTransponderResponse) Reset() {
	*x = SetRateTransponderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transponder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRateTransponderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRateTransponderResponse) ProtoMessage() {}

func (x *SetRateTransponderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transponder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRateTransponderResponse.ProtoReflect.Descriptor instead.
func (*SetRateTransponderResponse) Descriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{3}
}

func (x *SetRateTransponderResponse) GetTransponderResult() *TransponderResult {
	if x != nil {
		return x.TransponderResult
	}
	return nil
}

// ADSB Vehicle type.
type AdsbVehicle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IcaoAddress          uint32           `protobuf:"varint,1,opt,name=icao_address,json=icaoAddress,proto3" json:"icao_address,omitempty"`                                                 // ICAO (International Civil Aviation Organization) unique worldwide identifier
	LatitudeDeg          float64          `protobuf:"fixed64,2,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                                                // Latitude in degrees (range: -90 to +90)
	LongitudeDeg         float64          `protobuf:"fixed64,3,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                                             // Longitude in degrees (range: -180 to +180).
	AltitudeType         AdsbAltitudeType `protobuf:"varint,4,opt,name=altitude_type,json=altitudeType,proto3,enum=mavsdk.rpc.transponder.AdsbAltitudeType" json:"altitude_type,omitempty"` // ADSB altitude type.
	AbsoluteAltitudeM    float32          `protobuf:"fixed32,5,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"`                            // Altitude in metres according to altitude_type
	HeadingDeg           float32          `protobuf:"fixed32,6,opt,name=heading_deg,json=headingDeg,proto3" json:"heading_deg,omitempty"`                                                   // Course over ground, in degrees
	HorizontalVelocityMS float32          `protobuf:"fixed32,7,opt,name=horizontal_velocity_m_s,json=horizontalVelocityMS,proto3" json:"horizontal_velocity_m_s,omitempty"`                 // The horizontal velocity in metres/second
	VerticalVelocityMS   float32          `protobuf:"fixed32,8,opt,name=vertical_velocity_m_s,json=verticalVelocityMS,proto3" json:"vertical_velocity_m_s,omitempty"`                       // The vertical velocity in metres/second. Positive is up.
	Callsign             string           `protobuf:"bytes,9,opt,name=callsign,proto3" json:"callsign,omitempty"`                                                                           // The callsign
	EmitterType          AdsbEmitterType  `protobuf:"varint,10,opt,name=emitter_type,json=emitterType,proto3,enum=mavsdk.rpc.transponder.AdsbEmitterType" json:"emitter_type,omitempty"`    // ADSB emitter type.
	Squawk               uint32           `protobuf:"varint,13,opt,name=squawk,proto3" json:"squawk,omitempty"`                                                                             // Squawk code.
	TslcS                uint32           `protobuf:"varint,14,opt,name=tslc_s,json=tslcS,proto3" json:"tslc_s,omitempty"`                                                                  // Time Since Last Communication in seconds.
}

func (x *AdsbVehicle) Reset() {
	*x = AdsbVehicle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transponder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdsbVehicle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdsbVehicle) ProtoMessage() {}

func (x *AdsbVehicle) ProtoReflect() protoreflect.Message {
	mi := &file_transponder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdsbVehicle.ProtoReflect.Descriptor instead.
func (*AdsbVehicle) Descriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{4}
}

func (x *AdsbVehicle) GetIcaoAddress() uint32 {
	if x != nil {
		return x.IcaoAddress
	}
	return 0
}

func (x *AdsbVehicle) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *AdsbVehicle) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *AdsbVehicle) GetAltitudeType() AdsbAltitudeType {
	if x != nil {
		return x.AltitudeType
	}
	return AdsbAltitudeType_ADSB_ALTITUDE_TYPE_PRESSURE_QNH
}

func (x *AdsbVehicle) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

func (x *AdsbVehicle) GetHeadingDeg() float32 {
	if x != nil {
		return x.HeadingDeg
	}
	return 0
}

func (x *AdsbVehicle) GetHorizontalVelocityMS() float32 {
	if x != nil {
		return x.HorizontalVelocityMS
	}
	return 0
}

func (x *AdsbVehicle) GetVerticalVelocityMS() float32 {
	if x != nil {
		return x.VerticalVelocityMS
	}
	return 0
}

func (x *AdsbVehicle) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *AdsbVehicle) GetEmitterType() AdsbEmitterType {
	if x != nil {
		return x.EmitterType
	}
	return AdsbEmitterType_ADSB_EMITTER_TYPE_NO_INFO
}

func (x *AdsbVehicle) GetSquawk() uint32 {
	if x != nil {
		return x.Squawk
	}
	return 0
}

func (x *AdsbVehicle) GetTslcS() uint32 {
	if x != nil {
		return x.TslcS
	}
	return 0
}

// Result type.
type TransponderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    TransponderResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.transponder.TransponderResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string                   `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                                // Human-readable English string describing the result
}

func (x *TransponderResult) Reset() {
	*x = TransponderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transponder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransponderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransponderResult) ProtoMessage() {}

func (x *TransponderResult) ProtoReflect() protoreflect.Message {
	mi := &file_transponder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransponderResult.ProtoReflect.Descriptor instead.
func (*TransponderResult) Descriptor() ([]byte, []int) {
	return file_transponder_proto_rawDescGZIP(), []int{5}
}

func (x *TransponderResult) GetResult() TransponderResult_Result {
	if x != nil {
		return x.Result
	}
	return TransponderResult_RESULT_UNKNOWN
}

func (x *TransponderResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_transponder_proto protoreflect.FileDescriptor

var file_transponder_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x13, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x73, 0x62, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x7a,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x65, 0x48, 0x7a, 0x22, 0x76,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x99, 0x04, 0x0a, 0x0b, 0x41, 0x64, 0x73, 0x62, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x63,
	0x61, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65,
	0x67, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x73, 0x62, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4d,
	0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x67, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x5f, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x53, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x5f,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x65, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x73, 0x62, 0x45, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x73, 0x6c, 0x63, 0x5f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x73, 0x6c,
	0x63, 0x53, 0x22, 0xa2, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x72, 0x22, 0xa3, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e,
	0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x2a, 0xad, 0x05, 0x0a, 0x0f, 0x41, 0x64, 0x73, 0x62,
	0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44,
	0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x53, 0x42, 0x5f,
	0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41,
	0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49,
	0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10,
	0x03, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x56, 0x4f, 0x52, 0x54,
	0x45, 0x58, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44,
	0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x56, 0x59, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x53, 0x42, 0x5f,
	0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x56, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x52, 0x41, 0x46, 0x54, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c,
	0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x4c, 0x49, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x49, 0x52, 0x10, 0x0a, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x43, 0x48, 0x55, 0x54, 0x45, 0x10, 0x0b,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x32, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45,
	0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x41, 0x56, 0x10,
	0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x0f, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x53, 0x53, 0x47, 0x49, 0x4e, 0x45, 0x44, 0x33, 0x10,
	0x10, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x53, 0x55, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x44,
	0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10,
	0x12, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x53,
	0x54, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x13, 0x2a, 0x59, 0x0a, 0x10, 0x41, 0x64, 0x73, 0x62, 0x41,
	0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x41,
	0x44, 0x53, 0x42, 0x5f, 0x41, 0x4c, 0x54, 0x49, 0x54, 0x55, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x51, 0x4e, 0x48, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x44, 0x53, 0x42, 0x5f, 0x41, 0x4c, 0x54, 0x49, 0x54, 0x55, 0x44,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x10, 0x01, 0x32, 0x91, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x14, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x33, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x31, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x21, 0x42, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0d, 0x2e, 0x3b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_transponder_proto_rawDescOnce sync.Once
	file_transponder_proto_rawDescData = file_transponder_proto_rawDesc
)

func file_transponder_proto_rawDescGZIP() []byte {
	file_transponder_proto_rawDescOnce.Do(func() {
		file_transponder_proto_rawDescData = protoimpl.X.CompressGZIP(file_transponder_proto_rawDescData)
	})
	return file_transponder_proto_rawDescData
}

var file_transponder_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_transponder_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_transponder_proto_goTypes = []any{
	(AdsbEmitterType)(0),                // 0: mavsdk.rpc.transponder.AdsbEmitterType
	(AdsbAltitudeType)(0),               // 1: mavsdk.rpc.transponder.AdsbAltitudeType
	(TransponderResult_Result)(0),       // 2: mavsdk.rpc.transponder.TransponderResult.Result
	(*SubscribeTransponderRequest)(nil), // 3: mavsdk.rpc.transponder.SubscribeTransponderRequest
	(*TransponderResponse)(nil),         // 4: mavsdk.rpc.transponder.TransponderResponse
	(*SetRateTransponderRequest)(nil),   // 5: mavsdk.rpc.transponder.SetRateTransponderRequest
	(*SetRateTransponderResponse)(nil),  // 6: mavsdk.rpc.transponder.SetRateTransponderResponse
	(*AdsbVehicle)(nil),                 // 7: mavsdk.rpc.transponder.AdsbVehicle
	(*TransponderResult)(nil),           // 8: mavsdk.rpc.transponder.TransponderResult
}
var file_transponder_proto_depIdxs = []int32{
	7, // 0: mavsdk.rpc.transponder.TransponderResponse.transponder:type_name -> mavsdk.rpc.transponder.AdsbVehicle
	8, // 1: mavsdk.rpc.transponder.SetRateTransponderResponse.transponder_result:type_name -> mavsdk.rpc.transponder.TransponderResult
	1, // 2: mavsdk.rpc.transponder.AdsbVehicle.altitude_type:type_name -> mavsdk.rpc.transponder.AdsbAltitudeType
	0, // 3: mavsdk.rpc.transponder.AdsbVehicle.emitter_type:type_name -> mavsdk.rpc.transponder.AdsbEmitterType
	2, // 4: mavsdk.rpc.transponder.TransponderResult.result:type_name -> mavsdk.rpc.transponder.TransponderResult.Result
	3, // 5: mavsdk.rpc.transponder.TransponderService.SubscribeTransponder:input_type -> mavsdk.rpc.transponder.SubscribeTransponderRequest
	5, // 6: mavsdk.rpc.transponder.TransponderService.SetRateTransponder:input_type -> mavsdk.rpc.transponder.SetRateTransponderRequest
	4, // 7: mavsdk.rpc.transponder.TransponderService.SubscribeTransponder:output_type -> mavsdk.rpc.transponder.TransponderResponse
	6, // 8: mavsdk.rpc.transponder.TransponderService.SetRateTransponder:output_type -> mavsdk.rpc.transponder.SetRateTransponderResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_transponder_proto_init() }
func file_transponder_proto_init() {
	if File_transponder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transponder_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeTransponderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transponder_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TransponderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transponder_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SetRateTransponderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transponder_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SetRateTransponderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transponder_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AdsbVehicle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transponder_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TransponderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transponder_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transponder_proto_goTypes,
		DependencyIndexes: file_transponder_proto_depIdxs,
		EnumInfos:         file_transponder_proto_enumTypes,
		MessageInfos:      file_transponder_proto_msgTypes,
	}.Build()
	File_transponder_proto = out.File
	file_transponder_proto_rawDesc = nil
	file_transponder_proto_goTypes = nil
	file_transponder_proto_depIdxs = nil
}
