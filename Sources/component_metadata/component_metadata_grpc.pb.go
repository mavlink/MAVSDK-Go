// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: component_metadata.proto

package component_metadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComponentMetadataService_RequestComponent_FullMethodName           = "/mavsdk.rpc.component_metadata.ComponentMetadataService/RequestComponent"
	ComponentMetadataService_RequestAutopilotComponent_FullMethodName  = "/mavsdk.rpc.component_metadata.ComponentMetadataService/RequestAutopilotComponent"
	ComponentMetadataService_SubscribeMetadataAvailable_FullMethodName = "/mavsdk.rpc.component_metadata.ComponentMetadataService/SubscribeMetadataAvailable"
	ComponentMetadataService_GetMetadata_FullMethodName                = "/mavsdk.rpc.component_metadata.ComponentMetadataService/GetMetadata"
)

// ComponentMetadataServiceClient is the client API for ComponentMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Access component metadata json definitions, such as parameters.
type ComponentMetadataServiceClient interface {
	// Request metadata from a specific component. This is used to start requesting metadata from a component.
	// The metadata can later be accessed via subscription (see below) or GetMetadata.
	RequestComponent(ctx context.Context, in *RequestComponentRequest, opts ...grpc.CallOption) (*RequestComponentResponse, error)
	// Request metadata from the autopilot component. This is used to start requesting metadata from the autopilot.
	// The metadata can later be accessed via subscription (see below) or GetMetadata.
	RequestAutopilotComponent(ctx context.Context, in *RequestAutopilotComponentRequest, opts ...grpc.CallOption) (*RequestAutopilotComponentResponse, error)
	// Register a callback that gets called when metadata is available
	SubscribeMetadataAvailable(ctx context.Context, in *SubscribeMetadataAvailableRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MetadataAvailableResponse], error)
	// Access metadata. This can be used if you know the metadata is available already, otherwise use
	// the subscription to get notified when it becomes available.
	GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error)
}

type componentMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentMetadataServiceClient(cc grpc.ClientConnInterface) ComponentMetadataServiceClient {
	return &componentMetadataServiceClient{cc}
}

func (c *componentMetadataServiceClient) RequestComponent(ctx context.Context, in *RequestComponentRequest, opts ...grpc.CallOption) (*RequestComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestComponentResponse)
	err := c.cc.Invoke(ctx, ComponentMetadataService_RequestComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentMetadataServiceClient) RequestAutopilotComponent(ctx context.Context, in *RequestAutopilotComponentRequest, opts ...grpc.CallOption) (*RequestAutopilotComponentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAutopilotComponentResponse)
	err := c.cc.Invoke(ctx, ComponentMetadataService_RequestAutopilotComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentMetadataServiceClient) SubscribeMetadataAvailable(ctx context.Context, in *SubscribeMetadataAvailableRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MetadataAvailableResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ComponentMetadataService_ServiceDesc.Streams[0], ComponentMetadataService_SubscribeMetadataAvailable_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeMetadataAvailableRequest, MetadataAvailableResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ComponentMetadataService_SubscribeMetadataAvailableClient = grpc.ServerStreamingClient[MetadataAvailableResponse]

func (c *componentMetadataServiceClient) GetMetadata(ctx context.Context, in *GetMetadataRequest, opts ...grpc.CallOption) (*GetMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetadataResponse)
	err := c.cc.Invoke(ctx, ComponentMetadataService_GetMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentMetadataServiceServer is the server API for ComponentMetadataService service.
// All implementations must embed UnimplementedComponentMetadataServiceServer
// for forward compatibility.
//
// Access component metadata json definitions, such as parameters.
type ComponentMetadataServiceServer interface {
	// Request metadata from a specific component. This is used to start requesting metadata from a component.
	// The metadata can later be accessed via subscription (see below) or GetMetadata.
	RequestComponent(context.Context, *RequestComponentRequest) (*RequestComponentResponse, error)
	// Request metadata from the autopilot component. This is used to start requesting metadata from the autopilot.
	// The metadata can later be accessed via subscription (see below) or GetMetadata.
	RequestAutopilotComponent(context.Context, *RequestAutopilotComponentRequest) (*RequestAutopilotComponentResponse, error)
	// Register a callback that gets called when metadata is available
	SubscribeMetadataAvailable(*SubscribeMetadataAvailableRequest, grpc.ServerStreamingServer[MetadataAvailableResponse]) error
	// Access metadata. This can be used if you know the metadata is available already, otherwise use
	// the subscription to get notified when it becomes available.
	GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error)
	mustEmbedUnimplementedComponentMetadataServiceServer()
}

// UnimplementedComponentMetadataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComponentMetadataServiceServer struct{}

func (UnimplementedComponentMetadataServiceServer) RequestComponent(context.Context, *RequestComponentRequest) (*RequestComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestComponent not implemented")
}
func (UnimplementedComponentMetadataServiceServer) RequestAutopilotComponent(context.Context, *RequestAutopilotComponentRequest) (*RequestAutopilotComponentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAutopilotComponent not implemented")
}
func (UnimplementedComponentMetadataServiceServer) SubscribeMetadataAvailable(*SubscribeMetadataAvailableRequest, grpc.ServerStreamingServer[MetadataAvailableResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMetadataAvailable not implemented")
}
func (UnimplementedComponentMetadataServiceServer) GetMetadata(context.Context, *GetMetadataRequest) (*GetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedComponentMetadataServiceServer) mustEmbedUnimplementedComponentMetadataServiceServer() {
}
func (UnimplementedComponentMetadataServiceServer) testEmbeddedByValue() {}

// UnsafeComponentMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentMetadataServiceServer will
// result in compilation errors.
type UnsafeComponentMetadataServiceServer interface {
	mustEmbedUnimplementedComponentMetadataServiceServer()
}

func RegisterComponentMetadataServiceServer(s grpc.ServiceRegistrar, srv ComponentMetadataServiceServer) {
	// If the following call pancis, it indicates UnimplementedComponentMetadataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComponentMetadataService_ServiceDesc, srv)
}

func _ComponentMetadataService_RequestComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentMetadataServiceServer).RequestComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentMetadataService_RequestComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentMetadataServiceServer).RequestComponent(ctx, req.(*RequestComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentMetadataService_RequestAutopilotComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAutopilotComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentMetadataServiceServer).RequestAutopilotComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentMetadataService_RequestAutopilotComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentMetadataServiceServer).RequestAutopilotComponent(ctx, req.(*RequestAutopilotComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentMetadataService_SubscribeMetadataAvailable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeMetadataAvailableRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComponentMetadataServiceServer).SubscribeMetadataAvailable(m, &grpc.GenericServerStream[SubscribeMetadataAvailableRequest, MetadataAvailableResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ComponentMetadataService_SubscribeMetadataAvailableServer = grpc.ServerStreamingServer[MetadataAvailableResponse]

func _ComponentMetadataService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentMetadataServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComponentMetadataService_GetMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentMetadataServiceServer).GetMetadata(ctx, req.(*GetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentMetadataService_ServiceDesc is the grpc.ServiceDesc for ComponentMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.component_metadata.ComponentMetadataService",
	HandlerType: (*ComponentMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestComponent",
			Handler:    _ComponentMetadataService_RequestComponent_Handler,
		},
		{
			MethodName: "RequestAutopilotComponent",
			Handler:    _ComponentMetadataService_RequestAutopilotComponent_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _ComponentMetadataService_GetMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMetadataAvailable",
			Handler:       _ComponentMetadataService_SubscribeMetadataAvailable_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "component_metadata.proto",
}
