// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: telemetry_server.proto

package telemetry_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GPS fix type.
type FixType int32

const (
	FixType_FIX_TYPE_NO_GPS    FixType = 0 // No GPS connected
	FixType_FIX_TYPE_NO_FIX    FixType = 1 // No position information, GPS is connected
	FixType_FIX_TYPE_FIX_2D    FixType = 2 // 2D position
	FixType_FIX_TYPE_FIX_3D    FixType = 3 // 3D position
	FixType_FIX_TYPE_FIX_DGPS  FixType = 4 // DGPS/SBAS aided 3D position
	FixType_FIX_TYPE_RTK_FLOAT FixType = 5 // RTK float, 3D position
	FixType_FIX_TYPE_RTK_FIXED FixType = 6 // RTK Fixed, 3D position
)

// Enum value maps for FixType.
var (
	FixType_name = map[int32]string{
		0: "FIX_TYPE_NO_GPS",
		1: "FIX_TYPE_NO_FIX",
		2: "FIX_TYPE_FIX_2D",
		3: "FIX_TYPE_FIX_3D",
		4: "FIX_TYPE_FIX_DGPS",
		5: "FIX_TYPE_RTK_FLOAT",
		6: "FIX_TYPE_RTK_FIXED",
	}
	FixType_value = map[string]int32{
		"FIX_TYPE_NO_GPS":    0,
		"FIX_TYPE_NO_FIX":    1,
		"FIX_TYPE_FIX_2D":    2,
		"FIX_TYPE_FIX_3D":    3,
		"FIX_TYPE_FIX_DGPS":  4,
		"FIX_TYPE_RTK_FLOAT": 5,
		"FIX_TYPE_RTK_FIXED": 6,
	}
)

func (x FixType) Enum() *FixType {
	p := new(FixType)
	*p = x
	return p
}

func (x FixType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixType) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_server_proto_enumTypes[0].Descriptor()
}

func (FixType) Type() protoreflect.EnumType {
	return &file_telemetry_server_proto_enumTypes[0]
}

func (x FixType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixType.Descriptor instead.
func (FixType) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{0}
}

// Maps to MAV_VTOL_STATE
type VtolState int32

const (
	VtolState_VTOL_STATE_UNDEFINED        VtolState = 0 // Not VTOL
	VtolState_VTOL_STATE_TRANSITION_TO_FW VtolState = 1 // Transitioning to fixed-wing
	VtolState_VTOL_STATE_TRANSITION_TO_MC VtolState = 2 // Transitioning to multi-copter
	VtolState_VTOL_STATE_MC               VtolState = 3 // Multi-copter
	VtolState_VTOL_STATE_FW               VtolState = 4 // Fixed-wing
)

// Enum value maps for VtolState.
var (
	VtolState_name = map[int32]string{
		0: "VTOL_STATE_UNDEFINED",
		1: "VTOL_STATE_TRANSITION_TO_FW",
		2: "VTOL_STATE_TRANSITION_TO_MC",
		3: "VTOL_STATE_MC",
		4: "VTOL_STATE_FW",
	}
	VtolState_value = map[string]int32{
		"VTOL_STATE_UNDEFINED":        0,
		"VTOL_STATE_TRANSITION_TO_FW": 1,
		"VTOL_STATE_TRANSITION_TO_MC": 2,
		"VTOL_STATE_MC":               3,
		"VTOL_STATE_FW":               4,
	}
)

func (x VtolState) Enum() *VtolState {
	p := new(VtolState)
	*p = x
	return p
}

func (x VtolState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VtolState) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_server_proto_enumTypes[1].Descriptor()
}

func (VtolState) Type() protoreflect.EnumType {
	return &file_telemetry_server_proto_enumTypes[1]
}

func (x VtolState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VtolState.Descriptor instead.
func (VtolState) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{1}
}

// Status types.
type StatusTextType int32

const (
	StatusTextType_STATUS_TEXT_TYPE_DEBUG     StatusTextType = 0 // Debug
	StatusTextType_STATUS_TEXT_TYPE_INFO      StatusTextType = 1 // Information
	StatusTextType_STATUS_TEXT_TYPE_NOTICE    StatusTextType = 2 // Notice
	StatusTextType_STATUS_TEXT_TYPE_WARNING   StatusTextType = 3 // Warning
	StatusTextType_STATUS_TEXT_TYPE_ERROR     StatusTextType = 4 // Error
	StatusTextType_STATUS_TEXT_TYPE_CRITICAL  StatusTextType = 5 // Critical
	StatusTextType_STATUS_TEXT_TYPE_ALERT     StatusTextType = 6 // Alert
	StatusTextType_STATUS_TEXT_TYPE_EMERGENCY StatusTextType = 7 // Emergency
)

// Enum value maps for StatusTextType.
var (
	StatusTextType_name = map[int32]string{
		0: "STATUS_TEXT_TYPE_DEBUG",
		1: "STATUS_TEXT_TYPE_INFO",
		2: "STATUS_TEXT_TYPE_NOTICE",
		3: "STATUS_TEXT_TYPE_WARNING",
		4: "STATUS_TEXT_TYPE_ERROR",
		5: "STATUS_TEXT_TYPE_CRITICAL",
		6: "STATUS_TEXT_TYPE_ALERT",
		7: "STATUS_TEXT_TYPE_EMERGENCY",
	}
	StatusTextType_value = map[string]int32{
		"STATUS_TEXT_TYPE_DEBUG":     0,
		"STATUS_TEXT_TYPE_INFO":      1,
		"STATUS_TEXT_TYPE_NOTICE":    2,
		"STATUS_TEXT_TYPE_WARNING":   3,
		"STATUS_TEXT_TYPE_ERROR":     4,
		"STATUS_TEXT_TYPE_CRITICAL":  5,
		"STATUS_TEXT_TYPE_ALERT":     6,
		"STATUS_TEXT_TYPE_EMERGENCY": 7,
	}
)

func (x StatusTextType) Enum() *StatusTextType {
	p := new(StatusTextType)
	*p = x
	return p
}

func (x StatusTextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusTextType) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_server_proto_enumTypes[2].Descriptor()
}

func (StatusTextType) Type() protoreflect.EnumType {
	return &file_telemetry_server_proto_enumTypes[2]
}

func (x StatusTextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusTextType.Descriptor instead.
func (StatusTextType) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{2}
}

// Landed State enumeration.
type LandedState int32

const (
	LandedState_LANDED_STATE_UNKNOWN    LandedState = 0 // Landed state is unknown
	LandedState_LANDED_STATE_ON_GROUND  LandedState = 1 // The vehicle is on the ground
	LandedState_LANDED_STATE_IN_AIR     LandedState = 2 // The vehicle is in the air
	LandedState_LANDED_STATE_TAKING_OFF LandedState = 3 // The vehicle is taking off
	LandedState_LANDED_STATE_LANDING    LandedState = 4 // The vehicle is landing
)

// Enum value maps for LandedState.
var (
	LandedState_name = map[int32]string{
		0: "LANDED_STATE_UNKNOWN",
		1: "LANDED_STATE_ON_GROUND",
		2: "LANDED_STATE_IN_AIR",
		3: "LANDED_STATE_TAKING_OFF",
		4: "LANDED_STATE_LANDING",
	}
	LandedState_value = map[string]int32{
		"LANDED_STATE_UNKNOWN":    0,
		"LANDED_STATE_ON_GROUND":  1,
		"LANDED_STATE_IN_AIR":     2,
		"LANDED_STATE_TAKING_OFF": 3,
		"LANDED_STATE_LANDING":    4,
	}
)

func (x LandedState) Enum() *LandedState {
	p := new(LandedState)
	*p = x
	return p
}

func (x LandedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LandedState) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_server_proto_enumTypes[3].Descriptor()
}

func (LandedState) Type() protoreflect.EnumType {
	return &file_telemetry_server_proto_enumTypes[3]
}

func (x LandedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LandedState.Descriptor instead.
func (LandedState) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{3}
}

// Mavlink frame id
type Odometry_MavFrame int32

const (
	Odometry_MAV_FRAME_UNDEF      Odometry_MavFrame = 0  // Frame is undefined.
	Odometry_MAV_FRAME_BODY_NED   Odometry_MavFrame = 8  // Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
	Odometry_MAV_FRAME_VISION_NED Odometry_MavFrame = 16 // Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: north, y: east, z: down).
	Odometry_MAV_FRAME_ESTIM_NED  Odometry_MavFrame = 18 // Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: north, y: east, z: down).
)

// Enum value maps for Odometry_MavFrame.
var (
	Odometry_MavFrame_name = map[int32]string{
		0:  "MAV_FRAME_UNDEF",
		8:  "MAV_FRAME_BODY_NED",
		16: "MAV_FRAME_VISION_NED",
		18: "MAV_FRAME_ESTIM_NED",
	}
	Odometry_MavFrame_value = map[string]int32{
		"MAV_FRAME_UNDEF":      0,
		"MAV_FRAME_BODY_NED":   8,
		"MAV_FRAME_VISION_NED": 16,
		"MAV_FRAME_ESTIM_NED":  18,
	}
)

func (x Odometry_MavFrame) Enum() *Odometry_MavFrame {
	p := new(Odometry_MavFrame)
	*p = x
	return p
}

func (x Odometry_MavFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Odometry_MavFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_server_proto_enumTypes[4].Descriptor()
}

func (Odometry_MavFrame) Type() protoreflect.EnumType {
	return &file_telemetry_server_proto_enumTypes[4]
}

func (x Odometry_MavFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Odometry_MavFrame.Descriptor instead.
func (Odometry_MavFrame) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{52, 0}
}

// Possible results returned for telemetry requests.
type TelemetryServerResult_Result int32

const (
	TelemetryServerResult_RESULT_UNKNOWN          TelemetryServerResult_Result = 0 // Unknown result
	TelemetryServerResult_RESULT_SUCCESS          TelemetryServerResult_Result = 1 // Success: the telemetry command was accepted by the vehicle
	TelemetryServerResult_RESULT_NO_SYSTEM        TelemetryServerResult_Result = 2 // No system connected
	TelemetryServerResult_RESULT_CONNECTION_ERROR TelemetryServerResult_Result = 3 // Connection error
	TelemetryServerResult_RESULT_BUSY             TelemetryServerResult_Result = 4 // Vehicle is busy
	TelemetryServerResult_RESULT_COMMAND_DENIED   TelemetryServerResult_Result = 5 // Command refused by vehicle
	TelemetryServerResult_RESULT_TIMEOUT          TelemetryServerResult_Result = 6 // Request timed out
	TelemetryServerResult_RESULT_UNSUPPORTED      TelemetryServerResult_Result = 7 // Request not supported
)

// Enum value maps for TelemetryServerResult_Result.
var (
	TelemetryServerResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_NO_SYSTEM",
		3: "RESULT_CONNECTION_ERROR",
		4: "RESULT_BUSY",
		5: "RESULT_COMMAND_DENIED",
		6: "RESULT_TIMEOUT",
		7: "RESULT_UNSUPPORTED",
	}
	TelemetryServerResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":          0,
		"RESULT_SUCCESS":          1,
		"RESULT_NO_SYSTEM":        2,
		"RESULT_CONNECTION_ERROR": 3,
		"RESULT_BUSY":             4,
		"RESULT_COMMAND_DENIED":   5,
		"RESULT_TIMEOUT":          6,
		"RESULT_UNSUPPORTED":      7,
	}
)

func (x TelemetryServerResult_Result) Enum() *TelemetryServerResult_Result {
	p := new(TelemetryServerResult_Result)
	*p = x
	return p
}

func (x TelemetryServerResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryServerResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_server_proto_enumTypes[5].Descriptor()
}

func (TelemetryServerResult_Result) Type() protoreflect.EnumType {
	return &file_telemetry_server_proto_enumTypes[5]
}

func (x TelemetryServerResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryServerResult_Result.Descriptor instead.
func (TelemetryServerResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{64, 0}
}

type PublishPositionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      *Position              `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`                          // The next position
	VelocityNed   *VelocityNed           `protobuf:"bytes,2,opt,name=velocity_ned,json=velocityNed,proto3" json:"velocity_ned,omitempty"` // The next velocity (NED)
	Heading       *Heading               `protobuf:"bytes,3,opt,name=heading,proto3" json:"heading,omitempty"`                            // Heading (yaw) in degrees
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishPositionRequest) Reset() {
	*x = PublishPositionRequest{}
	mi := &file_telemetry_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishPositionRequest) ProtoMessage() {}

func (x *PublishPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishPositionRequest.ProtoReflect.Descriptor instead.
func (*PublishPositionRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{0}
}

func (x *PublishPositionRequest) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PublishPositionRequest) GetVelocityNed() *VelocityNed {
	if x != nil {
		return x.VelocityNed
	}
	return nil
}

func (x *PublishPositionRequest) GetHeading() *Heading {
	if x != nil {
		return x.Heading
	}
	return nil
}

type PublishHomeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Home          *Position              `protobuf:"bytes,1,opt,name=home,proto3" json:"home,omitempty"` // The next home position
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishHomeRequest) Reset() {
	*x = PublishHomeRequest{}
	mi := &file_telemetry_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishHomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishHomeRequest) ProtoMessage() {}

func (x *PublishHomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishHomeRequest.ProtoReflect.Descriptor instead.
func (*PublishHomeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{1}
}

func (x *PublishHomeRequest) GetHome() *Position {
	if x != nil {
		return x.Home
	}
	return nil
}

type PublishSysStatusRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Battery          *Battery               `protobuf:"bytes,1,opt,name=battery,proto3" json:"battery,omitempty"`                                              // The next 'battery' state
	RcReceiverStatus bool                   `protobuf:"varint,2,opt,name=rc_receiver_status,json=rcReceiverStatus,proto3" json:"rc_receiver_status,omitempty"` // rc receiver status
	GyroStatus       bool                   `protobuf:"varint,3,opt,name=gyro_status,json=gyroStatus,proto3" json:"gyro_status,omitempty"`
	AccelStatus      bool                   `protobuf:"varint,4,opt,name=accel_status,json=accelStatus,proto3" json:"accel_status,omitempty"`
	MagStatus        bool                   `protobuf:"varint,5,opt,name=mag_status,json=magStatus,proto3" json:"mag_status,omitempty"`
	GpsStatus        bool                   `protobuf:"varint,6,opt,name=gps_status,json=gpsStatus,proto3" json:"gps_status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PublishSysStatusRequest) Reset() {
	*x = PublishSysStatusRequest{}
	mi := &file_telemetry_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishSysStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishSysStatusRequest) ProtoMessage() {}

func (x *PublishSysStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishSysStatusRequest.ProtoReflect.Descriptor instead.
func (*PublishSysStatusRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{2}
}

func (x *PublishSysStatusRequest) GetBattery() *Battery {
	if x != nil {
		return x.Battery
	}
	return nil
}

func (x *PublishSysStatusRequest) GetRcReceiverStatus() bool {
	if x != nil {
		return x.RcReceiverStatus
	}
	return false
}

func (x *PublishSysStatusRequest) GetGyroStatus() bool {
	if x != nil {
		return x.GyroStatus
	}
	return false
}

func (x *PublishSysStatusRequest) GetAccelStatus() bool {
	if x != nil {
		return x.AccelStatus
	}
	return false
}

func (x *PublishSysStatusRequest) GetMagStatus() bool {
	if x != nil {
		return x.MagStatus
	}
	return false
}

func (x *PublishSysStatusRequest) GetGpsStatus() bool {
	if x != nil {
		return x.GpsStatus
	}
	return false
}

type PublishExtendedSysStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VtolState     VtolState              `protobuf:"varint,1,opt,name=vtol_state,json=vtolState,proto3,enum=mavsdk.rpc.telemetry_server.VtolState" json:"vtol_state,omitempty"`
	LandedState   LandedState            `protobuf:"varint,2,opt,name=landed_state,json=landedState,proto3,enum=mavsdk.rpc.telemetry_server.LandedState" json:"landed_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishExtendedSysStateRequest) Reset() {
	*x = PublishExtendedSysStateRequest{}
	mi := &file_telemetry_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishExtendedSysStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishExtendedSysStateRequest) ProtoMessage() {}

func (x *PublishExtendedSysStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishExtendedSysStateRequest.ProtoReflect.Descriptor instead.
func (*PublishExtendedSysStateRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{3}
}

func (x *PublishExtendedSysStateRequest) GetVtolState() VtolState {
	if x != nil {
		return x.VtolState
	}
	return VtolState_VTOL_STATE_UNDEFINED
}

func (x *PublishExtendedSysStateRequest) GetLandedState() LandedState {
	if x != nil {
		return x.LandedState
	}
	return LandedState_LANDED_STATE_UNKNOWN
}

type PublishInAirRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsInAir       bool                   `protobuf:"varint,1,opt,name=is_in_air,json=isInAir,proto3" json:"is_in_air,omitempty"` // The next 'in-air' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishInAirRequest) Reset() {
	*x = PublishInAirRequest{}
	mi := &file_telemetry_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishInAirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishInAirRequest) ProtoMessage() {}

func (x *PublishInAirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishInAirRequest.ProtoReflect.Descriptor instead.
func (*PublishInAirRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{4}
}

func (x *PublishInAirRequest) GetIsInAir() bool {
	if x != nil {
		return x.IsInAir
	}
	return false
}

type PublishLandedStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LandedState   LandedState            `protobuf:"varint,1,opt,name=landed_state,json=landedState,proto3,enum=mavsdk.rpc.telemetry_server.LandedState" json:"landed_state,omitempty"` // The next 'landed' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishLandedStateRequest) Reset() {
	*x = PublishLandedStateRequest{}
	mi := &file_telemetry_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishLandedStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishLandedStateRequest) ProtoMessage() {}

func (x *PublishLandedStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishLandedStateRequest.ProtoReflect.Descriptor instead.
func (*PublishLandedStateRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{5}
}

func (x *PublishLandedStateRequest) GetLandedState() LandedState {
	if x != nil {
		return x.LandedState
	}
	return LandedState_LANDED_STATE_UNKNOWN
}

type PublishRawGpsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawGps        *RawGps                `protobuf:"bytes,1,opt,name=raw_gps,json=rawGps,proto3" json:"raw_gps,omitempty"`    // The next 'Raw GPS' state. Warning: this is an advanced feature, use `Position` updates to get the location of the drone!
	GpsInfo       *GpsInfo               `protobuf:"bytes,2,opt,name=gps_info,json=gpsInfo,proto3" json:"gps_info,omitempty"` // The next 'GPS info' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRawGpsRequest) Reset() {
	*x = PublishRawGpsRequest{}
	mi := &file_telemetry_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRawGpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRawGpsRequest) ProtoMessage() {}

func (x *PublishRawGpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRawGpsRequest.ProtoReflect.Descriptor instead.
func (*PublishRawGpsRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{6}
}

func (x *PublishRawGpsRequest) GetRawGps() *RawGps {
	if x != nil {
		return x.RawGps
	}
	return nil
}

func (x *PublishRawGpsRequest) GetGpsInfo() *GpsInfo {
	if x != nil {
		return x.GpsInfo
	}
	return nil
}

type PublishBatteryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Battery       *Battery               `protobuf:"bytes,1,opt,name=battery,proto3" json:"battery,omitempty"` // The next 'battery' state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishBatteryRequest) Reset() {
	*x = PublishBatteryRequest{}
	mi := &file_telemetry_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishBatteryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishBatteryRequest) ProtoMessage() {}

func (x *PublishBatteryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishBatteryRequest.ProtoReflect.Descriptor instead.
func (*PublishBatteryRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{7}
}

func (x *PublishBatteryRequest) GetBattery() *Battery {
	if x != nil {
		return x.Battery
	}
	return nil
}

type PublishRcStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RcStatus      *RcStatus              `protobuf:"bytes,1,opt,name=rc_status,json=rcStatus,proto3" json:"rc_status,omitempty"` // The next RC status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRcStatusRequest) Reset() {
	*x = PublishRcStatusRequest{}
	mi := &file_telemetry_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRcStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRcStatusRequest) ProtoMessage() {}

func (x *PublishRcStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRcStatusRequest.ProtoReflect.Descriptor instead.
func (*PublishRcStatusRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{8}
}

func (x *PublishRcStatusRequest) GetRcStatus() *RcStatus {
	if x != nil {
		return x.RcStatus
	}
	return nil
}

type PublishStatusTextRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusText    *StatusText            `protobuf:"bytes,1,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"` // The next 'status text'
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishStatusTextRequest) Reset() {
	*x = PublishStatusTextRequest{}
	mi := &file_telemetry_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishStatusTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishStatusTextRequest) ProtoMessage() {}

func (x *PublishStatusTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishStatusTextRequest.ProtoReflect.Descriptor instead.
func (*PublishStatusTextRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{9}
}

func (x *PublishStatusTextRequest) GetStatusText() *StatusText {
	if x != nil {
		return x.StatusText
	}
	return nil
}

type PublishOdometryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Odometry      *Odometry              `protobuf:"bytes,1,opt,name=odometry,proto3" json:"odometry,omitempty"` // The next odometry status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishOdometryRequest) Reset() {
	*x = PublishOdometryRequest{}
	mi := &file_telemetry_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishOdometryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishOdometryRequest) ProtoMessage() {}

func (x *PublishOdometryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishOdometryRequest.ProtoReflect.Descriptor instead.
func (*PublishOdometryRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{10}
}

func (x *PublishOdometryRequest) GetOdometry() *Odometry {
	if x != nil {
		return x.Odometry
	}
	return nil
}

type PublishPositionVelocityNedRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PositionVelocityNed *PositionVelocityNed   `protobuf:"bytes,1,opt,name=position_velocity_ned,json=positionVelocityNed,proto3" json:"position_velocity_ned,omitempty"` // The next position and velocity status
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PublishPositionVelocityNedRequest) Reset() {
	*x = PublishPositionVelocityNedRequest{}
	mi := &file_telemetry_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishPositionVelocityNedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishPositionVelocityNedRequest) ProtoMessage() {}

func (x *PublishPositionVelocityNedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishPositionVelocityNedRequest.ProtoReflect.Descriptor instead.
func (*PublishPositionVelocityNedRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{11}
}

func (x *PublishPositionVelocityNedRequest) GetPositionVelocityNed() *PositionVelocityNed {
	if x != nil {
		return x.PositionVelocityNed
	}
	return nil
}

type PublishGroundTruthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroundTruth   *GroundTruth           `protobuf:"bytes,1,opt,name=ground_truth,json=groundTruth,proto3" json:"ground_truth,omitempty"` // Ground truth position information available in simulation
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishGroundTruthRequest) Reset() {
	*x = PublishGroundTruthRequest{}
	mi := &file_telemetry_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishGroundTruthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishGroundTruthRequest) ProtoMessage() {}

func (x *PublishGroundTruthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishGroundTruthRequest.ProtoReflect.Descriptor instead.
func (*PublishGroundTruthRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{12}
}

func (x *PublishGroundTruthRequest) GetGroundTruth() *GroundTruth {
	if x != nil {
		return x.GroundTruth
	}
	return nil
}

type PublishImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imu           *Imu                   `protobuf:"bytes,1,opt,name=imu,proto3" json:"imu,omitempty"` // The next IMU status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishImuRequest) Reset() {
	*x = PublishImuRequest{}
	mi := &file_telemetry_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishImuRequest) ProtoMessage() {}

func (x *PublishImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishImuRequest.ProtoReflect.Descriptor instead.
func (*PublishImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{13}
}

func (x *PublishImuRequest) GetImu() *Imu {
	if x != nil {
		return x.Imu
	}
	return nil
}

type PublishScaledImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imu           *Imu                   `protobuf:"bytes,1,opt,name=imu,proto3" json:"imu,omitempty"` // The next scaled IMU status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishScaledImuRequest) Reset() {
	*x = PublishScaledImuRequest{}
	mi := &file_telemetry_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishScaledImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishScaledImuRequest) ProtoMessage() {}

func (x *PublishScaledImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishScaledImuRequest.ProtoReflect.Descriptor instead.
func (*PublishScaledImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{14}
}

func (x *PublishScaledImuRequest) GetImu() *Imu {
	if x != nil {
		return x.Imu
	}
	return nil
}

type PublishRawImuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imu           *Imu                   `protobuf:"bytes,1,opt,name=imu,proto3" json:"imu,omitempty"` // The next raw IMU status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRawImuRequest) Reset() {
	*x = PublishRawImuRequest{}
	mi := &file_telemetry_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRawImuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRawImuRequest) ProtoMessage() {}

func (x *PublishRawImuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRawImuRequest.ProtoReflect.Descriptor instead.
func (*PublishRawImuRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{15}
}

func (x *PublishRawImuRequest) GetImu() *Imu {
	if x != nil {
		return x.Imu
	}
	return nil
}

type PublishUnixEpochTimeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeUs        uint64                 `protobuf:"varint,1,opt,name=time_us,json=timeUs,proto3" json:"time_us,omitempty"` // The next 'unix epoch time' status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishUnixEpochTimeRequest) Reset() {
	*x = PublishUnixEpochTimeRequest{}
	mi := &file_telemetry_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishUnixEpochTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishUnixEpochTimeRequest) ProtoMessage() {}

func (x *PublishUnixEpochTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishUnixEpochTimeRequest.ProtoReflect.Descriptor instead.
func (*PublishUnixEpochTimeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{16}
}

func (x *PublishUnixEpochTimeRequest) GetTimeUs() uint64 {
	if x != nil {
		return x.TimeUs
	}
	return 0
}

type PublishDistanceSensorRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DistanceSensor *DistanceSensor        `protobuf:"bytes,1,opt,name=distance_sensor,json=distanceSensor,proto3" json:"distance_sensor,omitempty"` // The next 'Distance Sensor' status
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublishDistanceSensorRequest) Reset() {
	*x = PublishDistanceSensorRequest{}
	mi := &file_telemetry_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishDistanceSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDistanceSensorRequest) ProtoMessage() {}

func (x *PublishDistanceSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDistanceSensorRequest.ProtoReflect.Descriptor instead.
func (*PublishDistanceSensorRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{17}
}

func (x *PublishDistanceSensorRequest) GetDistanceSensor() *DistanceSensor {
	if x != nil {
		return x.DistanceSensor
	}
	return nil
}

type PublishAttitudeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Angle           *EulerAngle            `protobuf:"bytes,1,opt,name=angle,proto3" json:"angle,omitempty"`                                            // roll/pitch/yaw body angles
	AngularVelocity *AngularVelocityBody   `protobuf:"bytes,2,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"` // roll/pitch/yaw angular velocities
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PublishAttitudeRequest) Reset() {
	*x = PublishAttitudeRequest{}
	mi := &file_telemetry_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishAttitudeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAttitudeRequest) ProtoMessage() {}

func (x *PublishAttitudeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAttitudeRequest.ProtoReflect.Descriptor instead.
func (*PublishAttitudeRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{18}
}

func (x *PublishAttitudeRequest) GetAngle() *EulerAngle {
	if x != nil {
		return x.Angle
	}
	return nil
}

func (x *PublishAttitudeRequest) GetAngularVelocity() *AngularVelocityBody {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

type PublishVisualFlightRulesHudRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FixedWingMetrics *FixedwingMetrics      `protobuf:"bytes,1,opt,name=fixed_wing_metrics,json=fixedWingMetrics,proto3" json:"fixed_wing_metrics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PublishVisualFlightRulesHudRequest) Reset() {
	*x = PublishVisualFlightRulesHudRequest{}
	mi := &file_telemetry_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishVisualFlightRulesHudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishVisualFlightRulesHudRequest) ProtoMessage() {}

func (x *PublishVisualFlightRulesHudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishVisualFlightRulesHudRequest.ProtoReflect.Descriptor instead.
func (*PublishVisualFlightRulesHudRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{19}
}

func (x *PublishVisualFlightRulesHudRequest) GetFixedWingMetrics() *FixedwingMetrics {
	if x != nil {
		return x.FixedWingMetrics
	}
	return nil
}

type PublishPositionResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishPositionResponse) Reset() {
	*x = PublishPositionResponse{}
	mi := &file_telemetry_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishPositionResponse) ProtoMessage() {}

func (x *PublishPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishPositionResponse.ProtoReflect.Descriptor instead.
func (*PublishPositionResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{20}
}

func (x *PublishPositionResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishHomeResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishHomeResponse) Reset() {
	*x = PublishHomeResponse{}
	mi := &file_telemetry_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishHomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishHomeResponse) ProtoMessage() {}

func (x *PublishHomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishHomeResponse.ProtoReflect.Descriptor instead.
func (*PublishHomeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{21}
}

func (x *PublishHomeResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishSysStatusResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishSysStatusResponse) Reset() {
	*x = PublishSysStatusResponse{}
	mi := &file_telemetry_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishSysStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishSysStatusResponse) ProtoMessage() {}

func (x *PublishSysStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishSysStatusResponse.ProtoReflect.Descriptor instead.
func (*PublishSysStatusResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{22}
}

func (x *PublishSysStatusResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishExtendedSysStateResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishExtendedSysStateResponse) Reset() {
	*x = PublishExtendedSysStateResponse{}
	mi := &file_telemetry_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishExtendedSysStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishExtendedSysStateResponse) ProtoMessage() {}

func (x *PublishExtendedSysStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishExtendedSysStateResponse.ProtoReflect.Descriptor instead.
func (*PublishExtendedSysStateResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{23}
}

func (x *PublishExtendedSysStateResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishRawGpsResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishRawGpsResponse) Reset() {
	*x = PublishRawGpsResponse{}
	mi := &file_telemetry_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRawGpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRawGpsResponse) ProtoMessage() {}

func (x *PublishRawGpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRawGpsResponse.ProtoReflect.Descriptor instead.
func (*PublishRawGpsResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{24}
}

func (x *PublishRawGpsResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishBatteryResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishBatteryResponse) Reset() {
	*x = PublishBatteryResponse{}
	mi := &file_telemetry_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishBatteryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishBatteryResponse) ProtoMessage() {}

func (x *PublishBatteryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishBatteryResponse.ProtoReflect.Descriptor instead.
func (*PublishBatteryResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{25}
}

func (x *PublishBatteryResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishStatusTextResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishStatusTextResponse) Reset() {
	*x = PublishStatusTextResponse{}
	mi := &file_telemetry_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishStatusTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishStatusTextResponse) ProtoMessage() {}

func (x *PublishStatusTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishStatusTextResponse.ProtoReflect.Descriptor instead.
func (*PublishStatusTextResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{26}
}

func (x *PublishStatusTextResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishOdometryResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishOdometryResponse) Reset() {
	*x = PublishOdometryResponse{}
	mi := &file_telemetry_server_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishOdometryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishOdometryResponse) ProtoMessage() {}

func (x *PublishOdometryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishOdometryResponse.ProtoReflect.Descriptor instead.
func (*PublishOdometryResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{27}
}

func (x *PublishOdometryResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishPositionVelocityNedResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishPositionVelocityNedResponse) Reset() {
	*x = PublishPositionVelocityNedResponse{}
	mi := &file_telemetry_server_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishPositionVelocityNedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishPositionVelocityNedResponse) ProtoMessage() {}

func (x *PublishPositionVelocityNedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishPositionVelocityNedResponse.ProtoReflect.Descriptor instead.
func (*PublishPositionVelocityNedResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{28}
}

func (x *PublishPositionVelocityNedResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishGroundTruthResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishGroundTruthResponse) Reset() {
	*x = PublishGroundTruthResponse{}
	mi := &file_telemetry_server_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishGroundTruthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishGroundTruthResponse) ProtoMessage() {}

func (x *PublishGroundTruthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishGroundTruthResponse.ProtoReflect.Descriptor instead.
func (*PublishGroundTruthResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{29}
}

func (x *PublishGroundTruthResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishImuResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishImuResponse) Reset() {
	*x = PublishImuResponse{}
	mi := &file_telemetry_server_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishImuResponse) ProtoMessage() {}

func (x *PublishImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishImuResponse.ProtoReflect.Descriptor instead.
func (*PublishImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{30}
}

func (x *PublishImuResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishScaledImuResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishScaledImuResponse) Reset() {
	*x = PublishScaledImuResponse{}
	mi := &file_telemetry_server_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishScaledImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishScaledImuResponse) ProtoMessage() {}

func (x *PublishScaledImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishScaledImuResponse.ProtoReflect.Descriptor instead.
func (*PublishScaledImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{31}
}

func (x *PublishScaledImuResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishRawImuResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishRawImuResponse) Reset() {
	*x = PublishRawImuResponse{}
	mi := &file_telemetry_server_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRawImuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRawImuResponse) ProtoMessage() {}

func (x *PublishRawImuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRawImuResponse.ProtoReflect.Descriptor instead.
func (*PublishRawImuResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{32}
}

func (x *PublishRawImuResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishUnixEpochTimeResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishUnixEpochTimeResponse) Reset() {
	*x = PublishUnixEpochTimeResponse{}
	mi := &file_telemetry_server_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishUnixEpochTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishUnixEpochTimeResponse) ProtoMessage() {}

func (x *PublishUnixEpochTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishUnixEpochTimeResponse.ProtoReflect.Descriptor instead.
func (*PublishUnixEpochTimeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{33}
}

func (x *PublishUnixEpochTimeResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishDistanceSensorResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishDistanceSensorResponse) Reset() {
	*x = PublishDistanceSensorResponse{}
	mi := &file_telemetry_server_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishDistanceSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDistanceSensorResponse) ProtoMessage() {}

func (x *PublishDistanceSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDistanceSensorResponse.ProtoReflect.Descriptor instead.
func (*PublishDistanceSensorResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{34}
}

func (x *PublishDistanceSensorResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishAttitudeResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishAttitudeResponse) Reset() {
	*x = PublishAttitudeResponse{}
	mi := &file_telemetry_server_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishAttitudeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAttitudeResponse) ProtoMessage() {}

func (x *PublishAttitudeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAttitudeResponse.ProtoReflect.Descriptor instead.
func (*PublishAttitudeResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{35}
}

func (x *PublishAttitudeResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

type PublishVisualFlightRulesHudResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TelemetryServerResult *TelemetryServerResult `protobuf:"bytes,1,opt,name=telemetry_server_result,json=telemetryServerResult,proto3" json:"telemetry_server_result,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishVisualFlightRulesHudResponse) Reset() {
	*x = PublishVisualFlightRulesHudResponse{}
	mi := &file_telemetry_server_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishVisualFlightRulesHudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishVisualFlightRulesHudResponse) ProtoMessage() {}

func (x *PublishVisualFlightRulesHudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishVisualFlightRulesHudResponse.ProtoReflect.Descriptor instead.
func (*PublishVisualFlightRulesHudResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{36}
}

func (x *PublishVisualFlightRulesHudResponse) GetTelemetryServerResult() *TelemetryServerResult {
	if x != nil {
		return x.TelemetryServerResult
	}
	return nil
}

// Position type in global coordinates.
type Position struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LatitudeDeg       float64                `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                     // Latitude in degrees (range: -90 to +90)
	LongitudeDeg      float64                `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                  // Longitude in degrees (range: -180 to +180)
	AbsoluteAltitudeM float32                `protobuf:"fixed32,3,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"` // Altitude AMSL (above mean sea level) in metres
	RelativeAltitudeM float32                `protobuf:"fixed32,4,opt,name=relative_altitude_m,json=relativeAltitudeM,proto3" json:"relative_altitude_m,omitempty"` // Altitude relative to takeoff altitude in metres
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_telemetry_server_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{37}
}

func (x *Position) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *Position) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *Position) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

func (x *Position) GetRelativeAltitudeM() float32 {
	if x != nil {
		return x.RelativeAltitudeM
	}
	return 0
}

// Heading type used for global position
type Heading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeadingDeg    float64                `protobuf:"fixed64,1,opt,name=heading_deg,json=headingDeg,proto3" json:"heading_deg,omitempty"` // Heading in degrees (range: 0 to +360)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heading) Reset() {
	*x = Heading{}
	mi := &file_telemetry_server_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heading) ProtoMessage() {}

func (x *Heading) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heading.ProtoReflect.Descriptor instead.
func (*Heading) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{38}
}

func (x *Heading) GetHeadingDeg() float64 {
	if x != nil {
		return x.HeadingDeg
	}
	return 0
}

// Quaternion type.
//
// All rotations and axis systems follow the right-hand rule.
// The Hamilton quaternion product definition is used.
// A zero-rotation quaternion is represented by (1,0,0,0).
// The quaternion could also be written as w + xi + yj + zk.
//
// For more info see: https://en.wikipedia.org/wiki/Quaternion
type Quaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	W             float32                `protobuf:"fixed32,1,opt,name=w,proto3" json:"w,omitempty"`                                       // Quaternion entry 0, also denoted as a
	X             float32                `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"`                                       // Quaternion entry 1, also denoted as b
	Y             float32                `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"`                                       // Quaternion entry 2, also denoted as c
	Z             float32                `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"`                                       // Quaternion entry 3, also denoted as d
	TimestampUs   uint64                 `protobuf:"varint,5,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"` // Timestamp in microseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_telemetry_server_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{39}
}

func (x *Quaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Quaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Quaternion) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

// Euler angle type.
//
// All rotations and axis systems follow the right-hand rule.
// The Euler angles follow the convention of a 3-2-1 intrinsic Tait-Bryan rotation sequence.
//
// For more info see https://en.wikipedia.org/wiki/Euler_angles
type EulerAngle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollDeg       float32                `protobuf:"fixed32,1,opt,name=roll_deg,json=rollDeg,proto3" json:"roll_deg,omitempty"`            // Roll angle in degrees, positive is banking to the right
	PitchDeg      float32                `protobuf:"fixed32,2,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"`         // Pitch angle in degrees, positive is pitching nose up
	YawDeg        float32                `protobuf:"fixed32,3,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`               // Yaw angle in degrees, positive is clock-wise seen from above
	TimestampUs   uint64                 `protobuf:"varint,4,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"` // Timestamp in microseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EulerAngle) Reset() {
	*x = EulerAngle{}
	mi := &file_telemetry_server_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EulerAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EulerAngle) ProtoMessage() {}

func (x *EulerAngle) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EulerAngle.ProtoReflect.Descriptor instead.
func (*EulerAngle) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{40}
}

func (x *EulerAngle) GetRollDeg() float32 {
	if x != nil {
		return x.RollDeg
	}
	return 0
}

func (x *EulerAngle) GetPitchDeg() float32 {
	if x != nil {
		return x.PitchDeg
	}
	return 0
}

func (x *EulerAngle) GetYawDeg() float32 {
	if x != nil {
		return x.YawDeg
	}
	return 0
}

func (x *EulerAngle) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

// Angular velocity type.
type AngularVelocityBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollRadS      float32                `protobuf:"fixed32,1,opt,name=roll_rad_s,json=rollRadS,proto3" json:"roll_rad_s,omitempty"`    // Roll angular velocity
	PitchRadS     float32                `protobuf:"fixed32,2,opt,name=pitch_rad_s,json=pitchRadS,proto3" json:"pitch_rad_s,omitempty"` // Pitch angular velocity
	YawRadS       float32                `protobuf:"fixed32,3,opt,name=yaw_rad_s,json=yawRadS,proto3" json:"yaw_rad_s,omitempty"`       // Yaw angular velocity
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AngularVelocityBody) Reset() {
	*x = AngularVelocityBody{}
	mi := &file_telemetry_server_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngularVelocityBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngularVelocityBody) ProtoMessage() {}

func (x *AngularVelocityBody) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngularVelocityBody.ProtoReflect.Descriptor instead.
func (*AngularVelocityBody) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{41}
}

func (x *AngularVelocityBody) GetRollRadS() float32 {
	if x != nil {
		return x.RollRadS
	}
	return 0
}

func (x *AngularVelocityBody) GetPitchRadS() float32 {
	if x != nil {
		return x.PitchRadS
	}
	return 0
}

func (x *AngularVelocityBody) GetYawRadS() float32 {
	if x != nil {
		return x.YawRadS
	}
	return 0
}

// GPS information type.
type GpsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumSatellites int32                  `protobuf:"varint,1,opt,name=num_satellites,json=numSatellites,proto3" json:"num_satellites,omitempty"`                        // Number of visible satellites in use
	FixType       FixType                `protobuf:"varint,2,opt,name=fix_type,json=fixType,proto3,enum=mavsdk.rpc.telemetry_server.FixType" json:"fix_type,omitempty"` // Fix type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GpsInfo) Reset() {
	*x = GpsInfo{}
	mi := &file_telemetry_server_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GpsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsInfo) ProtoMessage() {}

func (x *GpsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsInfo.ProtoReflect.Descriptor instead.
func (*GpsInfo) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{42}
}

func (x *GpsInfo) GetNumSatellites() int32 {
	if x != nil {
		return x.NumSatellites
	}
	return 0
}

func (x *GpsInfo) GetFixType() FixType {
	if x != nil {
		return x.FixType
	}
	return FixType_FIX_TYPE_NO_GPS
}

// Raw GPS information type.
//
// Warning: this is an advanced type! If you want the location of the drone, use
// the position instead. This message exposes the raw values of the GNSS sensor.
type RawGps struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	TimestampUs            uint64                 `protobuf:"varint,1,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"`                                      // Timestamp in microseconds (UNIX Epoch time or time since system boot, to be inferred)
	LatitudeDeg            float64                `protobuf:"fixed64,2,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                                     // Latitude in degrees (WGS84, EGM96 ellipsoid)
	LongitudeDeg           float64                `protobuf:"fixed64,3,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                                  // Longitude in degrees (WGS84, EGM96 ellipsoid)
	AbsoluteAltitudeM      float32                `protobuf:"fixed32,4,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"`                 // Altitude AMSL (above mean sea level) in metres
	Hdop                   float32                `protobuf:"fixed32,5,opt,name=hdop,proto3" json:"hdop,omitempty"`                                                                      // GPS HDOP horizontal dilution of position (unitless). If unknown, set to NaN
	Vdop                   float32                `protobuf:"fixed32,6,opt,name=vdop,proto3" json:"vdop,omitempty"`                                                                      // GPS VDOP vertical dilution of position (unitless). If unknown, set to NaN
	VelocityMS             float32                `protobuf:"fixed32,7,opt,name=velocity_m_s,json=velocityMS,proto3" json:"velocity_m_s,omitempty"`                                      // Ground velocity in metres per second
	CogDeg                 float32                `protobuf:"fixed32,8,opt,name=cog_deg,json=cogDeg,proto3" json:"cog_deg,omitempty"`                                                    // Course over ground (NOT heading, but direction of movement) in degrees. If unknown, set to NaN
	AltitudeEllipsoidM     float32                `protobuf:"fixed32,9,opt,name=altitude_ellipsoid_m,json=altitudeEllipsoidM,proto3" json:"altitude_ellipsoid_m,omitempty"`              // Altitude in metres (above WGS84, EGM96 ellipsoid)
	HorizontalUncertaintyM float32                `protobuf:"fixed32,10,opt,name=horizontal_uncertainty_m,json=horizontalUncertaintyM,proto3" json:"horizontal_uncertainty_m,omitempty"` // Position uncertainty in metres
	VerticalUncertaintyM   float32                `protobuf:"fixed32,11,opt,name=vertical_uncertainty_m,json=verticalUncertaintyM,proto3" json:"vertical_uncertainty_m,omitempty"`       // Altitude uncertainty in metres
	VelocityUncertaintyMS  float32                `protobuf:"fixed32,12,opt,name=velocity_uncertainty_m_s,json=velocityUncertaintyMS,proto3" json:"velocity_uncertainty_m_s,omitempty"`  // Velocity uncertainty in metres per second
	HeadingUncertaintyDeg  float32                `protobuf:"fixed32,13,opt,name=heading_uncertainty_deg,json=headingUncertaintyDeg,proto3" json:"heading_uncertainty_deg,omitempty"`    // Heading uncertainty in degrees
	YawDeg                 float32                `protobuf:"fixed32,14,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`                                                   // Yaw in earth frame from north.
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RawGps) Reset() {
	*x = RawGps{}
	mi := &file_telemetry_server_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawGps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawGps) ProtoMessage() {}

func (x *RawGps) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawGps.ProtoReflect.Descriptor instead.
func (*RawGps) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{43}
}

func (x *RawGps) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

func (x *RawGps) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *RawGps) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *RawGps) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

func (x *RawGps) GetHdop() float32 {
	if x != nil {
		return x.Hdop
	}
	return 0
}

func (x *RawGps) GetVdop() float32 {
	if x != nil {
		return x.Vdop
	}
	return 0
}

func (x *RawGps) GetVelocityMS() float32 {
	if x != nil {
		return x.VelocityMS
	}
	return 0
}

func (x *RawGps) GetCogDeg() float32 {
	if x != nil {
		return x.CogDeg
	}
	return 0
}

func (x *RawGps) GetAltitudeEllipsoidM() float32 {
	if x != nil {
		return x.AltitudeEllipsoidM
	}
	return 0
}

func (x *RawGps) GetHorizontalUncertaintyM() float32 {
	if x != nil {
		return x.HorizontalUncertaintyM
	}
	return 0
}

func (x *RawGps) GetVerticalUncertaintyM() float32 {
	if x != nil {
		return x.VerticalUncertaintyM
	}
	return 0
}

func (x *RawGps) GetVelocityUncertaintyMS() float32 {
	if x != nil {
		return x.VelocityUncertaintyMS
	}
	return 0
}

func (x *RawGps) GetHeadingUncertaintyDeg() float32 {
	if x != nil {
		return x.HeadingUncertaintyDeg
	}
	return 0
}

func (x *RawGps) GetYawDeg() float32 {
	if x != nil {
		return x.YawDeg
	}
	return 0
}

// Battery type.
type Battery struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VoltageV         float32                `protobuf:"fixed32,1,opt,name=voltage_v,json=voltageV,proto3" json:"voltage_v,omitempty"`                         // Voltage in volts
	RemainingPercent float32                `protobuf:"fixed32,2,opt,name=remaining_percent,json=remainingPercent,proto3" json:"remaining_percent,omitempty"` // Estimated battery remaining (range: 0.0 to 1.0)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Battery) Reset() {
	*x = Battery{}
	mi := &file_telemetry_server_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Battery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Battery) ProtoMessage() {}

func (x *Battery) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Battery.ProtoReflect.Descriptor instead.
func (*Battery) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{44}
}

func (x *Battery) GetVoltageV() float32 {
	if x != nil {
		return x.VoltageV
	}
	return 0
}

func (x *Battery) GetRemainingPercent() float32 {
	if x != nil {
		return x.RemainingPercent
	}
	return 0
}

// Remote control status type.
type RcStatus struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	WasAvailableOnce      bool                   `protobuf:"varint,1,opt,name=was_available_once,json=wasAvailableOnce,proto3" json:"was_available_once,omitempty"`                 // True if an RC signal has been available once
	IsAvailable           bool                   `protobuf:"varint,2,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`                                  // True if the RC signal is available now
	SignalStrengthPercent float32                `protobuf:"fixed32,3,opt,name=signal_strength_percent,json=signalStrengthPercent,proto3" json:"signal_strength_percent,omitempty"` // Signal strength (range: 0 to 100, NaN if unknown)
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RcStatus) Reset() {
	*x = RcStatus{}
	mi := &file_telemetry_server_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RcStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcStatus) ProtoMessage() {}

func (x *RcStatus) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcStatus.ProtoReflect.Descriptor instead.
func (*RcStatus) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{45}
}

func (x *RcStatus) GetWasAvailableOnce() bool {
	if x != nil {
		return x.WasAvailableOnce
	}
	return false
}

func (x *RcStatus) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *RcStatus) GetSignalStrengthPercent() float32 {
	if x != nil {
		return x.SignalStrengthPercent
	}
	return 0
}

// StatusText information type.
type StatusText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          StatusTextType         `protobuf:"varint,1,opt,name=type,proto3,enum=mavsdk.rpc.telemetry_server.StatusTextType" json:"type,omitempty"` // Message type
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                                                  // MAVLink status message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusText) Reset() {
	*x = StatusText{}
	mi := &file_telemetry_server_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusText) ProtoMessage() {}

func (x *StatusText) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusText.ProtoReflect.Descriptor instead.
func (*StatusText) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{46}
}

func (x *StatusText) GetType() StatusTextType {
	if x != nil {
		return x.Type
	}
	return StatusTextType_STATUS_TEXT_TYPE_DEBUG
}

func (x *StatusText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Actuator control target type.
type ActuatorControlTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         int32                  `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`               // An actuator control group is e.g. 'attitude' for the core flight controls, or 'gimbal' for a payload.
	Controls      []float32              `protobuf:"fixed32,2,rep,packed,name=controls,proto3" json:"controls,omitempty"` // Controls normed from -1 to 1, where 0 is neutral position.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActuatorControlTarget) Reset() {
	*x = ActuatorControlTarget{}
	mi := &file_telemetry_server_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActuatorControlTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActuatorControlTarget) ProtoMessage() {}

func (x *ActuatorControlTarget) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActuatorControlTarget.ProtoReflect.Descriptor instead.
func (*ActuatorControlTarget) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{47}
}

func (x *ActuatorControlTarget) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *ActuatorControlTarget) GetControls() []float32 {
	if x != nil {
		return x.Controls
	}
	return nil
}

// Actuator output status type.
type ActuatorOutputStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Active        uint32                 `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`             // Active outputs
	Actuator      []float32              `protobuf:"fixed32,2,rep,packed,name=actuator,proto3" json:"actuator,omitempty"` // Servo/motor output values
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActuatorOutputStatus) Reset() {
	*x = ActuatorOutputStatus{}
	mi := &file_telemetry_server_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActuatorOutputStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActuatorOutputStatus) ProtoMessage() {}

func (x *ActuatorOutputStatus) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActuatorOutputStatus.ProtoReflect.Descriptor instead.
func (*ActuatorOutputStatus) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{48}
}

func (x *ActuatorOutputStatus) GetActive() uint32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ActuatorOutputStatus) GetActuator() []float32 {
	if x != nil {
		return x.Actuator
	}
	return nil
}

// Covariance type.
//
// Row-major representation of a 6x6 cross-covariance matrix
// upper right triangle.
// Set first to NaN if unknown.
type Covariance struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CovarianceMatrix []float32              `protobuf:"fixed32,1,rep,packed,name=covariance_matrix,json=covarianceMatrix,proto3" json:"covariance_matrix,omitempty"` // Representation of a covariance matrix.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Covariance) Reset() {
	*x = Covariance{}
	mi := &file_telemetry_server_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Covariance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Covariance) ProtoMessage() {}

func (x *Covariance) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Covariance.ProtoReflect.Descriptor instead.
func (*Covariance) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{49}
}

func (x *Covariance) GetCovarianceMatrix() []float32 {
	if x != nil {
		return x.CovarianceMatrix
	}
	return nil
}

// Velocity type, represented in the Body (X Y Z) frame and in metres/second.
type VelocityBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XMS           float32                `protobuf:"fixed32,1,opt,name=x_m_s,json=xMS,proto3" json:"x_m_s,omitempty"` // Velocity in X in metres/second
	YMS           float32                `protobuf:"fixed32,2,opt,name=y_m_s,json=yMS,proto3" json:"y_m_s,omitempty"` // Velocity in Y in metres/second
	ZMS           float32                `protobuf:"fixed32,3,opt,name=z_m_s,json=zMS,proto3" json:"z_m_s,omitempty"` // Velocity in Z in metres/second
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VelocityBody) Reset() {
	*x = VelocityBody{}
	mi := &file_telemetry_server_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VelocityBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityBody) ProtoMessage() {}

func (x *VelocityBody) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityBody.ProtoReflect.Descriptor instead.
func (*VelocityBody) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{50}
}

func (x *VelocityBody) GetXMS() float32 {
	if x != nil {
		return x.XMS
	}
	return 0
}

func (x *VelocityBody) GetYMS() float32 {
	if x != nil {
		return x.YMS
	}
	return 0
}

func (x *VelocityBody) GetZMS() float32 {
	if x != nil {
		return x.ZMS
	}
	return 0
}

// Position type, represented in the Body (X Y Z) frame
type PositionBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XM            float32                `protobuf:"fixed32,1,opt,name=x_m,json=xM,proto3" json:"x_m,omitempty"` // X Position in metres.
	YM            float32                `protobuf:"fixed32,2,opt,name=y_m,json=yM,proto3" json:"y_m,omitempty"` // Y Position in metres.
	ZM            float32                `protobuf:"fixed32,3,opt,name=z_m,json=zM,proto3" json:"z_m,omitempty"` // Z Position in metres.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionBody) Reset() {
	*x = PositionBody{}
	mi := &file_telemetry_server_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionBody) ProtoMessage() {}

func (x *PositionBody) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionBody.ProtoReflect.Descriptor instead.
func (*PositionBody) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{51}
}

func (x *PositionBody) GetXM() float32 {
	if x != nil {
		return x.XM
	}
	return 0
}

func (x *PositionBody) GetYM() float32 {
	if x != nil {
		return x.YM
	}
	return 0
}

func (x *PositionBody) GetZM() float32 {
	if x != nil {
		return x.ZM
	}
	return 0
}

// Odometry message type.
type Odometry struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TimeUsec            uint64                 `protobuf:"varint,1,opt,name=time_usec,json=timeUsec,proto3" json:"time_usec,omitempty"`                                                                  // Timestamp (0 to use Backend timestamp).
	FrameId             Odometry_MavFrame      `protobuf:"varint,2,opt,name=frame_id,json=frameId,proto3,enum=mavsdk.rpc.telemetry_server.Odometry_MavFrame" json:"frame_id,omitempty"`                  // Coordinate frame of reference for the pose data.
	ChildFrameId        Odometry_MavFrame      `protobuf:"varint,3,opt,name=child_frame_id,json=childFrameId,proto3,enum=mavsdk.rpc.telemetry_server.Odometry_MavFrame" json:"child_frame_id,omitempty"` // Coordinate frame of reference for the velocity in free space (twist) data.
	PositionBody        *PositionBody          `protobuf:"bytes,4,opt,name=position_body,json=positionBody,proto3" json:"position_body,omitempty"`                                                       // Position.
	Q                   *Quaternion            `protobuf:"bytes,5,opt,name=q,proto3" json:"q,omitempty"`                                                                                                 // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
	VelocityBody        *VelocityBody          `protobuf:"bytes,6,opt,name=velocity_body,json=velocityBody,proto3" json:"velocity_body,omitempty"`                                                       // Linear velocity (m/s).
	AngularVelocityBody *AngularVelocityBody   `protobuf:"bytes,7,opt,name=angular_velocity_body,json=angularVelocityBody,proto3" json:"angular_velocity_body,omitempty"`                                // Angular velocity (rad/s).
	PoseCovariance      *Covariance            `protobuf:"bytes,8,opt,name=pose_covariance,json=poseCovariance,proto3" json:"pose_covariance,omitempty"`                                                 // Pose cross-covariance matrix.
	VelocityCovariance  *Covariance            `protobuf:"bytes,9,opt,name=velocity_covariance,json=velocityCovariance,proto3" json:"velocity_covariance,omitempty"`                                     // Velocity cross-covariance matrix.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Odometry) Reset() {
	*x = Odometry{}
	mi := &file_telemetry_server_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Odometry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Odometry) ProtoMessage() {}

func (x *Odometry) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Odometry.ProtoReflect.Descriptor instead.
func (*Odometry) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{52}
}

func (x *Odometry) GetTimeUsec() uint64 {
	if x != nil {
		return x.TimeUsec
	}
	return 0
}

func (x *Odometry) GetFrameId() Odometry_MavFrame {
	if x != nil {
		return x.FrameId
	}
	return Odometry_MAV_FRAME_UNDEF
}

func (x *Odometry) GetChildFrameId() Odometry_MavFrame {
	if x != nil {
		return x.ChildFrameId
	}
	return Odometry_MAV_FRAME_UNDEF
}

func (x *Odometry) GetPositionBody() *PositionBody {
	if x != nil {
		return x.PositionBody
	}
	return nil
}

func (x *Odometry) GetQ() *Quaternion {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *Odometry) GetVelocityBody() *VelocityBody {
	if x != nil {
		return x.VelocityBody
	}
	return nil
}

func (x *Odometry) GetAngularVelocityBody() *AngularVelocityBody {
	if x != nil {
		return x.AngularVelocityBody
	}
	return nil
}

func (x *Odometry) GetPoseCovariance() *Covariance {
	if x != nil {
		return x.PoseCovariance
	}
	return nil
}

func (x *Odometry) GetVelocityCovariance() *Covariance {
	if x != nil {
		return x.VelocityCovariance
	}
	return nil
}

// DistanceSensor message type.
type DistanceSensor struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MinimumDistanceM float32                `protobuf:"fixed32,1,opt,name=minimum_distance_m,json=minimumDistanceM,proto3" json:"minimum_distance_m,omitempty"` // Minimum distance the sensor can measure, NaN if unknown.
	MaximumDistanceM float32                `protobuf:"fixed32,2,opt,name=maximum_distance_m,json=maximumDistanceM,proto3" json:"maximum_distance_m,omitempty"` // Maximum distance the sensor can measure, NaN if unknown.
	CurrentDistanceM float32                `protobuf:"fixed32,3,opt,name=current_distance_m,json=currentDistanceM,proto3" json:"current_distance_m,omitempty"` // Current distance reading, NaN if unknown.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DistanceSensor) Reset() {
	*x = DistanceSensor{}
	mi := &file_telemetry_server_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistanceSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistanceSensor) ProtoMessage() {}

func (x *DistanceSensor) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistanceSensor.ProtoReflect.Descriptor instead.
func (*DistanceSensor) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{53}
}

func (x *DistanceSensor) GetMinimumDistanceM() float32 {
	if x != nil {
		return x.MinimumDistanceM
	}
	return 0
}

func (x *DistanceSensor) GetMaximumDistanceM() float32 {
	if x != nil {
		return x.MaximumDistanceM
	}
	return 0
}

func (x *DistanceSensor) GetCurrentDistanceM() float32 {
	if x != nil {
		return x.CurrentDistanceM
	}
	return 0
}

// Scaled Pressure message type.
type ScaledPressure struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	TimestampUs                        uint64                 `protobuf:"varint,1,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"`                                                                           // Timestamp (time since system boot)
	AbsolutePressureHpa                float32                `protobuf:"fixed32,2,opt,name=absolute_pressure_hpa,json=absolutePressureHpa,proto3" json:"absolute_pressure_hpa,omitempty"`                                                // Absolute pressure in hPa
	DifferentialPressureHpa            float32                `protobuf:"fixed32,3,opt,name=differential_pressure_hpa,json=differentialPressureHpa,proto3" json:"differential_pressure_hpa,omitempty"`                                    // Differential pressure 1 in hPa
	TemperatureDeg                     float32                `protobuf:"fixed32,4,opt,name=temperature_deg,json=temperatureDeg,proto3" json:"temperature_deg,omitempty"`                                                                 // Absolute pressure temperature (in celsius)
	DifferentialPressureTemperatureDeg float32                `protobuf:"fixed32,5,opt,name=differential_pressure_temperature_deg,json=differentialPressureTemperatureDeg,proto3" json:"differential_pressure_temperature_deg,omitempty"` // Differential pressure temperature (in celsius, 0 if not available)
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *ScaledPressure) Reset() {
	*x = ScaledPressure{}
	mi := &file_telemetry_server_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScaledPressure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaledPressure) ProtoMessage() {}

func (x *ScaledPressure) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaledPressure.ProtoReflect.Descriptor instead.
func (*ScaledPressure) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{54}
}

func (x *ScaledPressure) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

func (x *ScaledPressure) GetAbsolutePressureHpa() float32 {
	if x != nil {
		return x.AbsolutePressureHpa
	}
	return 0
}

func (x *ScaledPressure) GetDifferentialPressureHpa() float32 {
	if x != nil {
		return x.DifferentialPressureHpa
	}
	return 0
}

func (x *ScaledPressure) GetTemperatureDeg() float32 {
	if x != nil {
		return x.TemperatureDeg
	}
	return 0
}

func (x *ScaledPressure) GetDifferentialPressureTemperatureDeg() float32 {
	if x != nil {
		return x.DifferentialPressureTemperatureDeg
	}
	return 0
}

// PositionNed message type.
type PositionNed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NorthM        float32                `protobuf:"fixed32,1,opt,name=north_m,json=northM,proto3" json:"north_m,omitempty"` // Position along north direction in metres
	EastM         float32                `protobuf:"fixed32,2,opt,name=east_m,json=eastM,proto3" json:"east_m,omitempty"`    // Position along east direction in metres
	DownM         float32                `protobuf:"fixed32,3,opt,name=down_m,json=downM,proto3" json:"down_m,omitempty"`    // Position along down direction in metres
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionNed) Reset() {
	*x = PositionNed{}
	mi := &file_telemetry_server_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionNed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionNed) ProtoMessage() {}

func (x *PositionNed) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionNed.ProtoReflect.Descriptor instead.
func (*PositionNed) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{55}
}

func (x *PositionNed) GetNorthM() float32 {
	if x != nil {
		return x.NorthM
	}
	return 0
}

func (x *PositionNed) GetEastM() float32 {
	if x != nil {
		return x.EastM
	}
	return 0
}

func (x *PositionNed) GetDownM() float32 {
	if x != nil {
		return x.DownM
	}
	return 0
}

// VelocityNed message type.
type VelocityNed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NorthMS       float32                `protobuf:"fixed32,1,opt,name=north_m_s,json=northMS,proto3" json:"north_m_s,omitempty"` // Velocity along north direction in metres per second
	EastMS        float32                `protobuf:"fixed32,2,opt,name=east_m_s,json=eastMS,proto3" json:"east_m_s,omitempty"`    // Velocity along east direction in metres per second
	DownMS        float32                `protobuf:"fixed32,3,opt,name=down_m_s,json=downMS,proto3" json:"down_m_s,omitempty"`    // Velocity along down direction in metres per second
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VelocityNed) Reset() {
	*x = VelocityNed{}
	mi := &file_telemetry_server_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VelocityNed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityNed) ProtoMessage() {}

func (x *VelocityNed) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityNed.ProtoReflect.Descriptor instead.
func (*VelocityNed) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{56}
}

func (x *VelocityNed) GetNorthMS() float32 {
	if x != nil {
		return x.NorthMS
	}
	return 0
}

func (x *VelocityNed) GetEastMS() float32 {
	if x != nil {
		return x.EastMS
	}
	return 0
}

func (x *VelocityNed) GetDownMS() float32 {
	if x != nil {
		return x.DownMS
	}
	return 0
}

// PositionVelocityNed message type.
type PositionVelocityNed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      *PositionNed           `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"` // Position (NED)
	Velocity      *VelocityNed           `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"` // Velocity (NED)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionVelocityNed) Reset() {
	*x = PositionVelocityNed{}
	mi := &file_telemetry_server_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionVelocityNed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionVelocityNed) ProtoMessage() {}

func (x *PositionVelocityNed) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionVelocityNed.ProtoReflect.Descriptor instead.
func (*PositionVelocityNed) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{57}
}

func (x *PositionVelocityNed) GetPosition() *PositionNed {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PositionVelocityNed) GetVelocity() *VelocityNed {
	if x != nil {
		return x.Velocity
	}
	return nil
}

// GroundTruth message type.
type GroundTruth struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LatitudeDeg       float64                `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                     // Latitude in degrees (range: -90 to +90)
	LongitudeDeg      float64                `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                  // Longitude in degrees (range: -180 to 180)
	AbsoluteAltitudeM float32                `protobuf:"fixed32,3,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"` // Altitude AMSL (above mean sea level) in metres
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GroundTruth) Reset() {
	*x = GroundTruth{}
	mi := &file_telemetry_server_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroundTruth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroundTruth) ProtoMessage() {}

func (x *GroundTruth) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroundTruth.ProtoReflect.Descriptor instead.
func (*GroundTruth) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{58}
}

func (x *GroundTruth) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *GroundTruth) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *GroundTruth) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

// FixedwingMetrics message type.
type FixedwingMetrics struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AirspeedMS         float32                `protobuf:"fixed32,1,opt,name=airspeed_m_s,json=airspeedMS,proto3" json:"airspeed_m_s,omitempty"`                       // Current indicated airspeed (IAS) in metres per second
	ThrottlePercentage float32                `protobuf:"fixed32,2,opt,name=throttle_percentage,json=throttlePercentage,proto3" json:"throttle_percentage,omitempty"` // Current throttle setting (0 to 100)
	ClimbRateMS        float32                `protobuf:"fixed32,3,opt,name=climb_rate_m_s,json=climbRateMS,proto3" json:"climb_rate_m_s,omitempty"`                  // Current climb rate in metres per second
	GroundspeedMS      float32                `protobuf:"fixed32,4,opt,name=groundspeed_m_s,json=groundspeedMS,proto3" json:"groundspeed_m_s,omitempty"`              // Current groundspeed metres per second
	HeadingDeg         float32                `protobuf:"fixed32,5,opt,name=heading_deg,json=headingDeg,proto3" json:"heading_deg,omitempty"`                         // Current heading in compass units (0-360, 0=north)
	AbsoluteAltitudeM  float32                `protobuf:"fixed32,6,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"`  // Current altitude in metres (MSL)
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FixedwingMetrics) Reset() {
	*x = FixedwingMetrics{}
	mi := &file_telemetry_server_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedwingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedwingMetrics) ProtoMessage() {}

func (x *FixedwingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedwingMetrics.ProtoReflect.Descriptor instead.
func (*FixedwingMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{59}
}

func (x *FixedwingMetrics) GetAirspeedMS() float32 {
	if x != nil {
		return x.AirspeedMS
	}
	return 0
}

func (x *FixedwingMetrics) GetThrottlePercentage() float32 {
	if x != nil {
		return x.ThrottlePercentage
	}
	return 0
}

func (x *FixedwingMetrics) GetClimbRateMS() float32 {
	if x != nil {
		return x.ClimbRateMS
	}
	return 0
}

func (x *FixedwingMetrics) GetGroundspeedMS() float32 {
	if x != nil {
		return x.GroundspeedMS
	}
	return 0
}

func (x *FixedwingMetrics) GetHeadingDeg() float32 {
	if x != nil {
		return x.HeadingDeg
	}
	return 0
}

func (x *FixedwingMetrics) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

// AccelerationFrd message type.
type AccelerationFrd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForwardMS2    float32                `protobuf:"fixed32,1,opt,name=forward_m_s2,json=forwardMS2,proto3" json:"forward_m_s2,omitempty"` // Acceleration in forward direction in metres per second^2
	RightMS2      float32                `protobuf:"fixed32,2,opt,name=right_m_s2,json=rightMS2,proto3" json:"right_m_s2,omitempty"`       // Acceleration in right direction in metres per second^2
	DownMS2       float32                `protobuf:"fixed32,3,opt,name=down_m_s2,json=downMS2,proto3" json:"down_m_s2,omitempty"`          // Acceleration in down direction in metres per second^2
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccelerationFrd) Reset() {
	*x = AccelerationFrd{}
	mi := &file_telemetry_server_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccelerationFrd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelerationFrd) ProtoMessage() {}

func (x *AccelerationFrd) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelerationFrd.ProtoReflect.Descriptor instead.
func (*AccelerationFrd) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{60}
}

func (x *AccelerationFrd) GetForwardMS2() float32 {
	if x != nil {
		return x.ForwardMS2
	}
	return 0
}

func (x *AccelerationFrd) GetRightMS2() float32 {
	if x != nil {
		return x.RightMS2
	}
	return 0
}

func (x *AccelerationFrd) GetDownMS2() float32 {
	if x != nil {
		return x.DownMS2
	}
	return 0
}

// AngularVelocityFrd message type.
type AngularVelocityFrd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForwardRadS   float32                `protobuf:"fixed32,1,opt,name=forward_rad_s,json=forwardRadS,proto3" json:"forward_rad_s,omitempty"` // Angular velocity in forward direction in radians per second
	RightRadS     float32                `protobuf:"fixed32,2,opt,name=right_rad_s,json=rightRadS,proto3" json:"right_rad_s,omitempty"`       // Angular velocity in right direction in radians per second
	DownRadS      float32                `protobuf:"fixed32,3,opt,name=down_rad_s,json=downRadS,proto3" json:"down_rad_s,omitempty"`          // Angular velocity in Down direction in radians per second
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AngularVelocityFrd) Reset() {
	*x = AngularVelocityFrd{}
	mi := &file_telemetry_server_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AngularVelocityFrd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngularVelocityFrd) ProtoMessage() {}

func (x *AngularVelocityFrd) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngularVelocityFrd.ProtoReflect.Descriptor instead.
func (*AngularVelocityFrd) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{61}
}

func (x *AngularVelocityFrd) GetForwardRadS() float32 {
	if x != nil {
		return x.ForwardRadS
	}
	return 0
}

func (x *AngularVelocityFrd) GetRightRadS() float32 {
	if x != nil {
		return x.RightRadS
	}
	return 0
}

func (x *AngularVelocityFrd) GetDownRadS() float32 {
	if x != nil {
		return x.DownRadS
	}
	return 0
}

// MagneticFieldFrd message type.
type MagneticFieldFrd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ForwardGauss  float32                `protobuf:"fixed32,1,opt,name=forward_gauss,json=forwardGauss,proto3" json:"forward_gauss,omitempty"` // Magnetic field in forward direction measured in Gauss
	RightGauss    float32                `protobuf:"fixed32,2,opt,name=right_gauss,json=rightGauss,proto3" json:"right_gauss,omitempty"`       // Magnetic field in East direction measured in Gauss
	DownGauss     float32                `protobuf:"fixed32,3,opt,name=down_gauss,json=downGauss,proto3" json:"down_gauss,omitempty"`          // Magnetic field in Down direction measured in Gauss
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MagneticFieldFrd) Reset() {
	*x = MagneticFieldFrd{}
	mi := &file_telemetry_server_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagneticFieldFrd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagneticFieldFrd) ProtoMessage() {}

func (x *MagneticFieldFrd) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagneticFieldFrd.ProtoReflect.Descriptor instead.
func (*MagneticFieldFrd) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{62}
}

func (x *MagneticFieldFrd) GetForwardGauss() float32 {
	if x != nil {
		return x.ForwardGauss
	}
	return 0
}

func (x *MagneticFieldFrd) GetRightGauss() float32 {
	if x != nil {
		return x.RightGauss
	}
	return 0
}

func (x *MagneticFieldFrd) GetDownGauss() float32 {
	if x != nil {
		return x.DownGauss
	}
	return 0
}

// Imu message type.
type Imu struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AccelerationFrd    *AccelerationFrd       `protobuf:"bytes,1,opt,name=acceleration_frd,json=accelerationFrd,proto3" json:"acceleration_frd,omitempty"`            // Acceleration
	AngularVelocityFrd *AngularVelocityFrd    `protobuf:"bytes,2,opt,name=angular_velocity_frd,json=angularVelocityFrd,proto3" json:"angular_velocity_frd,omitempty"` // Angular velocity
	MagneticFieldFrd   *MagneticFieldFrd      `protobuf:"bytes,3,opt,name=magnetic_field_frd,json=magneticFieldFrd,proto3" json:"magnetic_field_frd,omitempty"`       // Magnetic field
	TemperatureDegc    float32                `protobuf:"fixed32,4,opt,name=temperature_degc,json=temperatureDegc,proto3" json:"temperature_degc,omitempty"`          // Temperature
	TimestampUs        uint64                 `protobuf:"varint,5,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us,omitempty"`                       // Timestamp in microseconds
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Imu) Reset() {
	*x = Imu{}
	mi := &file_telemetry_server_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Imu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Imu) ProtoMessage() {}

func (x *Imu) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Imu.ProtoReflect.Descriptor instead.
func (*Imu) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{63}
}

func (x *Imu) GetAccelerationFrd() *AccelerationFrd {
	if x != nil {
		return x.AccelerationFrd
	}
	return nil
}

func (x *Imu) GetAngularVelocityFrd() *AngularVelocityFrd {
	if x != nil {
		return x.AngularVelocityFrd
	}
	return nil
}

func (x *Imu) GetMagneticFieldFrd() *MagneticFieldFrd {
	if x != nil {
		return x.MagneticFieldFrd
	}
	return nil
}

func (x *Imu) GetTemperatureDegc() float32 {
	if x != nil {
		return x.TemperatureDegc
	}
	return 0
}

func (x *Imu) GetTimestampUs() uint64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

// Result type.
type TelemetryServerResult struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Result        TelemetryServerResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.telemetry_server.TelemetryServerResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr     string                       `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                                         // Human-readable English string describing the result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryServerResult) Reset() {
	*x = TelemetryServerResult{}
	mi := &file_telemetry_server_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryServerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryServerResult) ProtoMessage() {}

func (x *TelemetryServerResult) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_server_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryServerResult.ProtoReflect.Descriptor instead.
func (*TelemetryServerResult) Descriptor() ([]byte, []int) {
	return file_telemetry_server_proto_rawDescGZIP(), []int{64}
}

func (x *TelemetryServerResult) GetResult() TelemetryServerResult_Result {
	if x != nil {
		return x.Result
	}
	return TelemetryServerResult_RESULT_UNKNOWN
}

func (x *TelemetryServerResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_telemetry_server_proto protoreflect.FileDescriptor

const file_telemetry_server_proto_rawDesc = "" +
	"\n" +
	"\x16telemetry_server.proto\x12\x1bmavsdk.rpc.telemetry_server\x1a\x14mavsdk_options.proto\"\xe8\x01\n" +
	"\x16PublishPositionRequest\x12A\n" +
	"\bposition\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry_server.PositionR\bposition\x12K\n" +
	"\fvelocity_ned\x18\x02 \x01(\v2(.mavsdk.rpc.telemetry_server.VelocityNedR\vvelocityNed\x12>\n" +
	"\aheading\x18\x03 \x01(\v2$.mavsdk.rpc.telemetry_server.HeadingR\aheading\"O\n" +
	"\x12PublishHomeRequest\x129\n" +
	"\x04home\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry_server.PositionR\x04home\"\x89\x02\n" +
	"\x17PublishSysStatusRequest\x12>\n" +
	"\abattery\x18\x01 \x01(\v2$.mavsdk.rpc.telemetry_server.BatteryR\abattery\x12,\n" +
	"\x12rc_receiver_status\x18\x02 \x01(\bR\x10rcReceiverStatus\x12\x1f\n" +
	"\vgyro_status\x18\x03 \x01(\bR\n" +
	"gyroStatus\x12!\n" +
	"\faccel_status\x18\x04 \x01(\bR\vaccelStatus\x12\x1d\n" +
	"\n" +
	"mag_status\x18\x05 \x01(\bR\tmagStatus\x12\x1d\n" +
	"\n" +
	"gps_status\x18\x06 \x01(\bR\tgpsStatus\"\xb4\x01\n" +
	"\x1ePublishExtendedSysStateRequest\x12E\n" +
	"\n" +
	"vtol_state\x18\x01 \x01(\x0e2&.mavsdk.rpc.telemetry_server.VtolStateR\tvtolState\x12K\n" +
	"\flanded_state\x18\x02 \x01(\x0e2(.mavsdk.rpc.telemetry_server.LandedStateR\vlandedState\"1\n" +
	"\x13PublishInAirRequest\x12\x1a\n" +
	"\tis_in_air\x18\x01 \x01(\bR\aisInAir\"h\n" +
	"\x19PublishLandedStateRequest\x12K\n" +
	"\flanded_state\x18\x01 \x01(\x0e2(.mavsdk.rpc.telemetry_server.LandedStateR\vlandedState\"\x95\x01\n" +
	"\x14PublishRawGpsRequest\x12<\n" +
	"\araw_gps\x18\x01 \x01(\v2#.mavsdk.rpc.telemetry_server.RawGpsR\x06rawGps\x12?\n" +
	"\bgps_info\x18\x02 \x01(\v2$.mavsdk.rpc.telemetry_server.GpsInfoR\agpsInfo\"W\n" +
	"\x15PublishBatteryRequest\x12>\n" +
	"\abattery\x18\x01 \x01(\v2$.mavsdk.rpc.telemetry_server.BatteryR\abattery\"\\\n" +
	"\x16PublishRcStatusRequest\x12B\n" +
	"\trc_status\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry_server.RcStatusR\brcStatus\"d\n" +
	"\x18PublishStatusTextRequest\x12H\n" +
	"\vstatus_text\x18\x01 \x01(\v2'.mavsdk.rpc.telemetry_server.StatusTextR\n" +
	"statusText\"[\n" +
	"\x16PublishOdometryRequest\x12A\n" +
	"\bodometry\x18\x01 \x01(\v2%.mavsdk.rpc.telemetry_server.OdometryR\bodometry\"\x89\x01\n" +
	"!PublishPositionVelocityNedRequest\x12d\n" +
	"\x15position_velocity_ned\x18\x01 \x01(\v20.mavsdk.rpc.telemetry_server.PositionVelocityNedR\x13positionVelocityNed\"h\n" +
	"\x19PublishGroundTruthRequest\x12K\n" +
	"\fground_truth\x18\x01 \x01(\v2(.mavsdk.rpc.telemetry_server.GroundTruthR\vgroundTruth\"G\n" +
	"\x11PublishImuRequest\x122\n" +
	"\x03imu\x18\x01 \x01(\v2 .mavsdk.rpc.telemetry_server.ImuR\x03imu\"M\n" +
	"\x17PublishScaledImuRequest\x122\n" +
	"\x03imu\x18\x01 \x01(\v2 .mavsdk.rpc.telemetry_server.ImuR\x03imu\"J\n" +
	"\x14PublishRawImuRequest\x122\n" +
	"\x03imu\x18\x01 \x01(\v2 .mavsdk.rpc.telemetry_server.ImuR\x03imu\"6\n" +
	"\x1bPublishUnixEpochTimeRequest\x12\x17\n" +
	"\atime_us\x18\x01 \x01(\x04R\x06timeUs\"t\n" +
	"\x1cPublishDistanceSensorRequest\x12T\n" +
	"\x0fdistance_sensor\x18\x01 \x01(\v2+.mavsdk.rpc.telemetry_server.DistanceSensorR\x0edistanceSensor\"\xb4\x01\n" +
	"\x16PublishAttitudeRequest\x12=\n" +
	"\x05angle\x18\x01 \x01(\v2'.mavsdk.rpc.telemetry_server.EulerAngleR\x05angle\x12[\n" +
	"\x10angular_velocity\x18\x02 \x01(\v20.mavsdk.rpc.telemetry_server.AngularVelocityBodyR\x0fangularVelocity\"\x81\x01\n" +
	"\"PublishVisualFlightRulesHudRequest\x12[\n" +
	"\x12fixed_wing_metrics\x18\x01 \x01(\v2-.mavsdk.rpc.telemetry_server.FixedwingMetricsR\x10fixedWingMetrics\"\x85\x01\n" +
	"\x17PublishPositionResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x81\x01\n" +
	"\x13PublishHomeResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x86\x01\n" +
	"\x18PublishSysStatusResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x8d\x01\n" +
	"\x1fPublishExtendedSysStateResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x83\x01\n" +
	"\x15PublishRawGpsResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x84\x01\n" +
	"\x16PublishBatteryResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x87\x01\n" +
	"\x19PublishStatusTextResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x85\x01\n" +
	"\x17PublishOdometryResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x90\x01\n" +
	"\"PublishPositionVelocityNedResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x88\x01\n" +
	"\x1aPublishGroundTruthResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x80\x01\n" +
	"\x12PublishImuResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x86\x01\n" +
	"\x18PublishScaledImuResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x83\x01\n" +
	"\x15PublishRawImuResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x8a\x01\n" +
	"\x1cPublishUnixEpochTimeResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x8b\x01\n" +
	"\x1dPublishDistanceSensorResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x85\x01\n" +
	"\x17PublishAttitudeResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\x91\x01\n" +
	"#PublishVisualFlightRulesHudResponse\x12j\n" +
	"\x17telemetry_server_result\x18\x01 \x01(\v22.mavsdk.rpc.telemetry_server.TelemetryServerResultR\x15telemetryServerResult\"\xd6\x01\n" +
	"\bPosition\x12*\n" +
	"\flatitude_deg\x18\x01 \x01(\x01B\a\x82\xb5\x18\x03NaNR\vlatitudeDeg\x12,\n" +
	"\rlongitude_deg\x18\x02 \x01(\x01B\a\x82\xb5\x18\x03NaNR\flongitudeDeg\x127\n" +
	"\x13absolute_altitude_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11absoluteAltitudeM\x127\n" +
	"\x13relative_altitude_m\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11relativeAltitudeM\"3\n" +
	"\aHeading\x12(\n" +
	"\vheading_deg\x18\x01 \x01(\x01B\a\x82\xb5\x18\x03NaNR\n" +
	"headingDeg\"\x8b\x01\n" +
	"\n" +
	"Quaternion\x12\x15\n" +
	"\x01w\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01w\x12\x15\n" +
	"\x01x\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01x\x12\x15\n" +
	"\x01y\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01y\x12\x15\n" +
	"\x01z\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x01z\x12!\n" +
	"\ftimestamp_us\x18\x05 \x01(\x04R\vtimestampUs\"\x9b\x01\n" +
	"\n" +
	"EulerAngle\x12\"\n" +
	"\broll_deg\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\arollDeg\x12$\n" +
	"\tpitch_deg\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\bpitchDeg\x12 \n" +
	"\ayaw_deg\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x06yawDeg\x12!\n" +
	"\ftimestamp_us\x18\x04 \x01(\x04R\vtimestampUs\"\x8a\x01\n" +
	"\x13AngularVelocityBody\x12%\n" +
	"\n" +
	"roll_rad_s\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\brollRadS\x12'\n" +
	"\vpitch_rad_s\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\tpitchRadS\x12#\n" +
	"\tyaw_rad_s\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\ayawRadS\"x\n" +
	"\aGpsInfo\x12,\n" +
	"\x0enum_satellites\x18\x01 \x01(\x05B\x05\x82\xb5\x18\x010R\rnumSatellites\x12?\n" +
	"\bfix_type\x18\x02 \x01(\x0e2$.mavsdk.rpc.telemetry_server.FixTypeR\afixType\"\xb2\x04\n" +
	"\x06RawGps\x12!\n" +
	"\ftimestamp_us\x18\x01 \x01(\x04R\vtimestampUs\x12!\n" +
	"\flatitude_deg\x18\x02 \x01(\x01R\vlatitudeDeg\x12#\n" +
	"\rlongitude_deg\x18\x03 \x01(\x01R\flongitudeDeg\x12.\n" +
	"\x13absolute_altitude_m\x18\x04 \x01(\x02R\x11absoluteAltitudeM\x12\x12\n" +
	"\x04hdop\x18\x05 \x01(\x02R\x04hdop\x12\x12\n" +
	"\x04vdop\x18\x06 \x01(\x02R\x04vdop\x12 \n" +
	"\fvelocity_m_s\x18\a \x01(\x02R\n" +
	"velocityMS\x12\x17\n" +
	"\acog_deg\x18\b \x01(\x02R\x06cogDeg\x120\n" +
	"\x14altitude_ellipsoid_m\x18\t \x01(\x02R\x12altitudeEllipsoidM\x128\n" +
	"\x18horizontal_uncertainty_m\x18\n" +
	" \x01(\x02R\x16horizontalUncertaintyM\x124\n" +
	"\x16vertical_uncertainty_m\x18\v \x01(\x02R\x14verticalUncertaintyM\x127\n" +
	"\x18velocity_uncertainty_m_s\x18\f \x01(\x02R\x15velocityUncertaintyMS\x126\n" +
	"\x17heading_uncertainty_deg\x18\r \x01(\x02R\x15headingUncertaintyDeg\x12\x17\n" +
	"\ayaw_deg\x18\x0e \x01(\x02R\x06yawDeg\"e\n" +
	"\aBattery\x12$\n" +
	"\tvoltage_v\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\bvoltageV\x124\n" +
	"\x11remaining_percent\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10remainingPercent\"\xb2\x01\n" +
	"\bRcStatus\x127\n" +
	"\x12was_available_once\x18\x01 \x01(\bB\t\x82\xb5\x18\x05falseR\x10wasAvailableOnce\x12,\n" +
	"\fis_available\x18\x02 \x01(\bB\t\x82\xb5\x18\x05falseR\visAvailable\x12?\n" +
	"\x17signal_strength_percent\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x15signalStrengthPercent\"a\n" +
	"\n" +
	"StatusText\x12?\n" +
	"\x04type\x18\x01 \x01(\x0e2+.mavsdk.rpc.telemetry_server.StatusTextTypeR\x04type\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"P\n" +
	"\x15ActuatorControlTarget\x12\x1b\n" +
	"\x05group\x18\x01 \x01(\x05B\x05\x82\xb5\x18\x010R\x05group\x12\x1a\n" +
	"\bcontrols\x18\x02 \x03(\x02R\bcontrols\"Q\n" +
	"\x14ActuatorOutputStatus\x12\x1d\n" +
	"\x06active\x18\x01 \x01(\rB\x05\x82\xb5\x18\x010R\x06active\x12\x1a\n" +
	"\bactuator\x18\x02 \x03(\x02R\bactuator\"9\n" +
	"\n" +
	"Covariance\x12+\n" +
	"\x11covariance_matrix\x18\x01 \x03(\x02R\x10covarianceMatrix\"J\n" +
	"\fVelocityBody\x12\x12\n" +
	"\x05x_m_s\x18\x01 \x01(\x02R\x03xMS\x12\x12\n" +
	"\x05y_m_s\x18\x02 \x01(\x02R\x03yMS\x12\x12\n" +
	"\x05z_m_s\x18\x03 \x01(\x02R\x03zMS\"A\n" +
	"\fPositionBody\x12\x0f\n" +
	"\x03x_m\x18\x01 \x01(\x02R\x02xM\x12\x0f\n" +
	"\x03y_m\x18\x02 \x01(\x02R\x02yM\x12\x0f\n" +
	"\x03z_m\x18\x03 \x01(\x02R\x02zM\"\x9d\x06\n" +
	"\bOdometry\x12\x1b\n" +
	"\ttime_usec\x18\x01 \x01(\x04R\btimeUsec\x12I\n" +
	"\bframe_id\x18\x02 \x01(\x0e2..mavsdk.rpc.telemetry_server.Odometry.MavFrameR\aframeId\x12T\n" +
	"\x0echild_frame_id\x18\x03 \x01(\x0e2..mavsdk.rpc.telemetry_server.Odometry.MavFrameR\fchildFrameId\x12N\n" +
	"\rposition_body\x18\x04 \x01(\v2).mavsdk.rpc.telemetry_server.PositionBodyR\fpositionBody\x125\n" +
	"\x01q\x18\x05 \x01(\v2'.mavsdk.rpc.telemetry_server.QuaternionR\x01q\x12N\n" +
	"\rvelocity_body\x18\x06 \x01(\v2).mavsdk.rpc.telemetry_server.VelocityBodyR\fvelocityBody\x12d\n" +
	"\x15angular_velocity_body\x18\a \x01(\v20.mavsdk.rpc.telemetry_server.AngularVelocityBodyR\x13angularVelocityBody\x12P\n" +
	"\x0fpose_covariance\x18\b \x01(\v2'.mavsdk.rpc.telemetry_server.CovarianceR\x0eposeCovariance\x12X\n" +
	"\x13velocity_covariance\x18\t \x01(\v2'.mavsdk.rpc.telemetry_server.CovarianceR\x12velocityCovariance\"j\n" +
	"\bMavFrame\x12\x13\n" +
	"\x0fMAV_FRAME_UNDEF\x10\x00\x12\x16\n" +
	"\x12MAV_FRAME_BODY_NED\x10\b\x12\x18\n" +
	"\x14MAV_FRAME_VISION_NED\x10\x10\x12\x17\n" +
	"\x13MAV_FRAME_ESTIM_NED\x10\x12\"\xb5\x01\n" +
	"\x0eDistanceSensor\x125\n" +
	"\x12minimum_distance_m\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10minimumDistanceM\x125\n" +
	"\x12maximum_distance_m\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10maximumDistanceM\x125\n" +
	"\x12current_distance_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x10currentDistanceM\"\x9f\x02\n" +
	"\x0eScaledPressure\x12!\n" +
	"\ftimestamp_us\x18\x01 \x01(\x04R\vtimestampUs\x122\n" +
	"\x15absolute_pressure_hpa\x18\x02 \x01(\x02R\x13absolutePressureHpa\x12:\n" +
	"\x19differential_pressure_hpa\x18\x03 \x01(\x02R\x17differentialPressureHpa\x12'\n" +
	"\x0ftemperature_deg\x18\x04 \x01(\x02R\x0etemperatureDeg\x12Q\n" +
	"%differential_pressure_temperature_deg\x18\x05 \x01(\x02R\"differentialPressureTemperatureDeg\"o\n" +
	"\vPositionNed\x12 \n" +
	"\anorth_m\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x06northM\x12\x1e\n" +
	"\x06east_m\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x05eastM\x12\x1e\n" +
	"\x06down_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x05downM\"]\n" +
	"\vVelocityNed\x12\x1a\n" +
	"\tnorth_m_s\x18\x01 \x01(\x02R\anorthMS\x12\x18\n" +
	"\beast_m_s\x18\x02 \x01(\x02R\x06eastMS\x12\x18\n" +
	"\bdown_m_s\x18\x03 \x01(\x02R\x06downMS\"\xa1\x01\n" +
	"\x13PositionVelocityNed\x12D\n" +
	"\bposition\x18\x01 \x01(\v2(.mavsdk.rpc.telemetry_server.PositionNedR\bposition\x12D\n" +
	"\bvelocity\x18\x02 \x01(\v2(.mavsdk.rpc.telemetry_server.VelocityNedR\bvelocity\"\xa0\x01\n" +
	"\vGroundTruth\x12*\n" +
	"\flatitude_deg\x18\x01 \x01(\x01B\a\x82\xb5\x18\x03NaNR\vlatitudeDeg\x12,\n" +
	"\rlongitude_deg\x18\x02 \x01(\x01B\a\x82\xb5\x18\x03NaNR\flongitudeDeg\x127\n" +
	"\x13absolute_altitude_m\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11absoluteAltitudeM\"\xb9\x02\n" +
	"\x10FixedwingMetrics\x12)\n" +
	"\fairspeed_m_s\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\n" +
	"airspeedMS\x128\n" +
	"\x13throttle_percentage\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x12throttlePercentage\x12,\n" +
	"\x0eclimb_rate_m_s\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\vclimbRateMS\x12/\n" +
	"\x0fgroundspeed_m_s\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\rgroundspeedMS\x12(\n" +
	"\vheading_deg\x18\x05 \x01(\x02B\a\x82\xb5\x18\x03NaNR\n" +
	"headingDeg\x127\n" +
	"\x13absolute_altitude_m\x18\x06 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x11absoluteAltitudeM\"\x88\x01\n" +
	"\x0fAccelerationFrd\x12)\n" +
	"\fforward_m_s2\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\n" +
	"forwardMS2\x12%\n" +
	"\n" +
	"right_m_s2\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\brightMS2\x12#\n" +
	"\tdown_m_s2\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\adownMS2\"\x91\x01\n" +
	"\x12AngularVelocityFrd\x12+\n" +
	"\rforward_rad_s\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\vforwardRadS\x12'\n" +
	"\vright_rad_s\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\trightRadS\x12%\n" +
	"\n" +
	"down_rad_s\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\bdownRadS\"\x92\x01\n" +
	"\x10MagneticFieldFrd\x12,\n" +
	"\rforward_gauss\x18\x01 \x01(\x02B\a\x82\xb5\x18\x03NaNR\fforwardGauss\x12(\n" +
	"\vright_gauss\x18\x02 \x01(\x02B\a\x82\xb5\x18\x03NaNR\n" +
	"rightGauss\x12&\n" +
	"\n" +
	"down_gauss\x18\x03 \x01(\x02B\a\x82\xb5\x18\x03NaNR\tdownGauss\"\xf5\x02\n" +
	"\x03Imu\x12W\n" +
	"\x10acceleration_frd\x18\x01 \x01(\v2,.mavsdk.rpc.telemetry_server.AccelerationFrdR\x0faccelerationFrd\x12a\n" +
	"\x14angular_velocity_frd\x18\x02 \x01(\v2/.mavsdk.rpc.telemetry_server.AngularVelocityFrdR\x12angularVelocityFrd\x12[\n" +
	"\x12magnetic_field_frd\x18\x03 \x01(\v2-.mavsdk.rpc.telemetry_server.MagneticFieldFrdR\x10magneticFieldFrd\x122\n" +
	"\x10temperature_degc\x18\x04 \x01(\x02B\a\x82\xb5\x18\x03NaNR\x0ftemperatureDegc\x12!\n" +
	"\ftimestamp_us\x18\x05 \x01(\x04R\vtimestampUs\"\xc7\x02\n" +
	"\x15TelemetryServerResult\x12Q\n" +
	"\x06result\x18\x01 \x01(\x0e29.mavsdk.rpc.telemetry_server.TelemetryServerResult.ResultR\x06result\x12\x1d\n" +
	"\n" +
	"result_str\x18\x02 \x01(\tR\tresultStr\"\xbb\x01\n" +
	"\x06Result\x12\x12\n" +
	"\x0eRESULT_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eRESULT_SUCCESS\x10\x01\x12\x14\n" +
	"\x10RESULT_NO_SYSTEM\x10\x02\x12\x1b\n" +
	"\x17RESULT_CONNECTION_ERROR\x10\x03\x12\x0f\n" +
	"\vRESULT_BUSY\x10\x04\x12\x19\n" +
	"\x15RESULT_COMMAND_DENIED\x10\x05\x12\x12\n" +
	"\x0eRESULT_TIMEOUT\x10\x06\x12\x16\n" +
	"\x12RESULT_UNSUPPORTED\x10\a*\xa4\x01\n" +
	"\aFixType\x12\x13\n" +
	"\x0fFIX_TYPE_NO_GPS\x10\x00\x12\x13\n" +
	"\x0fFIX_TYPE_NO_FIX\x10\x01\x12\x13\n" +
	"\x0fFIX_TYPE_FIX_2D\x10\x02\x12\x13\n" +
	"\x0fFIX_TYPE_FIX_3D\x10\x03\x12\x15\n" +
	"\x11FIX_TYPE_FIX_DGPS\x10\x04\x12\x16\n" +
	"\x12FIX_TYPE_RTK_FLOAT\x10\x05\x12\x16\n" +
	"\x12FIX_TYPE_RTK_FIXED\x10\x06*\x8d\x01\n" +
	"\tVtolState\x12\x18\n" +
	"\x14VTOL_STATE_UNDEFINED\x10\x00\x12\x1f\n" +
	"\x1bVTOL_STATE_TRANSITION_TO_FW\x10\x01\x12\x1f\n" +
	"\x1bVTOL_STATE_TRANSITION_TO_MC\x10\x02\x12\x11\n" +
	"\rVTOL_STATE_MC\x10\x03\x12\x11\n" +
	"\rVTOL_STATE_FW\x10\x04*\xf9\x01\n" +
	"\x0eStatusTextType\x12\x1a\n" +
	"\x16STATUS_TEXT_TYPE_DEBUG\x10\x00\x12\x19\n" +
	"\x15STATUS_TEXT_TYPE_INFO\x10\x01\x12\x1b\n" +
	"\x17STATUS_TEXT_TYPE_NOTICE\x10\x02\x12\x1c\n" +
	"\x18STATUS_TEXT_TYPE_WARNING\x10\x03\x12\x1a\n" +
	"\x16STATUS_TEXT_TYPE_ERROR\x10\x04\x12\x1d\n" +
	"\x19STATUS_TEXT_TYPE_CRITICAL\x10\x05\x12\x1a\n" +
	"\x16STATUS_TEXT_TYPE_ALERT\x10\x06\x12\x1e\n" +
	"\x1aSTATUS_TEXT_TYPE_EMERGENCY\x10\a*\x93\x01\n" +
	"\vLandedState\x12\x18\n" +
	"\x14LANDED_STATE_UNKNOWN\x10\x00\x12\x1a\n" +
	"\x16LANDED_STATE_ON_GROUND\x10\x01\x12\x17\n" +
	"\x13LANDED_STATE_IN_AIR\x10\x02\x12\x1b\n" +
	"\x17LANDED_STATE_TAKING_OFF\x10\x03\x12\x18\n" +
	"\x14LANDED_STATE_LANDING\x10\x042\xd1\x12\n" +
	"\x16TelemetryServerService\x12\x82\x01\n" +
	"\x0fPublishPosition\x123.mavsdk.rpc.telemetry_server.PublishPositionRequest\x1a4.mavsdk.rpc.telemetry_server.PublishPositionResponse\"\x04\x80\xb5\x18\x01\x12v\n" +
	"\vPublishHome\x12/.mavsdk.rpc.telemetry_server.PublishHomeRequest\x1a0.mavsdk.rpc.telemetry_server.PublishHomeResponse\"\x04\x80\xb5\x18\x01\x12\x85\x01\n" +
	"\x10PublishSysStatus\x124.mavsdk.rpc.telemetry_server.PublishSysStatusRequest\x1a5.mavsdk.rpc.telemetry_server.PublishSysStatusResponse\"\x04\x80\xb5\x18\x01\x12\x9a\x01\n" +
	"\x17PublishExtendedSysState\x12;.mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest\x1a<.mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse\"\x04\x80\xb5\x18\x01\x12|\n" +
	"\rPublishRawGps\x121.mavsdk.rpc.telemetry_server.PublishRawGpsRequest\x1a2.mavsdk.rpc.telemetry_server.PublishRawGpsResponse\"\x04\x80\xb5\x18\x01\x12\x7f\n" +
	"\x0ePublishBattery\x122.mavsdk.rpc.telemetry_server.PublishBatteryRequest\x1a3.mavsdk.rpc.telemetry_server.PublishBatteryResponse\"\x04\x80\xb5\x18\x01\x12\x88\x01\n" +
	"\x11PublishStatusText\x125.mavsdk.rpc.telemetry_server.PublishStatusTextRequest\x1a6.mavsdk.rpc.telemetry_server.PublishStatusTextResponse\"\x04\x80\xb5\x18\x01\x12\x82\x01\n" +
	"\x0fPublishOdometry\x123.mavsdk.rpc.telemetry_server.PublishOdometryRequest\x1a4.mavsdk.rpc.telemetry_server.PublishOdometryResponse\"\x04\x80\xb5\x18\x01\x12\xa3\x01\n" +
	"\x1aPublishPositionVelocityNed\x12>.mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest\x1a?.mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse\"\x04\x80\xb5\x18\x01\x12\x8b\x01\n" +
	"\x12PublishGroundTruth\x126.mavsdk.rpc.telemetry_server.PublishGroundTruthRequest\x1a7.mavsdk.rpc.telemetry_server.PublishGroundTruthResponse\"\x04\x80\xb5\x18\x01\x12s\n" +
	"\n" +
	"PublishImu\x12..mavsdk.rpc.telemetry_server.PublishImuRequest\x1a/.mavsdk.rpc.telemetry_server.PublishImuResponse\"\x04\x80\xb5\x18\x01\x12\x85\x01\n" +
	"\x10PublishScaledImu\x124.mavsdk.rpc.telemetry_server.PublishScaledImuRequest\x1a5.mavsdk.rpc.telemetry_server.PublishScaledImuResponse\"\x04\x80\xb5\x18\x01\x12|\n" +
	"\rPublishRawImu\x121.mavsdk.rpc.telemetry_server.PublishRawImuRequest\x1a2.mavsdk.rpc.telemetry_server.PublishRawImuResponse\"\x04\x80\xb5\x18\x01\x12\x91\x01\n" +
	"\x14PublishUnixEpochTime\x128.mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest\x1a9.mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse\"\x04\x80\xb5\x18\x01\x12\x94\x01\n" +
	"\x15PublishDistanceSensor\x129.mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest\x1a:.mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse\"\x04\x80\xb5\x18\x01\x12\x82\x01\n" +
	"\x0fPublishAttitude\x123.mavsdk.rpc.telemetry_server.PublishAttitudeRequest\x1a4.mavsdk.rpc.telemetry_server.PublishAttitudeResponse\"\x04\x80\xb5\x18\x01\x12\xa6\x01\n" +
	"\x1bPublishVisualFlightRulesHud\x12?.mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest\x1a@.mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse\"\x04\x80\xb5\x18\x01B*B\x14TelemetryServerProtoZ\x12.;telemetry_serverb\x06proto3"

var (
	file_telemetry_server_proto_rawDescOnce sync.Once
	file_telemetry_server_proto_rawDescData []byte
)

func file_telemetry_server_proto_rawDescGZIP() []byte {
	file_telemetry_server_proto_rawDescOnce.Do(func() {
		file_telemetry_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_telemetry_server_proto_rawDesc), len(file_telemetry_server_proto_rawDesc)))
	})
	return file_telemetry_server_proto_rawDescData
}

var file_telemetry_server_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_telemetry_server_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_telemetry_server_proto_goTypes = []any{
	(FixType)(0),                                // 0: mavsdk.rpc.telemetry_server.FixType
	(VtolState)(0),                              // 1: mavsdk.rpc.telemetry_server.VtolState
	(StatusTextType)(0),                         // 2: mavsdk.rpc.telemetry_server.StatusTextType
	(LandedState)(0),                            // 3: mavsdk.rpc.telemetry_server.LandedState
	(Odometry_MavFrame)(0),                      // 4: mavsdk.rpc.telemetry_server.Odometry.MavFrame
	(TelemetryServerResult_Result)(0),           // 5: mavsdk.rpc.telemetry_server.TelemetryServerResult.Result
	(*PublishPositionRequest)(nil),              // 6: mavsdk.rpc.telemetry_server.PublishPositionRequest
	(*PublishHomeRequest)(nil),                  // 7: mavsdk.rpc.telemetry_server.PublishHomeRequest
	(*PublishSysStatusRequest)(nil),             // 8: mavsdk.rpc.telemetry_server.PublishSysStatusRequest
	(*PublishExtendedSysStateRequest)(nil),      // 9: mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest
	(*PublishInAirRequest)(nil),                 // 10: mavsdk.rpc.telemetry_server.PublishInAirRequest
	(*PublishLandedStateRequest)(nil),           // 11: mavsdk.rpc.telemetry_server.PublishLandedStateRequest
	(*PublishRawGpsRequest)(nil),                // 12: mavsdk.rpc.telemetry_server.PublishRawGpsRequest
	(*PublishBatteryRequest)(nil),               // 13: mavsdk.rpc.telemetry_server.PublishBatteryRequest
	(*PublishRcStatusRequest)(nil),              // 14: mavsdk.rpc.telemetry_server.PublishRcStatusRequest
	(*PublishStatusTextRequest)(nil),            // 15: mavsdk.rpc.telemetry_server.PublishStatusTextRequest
	(*PublishOdometryRequest)(nil),              // 16: mavsdk.rpc.telemetry_server.PublishOdometryRequest
	(*PublishPositionVelocityNedRequest)(nil),   // 17: mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest
	(*PublishGroundTruthRequest)(nil),           // 18: mavsdk.rpc.telemetry_server.PublishGroundTruthRequest
	(*PublishImuRequest)(nil),                   // 19: mavsdk.rpc.telemetry_server.PublishImuRequest
	(*PublishScaledImuRequest)(nil),             // 20: mavsdk.rpc.telemetry_server.PublishScaledImuRequest
	(*PublishRawImuRequest)(nil),                // 21: mavsdk.rpc.telemetry_server.PublishRawImuRequest
	(*PublishUnixEpochTimeRequest)(nil),         // 22: mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest
	(*PublishDistanceSensorRequest)(nil),        // 23: mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest
	(*PublishAttitudeRequest)(nil),              // 24: mavsdk.rpc.telemetry_server.PublishAttitudeRequest
	(*PublishVisualFlightRulesHudRequest)(nil),  // 25: mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest
	(*PublishPositionResponse)(nil),             // 26: mavsdk.rpc.telemetry_server.PublishPositionResponse
	(*PublishHomeResponse)(nil),                 // 27: mavsdk.rpc.telemetry_server.PublishHomeResponse
	(*PublishSysStatusResponse)(nil),            // 28: mavsdk.rpc.telemetry_server.PublishSysStatusResponse
	(*PublishExtendedSysStateResponse)(nil),     // 29: mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse
	(*PublishRawGpsResponse)(nil),               // 30: mavsdk.rpc.telemetry_server.PublishRawGpsResponse
	(*PublishBatteryResponse)(nil),              // 31: mavsdk.rpc.telemetry_server.PublishBatteryResponse
	(*PublishStatusTextResponse)(nil),           // 32: mavsdk.rpc.telemetry_server.PublishStatusTextResponse
	(*PublishOdometryResponse)(nil),             // 33: mavsdk.rpc.telemetry_server.PublishOdometryResponse
	(*PublishPositionVelocityNedResponse)(nil),  // 34: mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse
	(*PublishGroundTruthResponse)(nil),          // 35: mavsdk.rpc.telemetry_server.PublishGroundTruthResponse
	(*PublishImuResponse)(nil),                  // 36: mavsdk.rpc.telemetry_server.PublishImuResponse
	(*PublishScaledImuResponse)(nil),            // 37: mavsdk.rpc.telemetry_server.PublishScaledImuResponse
	(*PublishRawImuResponse)(nil),               // 38: mavsdk.rpc.telemetry_server.PublishRawImuResponse
	(*PublishUnixEpochTimeResponse)(nil),        // 39: mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse
	(*PublishDistanceSensorResponse)(nil),       // 40: mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse
	(*PublishAttitudeResponse)(nil),             // 41: mavsdk.rpc.telemetry_server.PublishAttitudeResponse
	(*PublishVisualFlightRulesHudResponse)(nil), // 42: mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse
	(*Position)(nil),                            // 43: mavsdk.rpc.telemetry_server.Position
	(*Heading)(nil),                             // 44: mavsdk.rpc.telemetry_server.Heading
	(*Quaternion)(nil),                          // 45: mavsdk.rpc.telemetry_server.Quaternion
	(*EulerAngle)(nil),                          // 46: mavsdk.rpc.telemetry_server.EulerAngle
	(*AngularVelocityBody)(nil),                 // 47: mavsdk.rpc.telemetry_server.AngularVelocityBody
	(*GpsInfo)(nil),                             // 48: mavsdk.rpc.telemetry_server.GpsInfo
	(*RawGps)(nil),                              // 49: mavsdk.rpc.telemetry_server.RawGps
	(*Battery)(nil),                             // 50: mavsdk.rpc.telemetry_server.Battery
	(*RcStatus)(nil),                            // 51: mavsdk.rpc.telemetry_server.RcStatus
	(*StatusText)(nil),                          // 52: mavsdk.rpc.telemetry_server.StatusText
	(*ActuatorControlTarget)(nil),               // 53: mavsdk.rpc.telemetry_server.ActuatorControlTarget
	(*ActuatorOutputStatus)(nil),                // 54: mavsdk.rpc.telemetry_server.ActuatorOutputStatus
	(*Covariance)(nil),                          // 55: mavsdk.rpc.telemetry_server.Covariance
	(*VelocityBody)(nil),                        // 56: mavsdk.rpc.telemetry_server.VelocityBody
	(*PositionBody)(nil),                        // 57: mavsdk.rpc.telemetry_server.PositionBody
	(*Odometry)(nil),                            // 58: mavsdk.rpc.telemetry_server.Odometry
	(*DistanceSensor)(nil),                      // 59: mavsdk.rpc.telemetry_server.DistanceSensor
	(*ScaledPressure)(nil),                      // 60: mavsdk.rpc.telemetry_server.ScaledPressure
	(*PositionNed)(nil),                         // 61: mavsdk.rpc.telemetry_server.PositionNed
	(*VelocityNed)(nil),                         // 62: mavsdk.rpc.telemetry_server.VelocityNed
	(*PositionVelocityNed)(nil),                 // 63: mavsdk.rpc.telemetry_server.PositionVelocityNed
	(*GroundTruth)(nil),                         // 64: mavsdk.rpc.telemetry_server.GroundTruth
	(*FixedwingMetrics)(nil),                    // 65: mavsdk.rpc.telemetry_server.FixedwingMetrics
	(*AccelerationFrd)(nil),                     // 66: mavsdk.rpc.telemetry_server.AccelerationFrd
	(*AngularVelocityFrd)(nil),                  // 67: mavsdk.rpc.telemetry_server.AngularVelocityFrd
	(*MagneticFieldFrd)(nil),                    // 68: mavsdk.rpc.telemetry_server.MagneticFieldFrd
	(*Imu)(nil),                                 // 69: mavsdk.rpc.telemetry_server.Imu
	(*TelemetryServerResult)(nil),               // 70: mavsdk.rpc.telemetry_server.TelemetryServerResult
}
var file_telemetry_server_proto_depIdxs = []int32{
	43, // 0: mavsdk.rpc.telemetry_server.PublishPositionRequest.position:type_name -> mavsdk.rpc.telemetry_server.Position
	62, // 1: mavsdk.rpc.telemetry_server.PublishPositionRequest.velocity_ned:type_name -> mavsdk.rpc.telemetry_server.VelocityNed
	44, // 2: mavsdk.rpc.telemetry_server.PublishPositionRequest.heading:type_name -> mavsdk.rpc.telemetry_server.Heading
	43, // 3: mavsdk.rpc.telemetry_server.PublishHomeRequest.home:type_name -> mavsdk.rpc.telemetry_server.Position
	50, // 4: mavsdk.rpc.telemetry_server.PublishSysStatusRequest.battery:type_name -> mavsdk.rpc.telemetry_server.Battery
	1,  // 5: mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.vtol_state:type_name -> mavsdk.rpc.telemetry_server.VtolState
	3,  // 6: mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest.landed_state:type_name -> mavsdk.rpc.telemetry_server.LandedState
	3,  // 7: mavsdk.rpc.telemetry_server.PublishLandedStateRequest.landed_state:type_name -> mavsdk.rpc.telemetry_server.LandedState
	49, // 8: mavsdk.rpc.telemetry_server.PublishRawGpsRequest.raw_gps:type_name -> mavsdk.rpc.telemetry_server.RawGps
	48, // 9: mavsdk.rpc.telemetry_server.PublishRawGpsRequest.gps_info:type_name -> mavsdk.rpc.telemetry_server.GpsInfo
	50, // 10: mavsdk.rpc.telemetry_server.PublishBatteryRequest.battery:type_name -> mavsdk.rpc.telemetry_server.Battery
	51, // 11: mavsdk.rpc.telemetry_server.PublishRcStatusRequest.rc_status:type_name -> mavsdk.rpc.telemetry_server.RcStatus
	52, // 12: mavsdk.rpc.telemetry_server.PublishStatusTextRequest.status_text:type_name -> mavsdk.rpc.telemetry_server.StatusText
	58, // 13: mavsdk.rpc.telemetry_server.PublishOdometryRequest.odometry:type_name -> mavsdk.rpc.telemetry_server.Odometry
	63, // 14: mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest.position_velocity_ned:type_name -> mavsdk.rpc.telemetry_server.PositionVelocityNed
	64, // 15: mavsdk.rpc.telemetry_server.PublishGroundTruthRequest.ground_truth:type_name -> mavsdk.rpc.telemetry_server.GroundTruth
	69, // 16: mavsdk.rpc.telemetry_server.PublishImuRequest.imu:type_name -> mavsdk.rpc.telemetry_server.Imu
	69, // 17: mavsdk.rpc.telemetry_server.PublishScaledImuRequest.imu:type_name -> mavsdk.rpc.telemetry_server.Imu
	69, // 18: mavsdk.rpc.telemetry_server.PublishRawImuRequest.imu:type_name -> mavsdk.rpc.telemetry_server.Imu
	59, // 19: mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest.distance_sensor:type_name -> mavsdk.rpc.telemetry_server.DistanceSensor
	46, // 20: mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angle:type_name -> mavsdk.rpc.telemetry_server.EulerAngle
	47, // 21: mavsdk.rpc.telemetry_server.PublishAttitudeRequest.angular_velocity:type_name -> mavsdk.rpc.telemetry_server.AngularVelocityBody
	65, // 22: mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest.fixed_wing_metrics:type_name -> mavsdk.rpc.telemetry_server.FixedwingMetrics
	70, // 23: mavsdk.rpc.telemetry_server.PublishPositionResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 24: mavsdk.rpc.telemetry_server.PublishHomeResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 25: mavsdk.rpc.telemetry_server.PublishSysStatusResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 26: mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 27: mavsdk.rpc.telemetry_server.PublishRawGpsResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 28: mavsdk.rpc.telemetry_server.PublishBatteryResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 29: mavsdk.rpc.telemetry_server.PublishStatusTextResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 30: mavsdk.rpc.telemetry_server.PublishOdometryResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 31: mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 32: mavsdk.rpc.telemetry_server.PublishGroundTruthResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 33: mavsdk.rpc.telemetry_server.PublishImuResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 34: mavsdk.rpc.telemetry_server.PublishScaledImuResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 35: mavsdk.rpc.telemetry_server.PublishRawImuResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 36: mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 37: mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 38: mavsdk.rpc.telemetry_server.PublishAttitudeResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	70, // 39: mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse.telemetry_server_result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult
	0,  // 40: mavsdk.rpc.telemetry_server.GpsInfo.fix_type:type_name -> mavsdk.rpc.telemetry_server.FixType
	2,  // 41: mavsdk.rpc.telemetry_server.StatusText.type:type_name -> mavsdk.rpc.telemetry_server.StatusTextType
	4,  // 42: mavsdk.rpc.telemetry_server.Odometry.frame_id:type_name -> mavsdk.rpc.telemetry_server.Odometry.MavFrame
	4,  // 43: mavsdk.rpc.telemetry_server.Odometry.child_frame_id:type_name -> mavsdk.rpc.telemetry_server.Odometry.MavFrame
	57, // 44: mavsdk.rpc.telemetry_server.Odometry.position_body:type_name -> mavsdk.rpc.telemetry_server.PositionBody
	45, // 45: mavsdk.rpc.telemetry_server.Odometry.q:type_name -> mavsdk.rpc.telemetry_server.Quaternion
	56, // 46: mavsdk.rpc.telemetry_server.Odometry.velocity_body:type_name -> mavsdk.rpc.telemetry_server.VelocityBody
	47, // 47: mavsdk.rpc.telemetry_server.Odometry.angular_velocity_body:type_name -> mavsdk.rpc.telemetry_server.AngularVelocityBody
	55, // 48: mavsdk.rpc.telemetry_server.Odometry.pose_covariance:type_name -> mavsdk.rpc.telemetry_server.Covariance
	55, // 49: mavsdk.rpc.telemetry_server.Odometry.velocity_covariance:type_name -> mavsdk.rpc.telemetry_server.Covariance
	61, // 50: mavsdk.rpc.telemetry_server.PositionVelocityNed.position:type_name -> mavsdk.rpc.telemetry_server.PositionNed
	62, // 51: mavsdk.rpc.telemetry_server.PositionVelocityNed.velocity:type_name -> mavsdk.rpc.telemetry_server.VelocityNed
	66, // 52: mavsdk.rpc.telemetry_server.Imu.acceleration_frd:type_name -> mavsdk.rpc.telemetry_server.AccelerationFrd
	67, // 53: mavsdk.rpc.telemetry_server.Imu.angular_velocity_frd:type_name -> mavsdk.rpc.telemetry_server.AngularVelocityFrd
	68, // 54: mavsdk.rpc.telemetry_server.Imu.magnetic_field_frd:type_name -> mavsdk.rpc.telemetry_server.MagneticFieldFrd
	5,  // 55: mavsdk.rpc.telemetry_server.TelemetryServerResult.result:type_name -> mavsdk.rpc.telemetry_server.TelemetryServerResult.Result
	6,  // 56: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishPosition:input_type -> mavsdk.rpc.telemetry_server.PublishPositionRequest
	7,  // 57: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishHome:input_type -> mavsdk.rpc.telemetry_server.PublishHomeRequest
	8,  // 58: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishSysStatus:input_type -> mavsdk.rpc.telemetry_server.PublishSysStatusRequest
	9,  // 59: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishExtendedSysState:input_type -> mavsdk.rpc.telemetry_server.PublishExtendedSysStateRequest
	12, // 60: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishRawGps:input_type -> mavsdk.rpc.telemetry_server.PublishRawGpsRequest
	13, // 61: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishBattery:input_type -> mavsdk.rpc.telemetry_server.PublishBatteryRequest
	15, // 62: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishStatusText:input_type -> mavsdk.rpc.telemetry_server.PublishStatusTextRequest
	16, // 63: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishOdometry:input_type -> mavsdk.rpc.telemetry_server.PublishOdometryRequest
	17, // 64: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishPositionVelocityNed:input_type -> mavsdk.rpc.telemetry_server.PublishPositionVelocityNedRequest
	18, // 65: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishGroundTruth:input_type -> mavsdk.rpc.telemetry_server.PublishGroundTruthRequest
	19, // 66: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishImu:input_type -> mavsdk.rpc.telemetry_server.PublishImuRequest
	20, // 67: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishScaledImu:input_type -> mavsdk.rpc.telemetry_server.PublishScaledImuRequest
	21, // 68: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishRawImu:input_type -> mavsdk.rpc.telemetry_server.PublishRawImuRequest
	22, // 69: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishUnixEpochTime:input_type -> mavsdk.rpc.telemetry_server.PublishUnixEpochTimeRequest
	23, // 70: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishDistanceSensor:input_type -> mavsdk.rpc.telemetry_server.PublishDistanceSensorRequest
	24, // 71: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishAttitude:input_type -> mavsdk.rpc.telemetry_server.PublishAttitudeRequest
	25, // 72: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishVisualFlightRulesHud:input_type -> mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudRequest
	26, // 73: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishPosition:output_type -> mavsdk.rpc.telemetry_server.PublishPositionResponse
	27, // 74: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishHome:output_type -> mavsdk.rpc.telemetry_server.PublishHomeResponse
	28, // 75: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishSysStatus:output_type -> mavsdk.rpc.telemetry_server.PublishSysStatusResponse
	29, // 76: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishExtendedSysState:output_type -> mavsdk.rpc.telemetry_server.PublishExtendedSysStateResponse
	30, // 77: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishRawGps:output_type -> mavsdk.rpc.telemetry_server.PublishRawGpsResponse
	31, // 78: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishBattery:output_type -> mavsdk.rpc.telemetry_server.PublishBatteryResponse
	32, // 79: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishStatusText:output_type -> mavsdk.rpc.telemetry_server.PublishStatusTextResponse
	33, // 80: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishOdometry:output_type -> mavsdk.rpc.telemetry_server.PublishOdometryResponse
	34, // 81: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishPositionVelocityNed:output_type -> mavsdk.rpc.telemetry_server.PublishPositionVelocityNedResponse
	35, // 82: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishGroundTruth:output_type -> mavsdk.rpc.telemetry_server.PublishGroundTruthResponse
	36, // 83: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishImu:output_type -> mavsdk.rpc.telemetry_server.PublishImuResponse
	37, // 84: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishScaledImu:output_type -> mavsdk.rpc.telemetry_server.PublishScaledImuResponse
	38, // 85: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishRawImu:output_type -> mavsdk.rpc.telemetry_server.PublishRawImuResponse
	39, // 86: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishUnixEpochTime:output_type -> mavsdk.rpc.telemetry_server.PublishUnixEpochTimeResponse
	40, // 87: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishDistanceSensor:output_type -> mavsdk.rpc.telemetry_server.PublishDistanceSensorResponse
	41, // 88: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishAttitude:output_type -> mavsdk.rpc.telemetry_server.PublishAttitudeResponse
	42, // 89: mavsdk.rpc.telemetry_server.TelemetryServerService.PublishVisualFlightRulesHud:output_type -> mavsdk.rpc.telemetry_server.PublishVisualFlightRulesHudResponse
	73, // [73:90] is the sub-list for method output_type
	56, // [56:73] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_telemetry_server_proto_init() }
func file_telemetry_server_proto_init() {
	if File_telemetry_server_proto != nil {
		return
	}
	file_mavsdk_options_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_telemetry_server_proto_rawDesc), len(file_telemetry_server_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telemetry_server_proto_goTypes,
		DependencyIndexes: file_telemetry_server_proto_depIdxs,
		EnumInfos:         file_telemetry_server_proto_enumTypes,
		MessageInfos:      file_telemetry_server_proto_msgTypes,
	}.Build()
	File_telemetry_server_proto = out.File
	file_telemetry_server_proto_goTypes = nil
	file_telemetry_server_proto_depIdxs = nil
}
