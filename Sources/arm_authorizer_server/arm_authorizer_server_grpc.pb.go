// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: arm_authorizer_server.proto

package arm_authorizer_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArmAuthorizerServerService_SubscribeArmAuthorization_FullMethodName = "/mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService/SubscribeArmAuthorization"
	ArmAuthorizerServerService_AcceptArmAuthorization_FullMethodName    = "/mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService/AcceptArmAuthorization"
	ArmAuthorizerServerService_RejectArmAuthorization_FullMethodName    = "/mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService/RejectArmAuthorization"
)

// ArmAuthorizerServerServiceClient is the client API for ArmAuthorizerServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArmAuthorizerServerServiceClient interface {
	// Subscribe to arm authorization request messages. Each request received should respond to using RespondArmAuthorization
	SubscribeArmAuthorization(ctx context.Context, in *SubscribeArmAuthorizationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArmAuthorizationResponse], error)
	// Authorize arm for the specific time
	AcceptArmAuthorization(ctx context.Context, in *AcceptArmAuthorizationRequest, opts ...grpc.CallOption) (*AcceptArmAuthorizationResponse, error)
	// Reject arm authorization request
	RejectArmAuthorization(ctx context.Context, in *RejectArmAuthorizationRequest, opts ...grpc.CallOption) (*RejectArmAuthorizationResponse, error)
}

type armAuthorizerServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArmAuthorizerServerServiceClient(cc grpc.ClientConnInterface) ArmAuthorizerServerServiceClient {
	return &armAuthorizerServerServiceClient{cc}
}

func (c *armAuthorizerServerServiceClient) SubscribeArmAuthorization(ctx context.Context, in *SubscribeArmAuthorizationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ArmAuthorizationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ArmAuthorizerServerService_ServiceDesc.Streams[0], ArmAuthorizerServerService_SubscribeArmAuthorization_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeArmAuthorizationRequest, ArmAuthorizationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArmAuthorizerServerService_SubscribeArmAuthorizationClient = grpc.ServerStreamingClient[ArmAuthorizationResponse]

func (c *armAuthorizerServerServiceClient) AcceptArmAuthorization(ctx context.Context, in *AcceptArmAuthorizationRequest, opts ...grpc.CallOption) (*AcceptArmAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptArmAuthorizationResponse)
	err := c.cc.Invoke(ctx, ArmAuthorizerServerService_AcceptArmAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *armAuthorizerServerServiceClient) RejectArmAuthorization(ctx context.Context, in *RejectArmAuthorizationRequest, opts ...grpc.CallOption) (*RejectArmAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectArmAuthorizationResponse)
	err := c.cc.Invoke(ctx, ArmAuthorizerServerService_RejectArmAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArmAuthorizerServerServiceServer is the server API for ArmAuthorizerServerService service.
// All implementations must embed UnimplementedArmAuthorizerServerServiceServer
// for forward compatibility.
type ArmAuthorizerServerServiceServer interface {
	// Subscribe to arm authorization request messages. Each request received should respond to using RespondArmAuthorization
	SubscribeArmAuthorization(*SubscribeArmAuthorizationRequest, grpc.ServerStreamingServer[ArmAuthorizationResponse]) error
	// Authorize arm for the specific time
	AcceptArmAuthorization(context.Context, *AcceptArmAuthorizationRequest) (*AcceptArmAuthorizationResponse, error)
	// Reject arm authorization request
	RejectArmAuthorization(context.Context, *RejectArmAuthorizationRequest) (*RejectArmAuthorizationResponse, error)
	mustEmbedUnimplementedArmAuthorizerServerServiceServer()
}

// UnimplementedArmAuthorizerServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArmAuthorizerServerServiceServer struct{}

func (UnimplementedArmAuthorizerServerServiceServer) SubscribeArmAuthorization(*SubscribeArmAuthorizationRequest, grpc.ServerStreamingServer[ArmAuthorizationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeArmAuthorization not implemented")
}
func (UnimplementedArmAuthorizerServerServiceServer) AcceptArmAuthorization(context.Context, *AcceptArmAuthorizationRequest) (*AcceptArmAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptArmAuthorization not implemented")
}
func (UnimplementedArmAuthorizerServerServiceServer) RejectArmAuthorization(context.Context, *RejectArmAuthorizationRequest) (*RejectArmAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectArmAuthorization not implemented")
}
func (UnimplementedArmAuthorizerServerServiceServer) mustEmbedUnimplementedArmAuthorizerServerServiceServer() {
}
func (UnimplementedArmAuthorizerServerServiceServer) testEmbeddedByValue() {}

// UnsafeArmAuthorizerServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArmAuthorizerServerServiceServer will
// result in compilation errors.
type UnsafeArmAuthorizerServerServiceServer interface {
	mustEmbedUnimplementedArmAuthorizerServerServiceServer()
}

func RegisterArmAuthorizerServerServiceServer(s grpc.ServiceRegistrar, srv ArmAuthorizerServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedArmAuthorizerServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArmAuthorizerServerService_ServiceDesc, srv)
}

func _ArmAuthorizerServerService_SubscribeArmAuthorization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeArmAuthorizationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArmAuthorizerServerServiceServer).SubscribeArmAuthorization(m, &grpc.GenericServerStream[SubscribeArmAuthorizationRequest, ArmAuthorizationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ArmAuthorizerServerService_SubscribeArmAuthorizationServer = grpc.ServerStreamingServer[ArmAuthorizationResponse]

func _ArmAuthorizerServerService_AcceptArmAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptArmAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArmAuthorizerServerServiceServer).AcceptArmAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArmAuthorizerServerService_AcceptArmAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArmAuthorizerServerServiceServer).AcceptArmAuthorization(ctx, req.(*AcceptArmAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArmAuthorizerServerService_RejectArmAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectArmAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArmAuthorizerServerServiceServer).RejectArmAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArmAuthorizerServerService_RejectArmAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArmAuthorizerServerServiceServer).RejectArmAuthorization(ctx, req.(*RejectArmAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArmAuthorizerServerService_ServiceDesc is the grpc.ServiceDesc for ArmAuthorizerServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArmAuthorizerServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService",
	HandlerType: (*ArmAuthorizerServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptArmAuthorization",
			Handler:    _ArmAuthorizerServerService_AcceptArmAuthorization_Handler,
		},
		{
			MethodName: "RejectArmAuthorization",
			Handler:    _ArmAuthorizerServerService_RejectArmAuthorization_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeArmAuthorization",
			Handler:       _ArmAuthorizerServerService_SubscribeArmAuthorization_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arm_authorizer_server.proto",
}
