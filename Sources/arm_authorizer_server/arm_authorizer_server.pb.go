// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: arm_authorizer_server.proto

package arm_authorizer_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RejectionReason int32

const (
	RejectionReason_REJECTION_REASON_GENERIC          RejectionReason = 0 // Not a specific reason
	RejectionReason_REJECTION_REASON_NONE             RejectionReason = 1 // Authorizer will send the error as string to GCS
	RejectionReason_REJECTION_REASON_INVALID_WAYPOINT RejectionReason = 2 // At least one waypoint have a invalid value
	RejectionReason_REJECTION_REASON_TIMEOUT          RejectionReason = 3 // Timeout in the authorizer process(in case it depends on network)
	RejectionReason_REJECTION_REASON_AIRSPACE_IN_USE  RejectionReason = 4 // Airspace of the mission in use by another vehicle, second result parameter can have the waypoint id that caused it to be denied.
	RejectionReason_REJECTION_REASON_BAD_WEATHER      RejectionReason = 5 // Weather is not good to fly
)

// Enum value maps for RejectionReason.
var (
	RejectionReason_name = map[int32]string{
		0: "REJECTION_REASON_GENERIC",
		1: "REJECTION_REASON_NONE",
		2: "REJECTION_REASON_INVALID_WAYPOINT",
		3: "REJECTION_REASON_TIMEOUT",
		4: "REJECTION_REASON_AIRSPACE_IN_USE",
		5: "REJECTION_REASON_BAD_WEATHER",
	}
	RejectionReason_value = map[string]int32{
		"REJECTION_REASON_GENERIC":          0,
		"REJECTION_REASON_NONE":             1,
		"REJECTION_REASON_INVALID_WAYPOINT": 2,
		"REJECTION_REASON_TIMEOUT":          3,
		"REJECTION_REASON_AIRSPACE_IN_USE":  4,
		"REJECTION_REASON_BAD_WEATHER":      5,
	}
)

func (x RejectionReason) Enum() *RejectionReason {
	p := new(RejectionReason)
	*p = x
	return p
}

func (x RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_arm_authorizer_server_proto_enumTypes[0].Descriptor()
}

func (RejectionReason) Type() protoreflect.EnumType {
	return &file_arm_authorizer_server_proto_enumTypes[0]
}

func (x RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RejectionReason.Descriptor instead.
func (RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{0}
}

type ArmAuthorizerServerResult_Result int32

const (
	ArmAuthorizerServerResult_RESULT_UNKNOWN ArmAuthorizerServerResult_Result = 0 // Unknown result
	ArmAuthorizerServerResult_RESULT_SUCCESS ArmAuthorizerServerResult_Result = 1 // Command accepted
	ArmAuthorizerServerResult_RESULT_FAILED  ArmAuthorizerServerResult_Result = 2 // Command failed
)

// Enum value maps for ArmAuthorizerServerResult_Result.
var (
	ArmAuthorizerServerResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_FAILED",
	}
	ArmAuthorizerServerResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN": 0,
		"RESULT_SUCCESS": 1,
		"RESULT_FAILED":  2,
	}
)

func (x ArmAuthorizerServerResult_Result) Enum() *ArmAuthorizerServerResult_Result {
	p := new(ArmAuthorizerServerResult_Result)
	*p = x
	return p
}

func (x ArmAuthorizerServerResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmAuthorizerServerResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_arm_authorizer_server_proto_enumTypes[1].Descriptor()
}

func (ArmAuthorizerServerResult_Result) Type() protoreflect.EnumType {
	return &file_arm_authorizer_server_proto_enumTypes[1]
}

func (x ArmAuthorizerServerResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmAuthorizerServerResult_Result.Descriptor instead.
func (ArmAuthorizerServerResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{6, 0}
}

// Messages for SubscribeArmAuthorization
type SubscribeArmAuthorizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeArmAuthorizationRequest) Reset() {
	*x = SubscribeArmAuthorizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arm_authorizer_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeArmAuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeArmAuthorizationRequest) ProtoMessage() {}

func (x *SubscribeArmAuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arm_authorizer_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeArmAuthorizationRequest.ProtoReflect.Descriptor instead.
func (*SubscribeArmAuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{0}
}

type ArmAuthorizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId uint32 `protobuf:"varint,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"` // vehicle system id
}

func (x *ArmAuthorizationResponse) Reset() {
	*x = ArmAuthorizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arm_authorizer_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmAuthorizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmAuthorizationResponse) ProtoMessage() {}

func (x *ArmAuthorizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arm_authorizer_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmAuthorizationResponse.ProtoReflect.Descriptor instead.
func (*ArmAuthorizationResponse) Descriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{1}
}

func (x *ArmAuthorizationResponse) GetSystemId() uint32 {
	if x != nil {
		return x.SystemId
	}
	return 0
}

// Messages for RespondArmAuthorization
type AcceptArmAuthorizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidTimeS int32 `protobuf:"varint,1,opt,name=valid_time_s,json=validTimeS,proto3" json:"valid_time_s,omitempty"` // Time in seconds for which this authorization is valid
}

func (x *AcceptArmAuthorizationRequest) Reset() {
	*x = AcceptArmAuthorizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arm_authorizer_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptArmAuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptArmAuthorizationRequest) ProtoMessage() {}

func (x *AcceptArmAuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arm_authorizer_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptArmAuthorizationRequest.ProtoReflect.Descriptor instead.
func (*AcceptArmAuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{2}
}

func (x *AcceptArmAuthorizationRequest) GetValidTimeS() int32 {
	if x != nil {
		return x.ValidTimeS
	}
	return 0
}

// Result type
type AcceptArmAuthorizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArmAuthorizerServerResult *ArmAuthorizerServerResult `protobuf:"bytes,1,opt,name=arm_authorizer_server_result,json=armAuthorizerServerResult,proto3" json:"arm_authorizer_server_result,omitempty"` // Result enum value
}

func (x *AcceptArmAuthorizationResponse) Reset() {
	*x = AcceptArmAuthorizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arm_authorizer_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptArmAuthorizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptArmAuthorizationResponse) ProtoMessage() {}

func (x *AcceptArmAuthorizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arm_authorizer_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptArmAuthorizationResponse.ProtoReflect.Descriptor instead.
func (*AcceptArmAuthorizationResponse) Descriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{3}
}

func (x *AcceptArmAuthorizationResponse) GetArmAuthorizerServerResult() *ArmAuthorizerServerResult {
	if x != nil {
		return x.ArmAuthorizerServerResult
	}
	return nil
}

// Messages for RespondArmAuthorization
type RejectArmAuthorizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temporarily bool            `protobuf:"varint,1,opt,name=temporarily,proto3" json:"temporarily,omitempty"`                                             // True if the answer should be TEMPORARILY_REJECTED, false for DENIED
	Reason      RejectionReason `protobuf:"varint,2,opt,name=reason,proto3,enum=mavsdk.rpc.arm_authorizer_server.RejectionReason" json:"reason,omitempty"` // Reason for the arm to be rejected
	ExtraInfo   int32           `protobuf:"varint,3,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`                                // Extra information specific to the rejection reason (see https://mavlink.io/en/services/arm_authorization.html)
}

func (x *RejectArmAuthorizationRequest) Reset() {
	*x = RejectArmAuthorizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arm_authorizer_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectArmAuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectArmAuthorizationRequest) ProtoMessage() {}

func (x *RejectArmAuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arm_authorizer_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectArmAuthorizationRequest.ProtoReflect.Descriptor instead.
func (*RejectArmAuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{4}
}

func (x *RejectArmAuthorizationRequest) GetTemporarily() bool {
	if x != nil {
		return x.Temporarily
	}
	return false
}

func (x *RejectArmAuthorizationRequest) GetReason() RejectionReason {
	if x != nil {
		return x.Reason
	}
	return RejectionReason_REJECTION_REASON_GENERIC
}

func (x *RejectArmAuthorizationRequest) GetExtraInfo() int32 {
	if x != nil {
		return x.ExtraInfo
	}
	return 0
}

// Result type
type RejectArmAuthorizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArmAuthorizerServerResult *ArmAuthorizerServerResult `protobuf:"bytes,1,opt,name=arm_authorizer_server_result,json=armAuthorizerServerResult,proto3" json:"arm_authorizer_server_result,omitempty"` // Result enum value
}

func (x *RejectArmAuthorizationResponse) Reset() {
	*x = RejectArmAuthorizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arm_authorizer_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectArmAuthorizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectArmAuthorizationResponse) ProtoMessage() {}

func (x *RejectArmAuthorizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arm_authorizer_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectArmAuthorizationResponse.ProtoReflect.Descriptor instead.
func (*RejectArmAuthorizationResponse) Descriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{5}
}

func (x *RejectArmAuthorizationResponse) GetArmAuthorizerServerResult() *ArmAuthorizerServerResult {
	if x != nil {
		return x.ArmAuthorizerServerResult
	}
	return nil
}

type ArmAuthorizerServerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    ArmAuthorizerServerResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string                           `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                                                  // Human-readable English string describing the result
}

func (x *ArmAuthorizerServerResult) Reset() {
	*x = ArmAuthorizerServerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arm_authorizer_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmAuthorizerServerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmAuthorizerServerResult) ProtoMessage() {}

func (x *ArmAuthorizerServerResult) ProtoReflect() protoreflect.Message {
	mi := &file_arm_authorizer_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmAuthorizerServerResult.ProtoReflect.Descriptor instead.
func (*ArmAuthorizerServerResult) Descriptor() ([]byte, []int) {
	return file_arm_authorizer_server_proto_rawDescGZIP(), []int{6}
}

func (x *ArmAuthorizerServerResult) GetResult() ArmAuthorizerServerResult_Result {
	if x != nil {
		return x.Result
	}
	return ArmAuthorizerServerResult_RESULT_UNKNOWN
}

func (x *ArmAuthorizerServerResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

var File_arm_authorizer_server_proto protoreflect.FileDescriptor

var file_arm_authorizer_server_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x14, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x18, 0x41, 0x72, 0x6d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x22, 0x41, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x72, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1c, 0x61, 0x72, 0x6d, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x72, 0x6d, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x61, 0x72, 0x6d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1c, 0x61, 0x72, 0x6d, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x72, 0x6d, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x61, 0x72, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x22, 0x43,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0xd7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x49, 0x43, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x59,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x49, 0x52, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x32, 0x8a, 0x04,
	0x0a, 0x1a, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa3, 0x01, 0x0a,
	0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x72, 0x6d, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00,
	0x30, 0x01, 0x12, 0xa1, 0x01, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x72, 0x6d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x72, 0x6d, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x72, 0x6d, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0xa1, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x42, 0x33, 0x42, 0x18, 0x41, 0x72,
	0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x17, 0x2e, 0x3b, 0x61, 0x72, 0x6d, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arm_authorizer_server_proto_rawDescOnce sync.Once
	file_arm_authorizer_server_proto_rawDescData = file_arm_authorizer_server_proto_rawDesc
)

func file_arm_authorizer_server_proto_rawDescGZIP() []byte {
	file_arm_authorizer_server_proto_rawDescOnce.Do(func() {
		file_arm_authorizer_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_arm_authorizer_server_proto_rawDescData)
	})
	return file_arm_authorizer_server_proto_rawDescData
}

var file_arm_authorizer_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_arm_authorizer_server_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_arm_authorizer_server_proto_goTypes = []any{
	(RejectionReason)(0),                     // 0: mavsdk.rpc.arm_authorizer_server.RejectionReason
	(ArmAuthorizerServerResult_Result)(0),    // 1: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result
	(*SubscribeArmAuthorizationRequest)(nil), // 2: mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest
	(*ArmAuthorizationResponse)(nil),         // 3: mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse
	(*AcceptArmAuthorizationRequest)(nil),    // 4: mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest
	(*AcceptArmAuthorizationResponse)(nil),   // 5: mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse
	(*RejectArmAuthorizationRequest)(nil),    // 6: mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest
	(*RejectArmAuthorizationResponse)(nil),   // 7: mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse
	(*ArmAuthorizerServerResult)(nil),        // 8: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult
}
var file_arm_authorizer_server_proto_depIdxs = []int32{
	8, // 0: mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse.arm_authorizer_server_result:type_name -> mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult
	0, // 1: mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest.reason:type_name -> mavsdk.rpc.arm_authorizer_server.RejectionReason
	8, // 2: mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse.arm_authorizer_server_result:type_name -> mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult
	1, // 3: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.result:type_name -> mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerResult.Result
	2, // 4: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService.SubscribeArmAuthorization:input_type -> mavsdk.rpc.arm_authorizer_server.SubscribeArmAuthorizationRequest
	4, // 5: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService.AcceptArmAuthorization:input_type -> mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationRequest
	6, // 6: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService.RejectArmAuthorization:input_type -> mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest
	3, // 7: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService.SubscribeArmAuthorization:output_type -> mavsdk.rpc.arm_authorizer_server.ArmAuthorizationResponse
	5, // 8: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService.AcceptArmAuthorization:output_type -> mavsdk.rpc.arm_authorizer_server.AcceptArmAuthorizationResponse
	7, // 9: mavsdk.rpc.arm_authorizer_server.ArmAuthorizerServerService.RejectArmAuthorization:output_type -> mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_arm_authorizer_server_proto_init() }
func file_arm_authorizer_server_proto_init() {
	if File_arm_authorizer_server_proto != nil {
		return
	}
	
	if !protoimpl.UnsafeEnabled {
		file_arm_authorizer_server_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeArmAuthorizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arm_authorizer_server_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ArmAuthorizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arm_authorizer_server_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AcceptArmAuthorizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arm_authorizer_server_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AcceptArmAuthorizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arm_authorizer_server_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RejectArmAuthorizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arm_authorizer_server_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RejectArmAuthorizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arm_authorizer_server_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ArmAuthorizerServerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arm_authorizer_server_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_arm_authorizer_server_proto_goTypes,
		DependencyIndexes: file_arm_authorizer_server_proto_depIdxs,
		EnumInfos:         file_arm_authorizer_server_proto_enumTypes,
		MessageInfos:      file_arm_authorizer_server_proto_msgTypes,
	}.Build()
	File_arm_authorizer_server_proto = out.File
	file_arm_authorizer_server_proto_rawDesc = nil
	file_arm_authorizer_server_proto_goTypes = nil
	file_arm_authorizer_server_proto_depIdxs = nil
}
