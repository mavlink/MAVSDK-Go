// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: camera.proto

package camera

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Camera mode type.
type Mode int32

const (
	Mode_MODE_UNKNOWN Mode = 0 // Unknown
	Mode_MODE_PHOTO   Mode = 1 // Photo mode
	Mode_MODE_VIDEO   Mode = 2 // Video mode
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_PHOTO",
		2: "MODE_VIDEO",
	}
	Mode_value = map[string]int32{
		"MODE_UNKNOWN": 0,
		"MODE_PHOTO":   1,
		"MODE_VIDEO":   2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_camera_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{0}
}

// Photos range type.
type PhotosRange int32

const (
	PhotosRange_PHOTOS_RANGE_ALL              PhotosRange = 0 // All the photos present on the camera
	PhotosRange_PHOTOS_RANGE_SINCE_CONNECTION PhotosRange = 1 // Photos taken since MAVSDK got connected
)

// Enum value maps for PhotosRange.
var (
	PhotosRange_name = map[int32]string{
		0: "PHOTOS_RANGE_ALL",
		1: "PHOTOS_RANGE_SINCE_CONNECTION",
	}
	PhotosRange_value = map[string]int32{
		"PHOTOS_RANGE_ALL":              0,
		"PHOTOS_RANGE_SINCE_CONNECTION": 1,
	}
)

func (x PhotosRange) Enum() *PhotosRange {
	p := new(PhotosRange)
	*p = x
	return p
}

func (x PhotosRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhotosRange) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_proto_enumTypes[1].Descriptor()
}

func (PhotosRange) Type() protoreflect.EnumType {
	return &file_camera_proto_enumTypes[1]
}

func (x PhotosRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhotosRange.Descriptor instead.
func (PhotosRange) EnumDescriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{1}
}

// Possible results returned for camera commands
type CameraResult_Result int32

const (
	CameraResult_RESULT_UNKNOWN              CameraResult_Result = 0 // Unknown result
	CameraResult_RESULT_SUCCESS              CameraResult_Result = 1 // Command executed successfully
	CameraResult_RESULT_IN_PROGRESS          CameraResult_Result = 2 // Command in progress
	CameraResult_RESULT_BUSY                 CameraResult_Result = 3 // Camera is busy and rejected command
	CameraResult_RESULT_DENIED               CameraResult_Result = 4 // Camera denied the command
	CameraResult_RESULT_ERROR                CameraResult_Result = 5 // An error has occurred while executing the command
	CameraResult_RESULT_TIMEOUT              CameraResult_Result = 6 // Command timed out
	CameraResult_RESULT_WRONG_ARGUMENT       CameraResult_Result = 7 // Command has wrong argument(s)
	CameraResult_RESULT_NO_SYSTEM            CameraResult_Result = 8 // No system connected
	CameraResult_RESULT_PROTOCOL_UNSUPPORTED CameraResult_Result = 9 // Definition file protocol not supported
)

// Enum value maps for CameraResult_Result.
var (
	CameraResult_Result_name = map[int32]string{
		0: "RESULT_UNKNOWN",
		1: "RESULT_SUCCESS",
		2: "RESULT_IN_PROGRESS",
		3: "RESULT_BUSY",
		4: "RESULT_DENIED",
		5: "RESULT_ERROR",
		6: "RESULT_TIMEOUT",
		7: "RESULT_WRONG_ARGUMENT",
		8: "RESULT_NO_SYSTEM",
		9: "RESULT_PROTOCOL_UNSUPPORTED",
	}
	CameraResult_Result_value = map[string]int32{
		"RESULT_UNKNOWN":              0,
		"RESULT_SUCCESS":              1,
		"RESULT_IN_PROGRESS":          2,
		"RESULT_BUSY":                 3,
		"RESULT_DENIED":               4,
		"RESULT_ERROR":                5,
		"RESULT_TIMEOUT":              6,
		"RESULT_WRONG_ARGUMENT":       7,
		"RESULT_NO_SYSTEM":            8,
		"RESULT_PROTOCOL_UNSUPPORTED": 9,
	}
)

func (x CameraResult_Result) Enum() *CameraResult_Result {
	p := new(CameraResult_Result)
	*p = x
	return p
}

func (x CameraResult_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraResult_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_proto_enumTypes[2].Descriptor()
}

func (CameraResult_Result) Type() protoreflect.EnumType {
	return &file_camera_proto_enumTypes[2]
}

func (x CameraResult_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraResult_Result.Descriptor instead.
func (CameraResult_Result) EnumDescriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{66, 0}
}

// Video stream status type.
type VideoStreamInfo_VideoStreamStatus int32

const (
	VideoStreamInfo_VIDEO_STREAM_STATUS_NOT_RUNNING VideoStreamInfo_VideoStreamStatus = 0 // Video stream is not running
	VideoStreamInfo_VIDEO_STREAM_STATUS_IN_PROGRESS VideoStreamInfo_VideoStreamStatus = 1 // Video stream is running
)

// Enum value maps for VideoStreamInfo_VideoStreamStatus.
var (
	VideoStreamInfo_VideoStreamStatus_name = map[int32]string{
		0: "VIDEO_STREAM_STATUS_NOT_RUNNING",
		1: "VIDEO_STREAM_STATUS_IN_PROGRESS",
	}
	VideoStreamInfo_VideoStreamStatus_value = map[string]int32{
		"VIDEO_STREAM_STATUS_NOT_RUNNING": 0,
		"VIDEO_STREAM_STATUS_IN_PROGRESS": 1,
	}
)

func (x VideoStreamInfo_VideoStreamStatus) Enum() *VideoStreamInfo_VideoStreamStatus {
	p := new(VideoStreamInfo_VideoStreamStatus)
	*p = x
	return p
}

func (x VideoStreamInfo_VideoStreamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoStreamInfo_VideoStreamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_proto_enumTypes[3].Descriptor()
}

func (VideoStreamInfo_VideoStreamStatus) Type() protoreflect.EnumType {
	return &file_camera_proto_enumTypes[3]
}

func (x VideoStreamInfo_VideoStreamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoStreamInfo_VideoStreamStatus.Descriptor instead.
func (VideoStreamInfo_VideoStreamStatus) EnumDescriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{72, 0}
}

// Video stream light spectrum type
type VideoStreamInfo_VideoStreamSpectrum int32

const (
	VideoStreamInfo_VIDEO_STREAM_SPECTRUM_UNKNOWN       VideoStreamInfo_VideoStreamSpectrum = 0 // Unknown
	VideoStreamInfo_VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT VideoStreamInfo_VideoStreamSpectrum = 1 // Visible light
	VideoStreamInfo_VIDEO_STREAM_SPECTRUM_INFRARED      VideoStreamInfo_VideoStreamSpectrum = 2 // Infrared
)

// Enum value maps for VideoStreamInfo_VideoStreamSpectrum.
var (
	VideoStreamInfo_VideoStreamSpectrum_name = map[int32]string{
		0: "VIDEO_STREAM_SPECTRUM_UNKNOWN",
		1: "VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT",
		2: "VIDEO_STREAM_SPECTRUM_INFRARED",
	}
	VideoStreamInfo_VideoStreamSpectrum_value = map[string]int32{
		"VIDEO_STREAM_SPECTRUM_UNKNOWN":       0,
		"VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT": 1,
		"VIDEO_STREAM_SPECTRUM_INFRARED":      2,
	}
)

func (x VideoStreamInfo_VideoStreamSpectrum) Enum() *VideoStreamInfo_VideoStreamSpectrum {
	p := new(VideoStreamInfo_VideoStreamSpectrum)
	*p = x
	return p
}

func (x VideoStreamInfo_VideoStreamSpectrum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoStreamInfo_VideoStreamSpectrum) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_proto_enumTypes[4].Descriptor()
}

func (VideoStreamInfo_VideoStreamSpectrum) Type() protoreflect.EnumType {
	return &file_camera_proto_enumTypes[4]
}

func (x VideoStreamInfo_VideoStreamSpectrum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoStreamInfo_VideoStreamSpectrum.Descriptor instead.
func (VideoStreamInfo_VideoStreamSpectrum) EnumDescriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{72, 1}
}

// Storage status type.
type Status_StorageStatus int32

const (
	Status_STORAGE_STATUS_NOT_AVAILABLE Status_StorageStatus = 0 // Status not available
	Status_STORAGE_STATUS_UNFORMATTED   Status_StorageStatus = 1 // Storage is not formatted (i.e. has no recognized file system)
	Status_STORAGE_STATUS_FORMATTED     Status_StorageStatus = 2 // Storage is formatted (i.e. has recognized a file system)
	Status_STORAGE_STATUS_NOT_SUPPORTED Status_StorageStatus = 3 // Storage status is not supported
)

// Enum value maps for Status_StorageStatus.
var (
	Status_StorageStatus_name = map[int32]string{
		0: "STORAGE_STATUS_NOT_AVAILABLE",
		1: "STORAGE_STATUS_UNFORMATTED",
		2: "STORAGE_STATUS_FORMATTED",
		3: "STORAGE_STATUS_NOT_SUPPORTED",
	}
	Status_StorageStatus_value = map[string]int32{
		"STORAGE_STATUS_NOT_AVAILABLE": 0,
		"STORAGE_STATUS_UNFORMATTED":   1,
		"STORAGE_STATUS_FORMATTED":     2,
		"STORAGE_STATUS_NOT_SUPPORTED": 3,
	}
)

func (x Status_StorageStatus) Enum() *Status_StorageStatus {
	p := new(Status_StorageStatus)
	*p = x
	return p
}

func (x Status_StorageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_StorageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_proto_enumTypes[5].Descriptor()
}

func (Status_StorageStatus) Type() protoreflect.EnumType {
	return &file_camera_proto_enumTypes[5]
}

func (x Status_StorageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_StorageStatus.Descriptor instead.
func (Status_StorageStatus) EnumDescriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{73, 0}
}

// Storage type.
type Status_StorageType int32

const (
	Status_STORAGE_TYPE_UNKNOWN   Status_StorageType = 0   // Storage type unknown
	Status_STORAGE_TYPE_USB_STICK Status_StorageType = 1   // Storage type USB stick
	Status_STORAGE_TYPE_SD        Status_StorageType = 2   // Storage type SD card
	Status_STORAGE_TYPE_MICROSD   Status_StorageType = 3   // Storage type MicroSD card
	Status_STORAGE_TYPE_HD        Status_StorageType = 7   // Storage type HD mass storage
	Status_STORAGE_TYPE_OTHER     Status_StorageType = 254 // Storage type other, not listed
)

// Enum value maps for Status_StorageType.
var (
	Status_StorageType_name = map[int32]string{
		0:   "STORAGE_TYPE_UNKNOWN",
		1:   "STORAGE_TYPE_USB_STICK",
		2:   "STORAGE_TYPE_SD",
		3:   "STORAGE_TYPE_MICROSD",
		7:   "STORAGE_TYPE_HD",
		254: "STORAGE_TYPE_OTHER",
	}
	Status_StorageType_value = map[string]int32{
		"STORAGE_TYPE_UNKNOWN":   0,
		"STORAGE_TYPE_USB_STICK": 1,
		"STORAGE_TYPE_SD":        2,
		"STORAGE_TYPE_MICROSD":   3,
		"STORAGE_TYPE_HD":        7,
		"STORAGE_TYPE_OTHER":     254,
	}
)

func (x Status_StorageType) Enum() *Status_StorageType {
	p := new(Status_StorageType)
	*p = x
	return p
}

func (x Status_StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_camera_proto_enumTypes[6].Descriptor()
}

func (Status_StorageType) Type() protoreflect.EnumType {
	return &file_camera_proto_enumTypes[6]
}

func (x Status_StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_StorageType.Descriptor instead.
func (Status_StorageType) EnumDescriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{73, 1}
}

type PrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRequest.ProtoReflect.Descriptor instead.
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{0}
}

type PrepareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *PrepareResponse) Reset() {
	*x = PrepareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareResponse) ProtoMessage() {}

func (x *PrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareResponse.ProtoReflect.Descriptor instead.
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{1}
}

func (x *PrepareResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type TakePhotoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TakePhotoRequest) Reset() {
	*x = TakePhotoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakePhotoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakePhotoRequest) ProtoMessage() {}

func (x *TakePhotoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakePhotoRequest.ProtoReflect.Descriptor instead.
func (*TakePhotoRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{2}
}

type TakePhotoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *TakePhotoResponse) Reset() {
	*x = TakePhotoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakePhotoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakePhotoResponse) ProtoMessage() {}

func (x *TakePhotoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakePhotoResponse.ProtoReflect.Descriptor instead.
func (*TakePhotoResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{3}
}

func (x *TakePhotoResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type StartPhotoIntervalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalS float32 `protobuf:"fixed32,1,opt,name=interval_s,json=intervalS,proto3" json:"interval_s,omitempty"` // Interval between photos (in seconds)
}

func (x *StartPhotoIntervalRequest) Reset() {
	*x = StartPhotoIntervalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPhotoIntervalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPhotoIntervalRequest) ProtoMessage() {}

func (x *StartPhotoIntervalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPhotoIntervalRequest.ProtoReflect.Descriptor instead.
func (*StartPhotoIntervalRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{4}
}

func (x *StartPhotoIntervalRequest) GetIntervalS() float32 {
	if x != nil {
		return x.IntervalS
	}
	return 0
}

type StartPhotoIntervalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *StartPhotoIntervalResponse) Reset() {
	*x = StartPhotoIntervalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPhotoIntervalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPhotoIntervalResponse) ProtoMessage() {}

func (x *StartPhotoIntervalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPhotoIntervalResponse.ProtoReflect.Descriptor instead.
func (*StartPhotoIntervalResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{5}
}

func (x *StartPhotoIntervalResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type StopPhotoIntervalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopPhotoIntervalRequest) Reset() {
	*x = StopPhotoIntervalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPhotoIntervalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPhotoIntervalRequest) ProtoMessage() {}

func (x *StopPhotoIntervalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPhotoIntervalRequest.ProtoReflect.Descriptor instead.
func (*StopPhotoIntervalRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{6}
}

type StopPhotoIntervalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *StopPhotoIntervalResponse) Reset() {
	*x = StopPhotoIntervalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPhotoIntervalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPhotoIntervalResponse) ProtoMessage() {}

func (x *StopPhotoIntervalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPhotoIntervalResponse.ProtoReflect.Descriptor instead.
func (*StopPhotoIntervalResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{7}
}

func (x *StopPhotoIntervalResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type StartVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartVideoRequest) Reset() {
	*x = StartVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVideoRequest) ProtoMessage() {}

func (x *StartVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVideoRequest.ProtoReflect.Descriptor instead.
func (*StartVideoRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{8}
}

type StartVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *StartVideoResponse) Reset() {
	*x = StartVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVideoResponse) ProtoMessage() {}

func (x *StartVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVideoResponse.ProtoReflect.Descriptor instead.
func (*StartVideoResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{9}
}

func (x *StartVideoResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type StopVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopVideoRequest) Reset() {
	*x = StopVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVideoRequest) ProtoMessage() {}

func (x *StopVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVideoRequest.ProtoReflect.Descriptor instead.
func (*StopVideoRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{10}
}

type StopVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *StopVideoResponse) Reset() {
	*x = StopVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVideoResponse) ProtoMessage() {}

func (x *StopVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVideoResponse.ProtoReflect.Descriptor instead.
func (*StopVideoResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{11}
}

func (x *StopVideoResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type StartVideoStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // video stream id
}

func (x *StartVideoStreamingRequest) Reset() {
	*x = StartVideoStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVideoStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVideoStreamingRequest) ProtoMessage() {}

func (x *StartVideoStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVideoStreamingRequest.ProtoReflect.Descriptor instead.
func (*StartVideoStreamingRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{12}
}

func (x *StartVideoStreamingRequest) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type StartVideoStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *StartVideoStreamingResponse) Reset() {
	*x = StartVideoStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVideoStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVideoStreamingResponse) ProtoMessage() {}

func (x *StartVideoStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVideoStreamingResponse.ProtoReflect.Descriptor instead.
func (*StartVideoStreamingResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{13}
}

func (x *StartVideoStreamingResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type StopVideoStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // video stream id
}

func (x *StopVideoStreamingRequest) Reset() {
	*x = StopVideoStreamingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVideoStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVideoStreamingRequest) ProtoMessage() {}

func (x *StopVideoStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVideoStreamingRequest.ProtoReflect.Descriptor instead.
func (*StopVideoStreamingRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{14}
}

func (x *StopVideoStreamingRequest) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type StopVideoStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *StopVideoStreamingResponse) Reset() {
	*x = StopVideoStreamingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVideoStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVideoStreamingResponse) ProtoMessage() {}

func (x *StopVideoStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVideoStreamingResponse.ProtoReflect.Descriptor instead.
func (*StopVideoStreamingResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{15}
}

func (x *StopVideoStreamingResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type SetModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=mavsdk.rpc.camera.Mode" json:"mode,omitempty"` // Camera mode to set
}

func (x *SetModeRequest) Reset() {
	*x = SetModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModeRequest) ProtoMessage() {}

func (x *SetModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModeRequest.ProtoReflect.Descriptor instead.
func (*SetModeRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{16}
}

func (x *SetModeRequest) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_MODE_UNKNOWN
}

type SetModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *SetModeResponse) Reset() {
	*x = SetModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModeResponse) ProtoMessage() {}

func (x *SetModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModeResponse.ProtoReflect.Descriptor instead.
func (*SetModeResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{17}
}

func (x *SetModeResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type ListPhotosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotosRange PhotosRange `protobuf:"varint,1,opt,name=photos_range,json=photosRange,proto3,enum=mavsdk.rpc.camera.PhotosRange" json:"photos_range,omitempty"` // Which photos should be listed (all or since connection)
}

func (x *ListPhotosRequest) Reset() {
	*x = ListPhotosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPhotosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPhotosRequest) ProtoMessage() {}

func (x *ListPhotosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPhotosRequest.ProtoReflect.Descriptor instead.
func (*ListPhotosRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{18}
}

func (x *ListPhotosRequest) GetPhotosRange() PhotosRange {
	if x != nil {
		return x.PhotosRange
	}
	return PhotosRange_PHOTOS_RANGE_ALL
}

type ListPhotosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult  `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
	CaptureInfos []*CaptureInfo `protobuf:"bytes,2,rep,name=capture_infos,json=captureInfos,proto3" json:"capture_infos,omitempty"` // List of capture infos (representing the photos)
}

func (x *ListPhotosResponse) Reset() {
	*x = ListPhotosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPhotosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPhotosResponse) ProtoMessage() {}

func (x *ListPhotosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPhotosResponse.ProtoReflect.Descriptor instead.
func (*ListPhotosResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{19}
}

func (x *ListPhotosResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

func (x *ListPhotosResponse) GetCaptureInfos() []*CaptureInfo {
	if x != nil {
		return x.CaptureInfos
	}
	return nil
}

type SubscribeInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeInformationRequest) Reset() {
	*x = SubscribeInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeInformationRequest) ProtoMessage() {}

func (x *SubscribeInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeInformationRequest.ProtoReflect.Descriptor instead.
func (*SubscribeInformationRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{20}
}

type InformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Information *Information `protobuf:"bytes,1,opt,name=information,proto3" json:"information,omitempty"` // Camera information
}

func (x *InformationResponse) Reset() {
	*x = InformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformationResponse) ProtoMessage() {}

func (x *InformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformationResponse.ProtoReflect.Descriptor instead.
func (*InformationResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{21}
}

func (x *InformationResponse) GetInformation() *Information {
	if x != nil {
		return x.Information
	}
	return nil
}

type SubscribeModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeModeRequest) Reset() {
	*x = SubscribeModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeModeRequest) ProtoMessage() {}

func (x *SubscribeModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeModeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeModeRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{22}
}

type ModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=mavsdk.rpc.camera.Mode" json:"mode,omitempty"` // Camera mode
}

func (x *ModeResponse) Reset() {
	*x = ModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeResponse) ProtoMessage() {}

func (x *ModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeResponse.ProtoReflect.Descriptor instead.
func (*ModeResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{23}
}

func (x *ModeResponse) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_MODE_UNKNOWN
}

type SubscribeVideoStreamInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeVideoStreamInfoRequest) Reset() {
	*x = SubscribeVideoStreamInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeVideoStreamInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeVideoStreamInfoRequest) ProtoMessage() {}

func (x *SubscribeVideoStreamInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeVideoStreamInfoRequest.ProtoReflect.Descriptor instead.
func (*SubscribeVideoStreamInfoRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{24}
}

type VideoStreamInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoStreamInfo *VideoStreamInfo `protobuf:"bytes,1,opt,name=video_stream_info,json=videoStreamInfo,proto3" json:"video_stream_info,omitempty"` // Video stream info
}

func (x *VideoStreamInfoResponse) Reset() {
	*x = VideoStreamInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoStreamInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStreamInfoResponse) ProtoMessage() {}

func (x *VideoStreamInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStreamInfoResponse.ProtoReflect.Descriptor instead.
func (*VideoStreamInfoResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{25}
}

func (x *VideoStreamInfoResponse) GetVideoStreamInfo() *VideoStreamInfo {
	if x != nil {
		return x.VideoStreamInfo
	}
	return nil
}

type SubscribeCaptureInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeCaptureInfoRequest) Reset() {
	*x = SubscribeCaptureInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCaptureInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCaptureInfoRequest) ProtoMessage() {}

func (x *SubscribeCaptureInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCaptureInfoRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCaptureInfoRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{26}
}

type CaptureInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureInfo *CaptureInfo `protobuf:"bytes,1,opt,name=capture_info,json=captureInfo,proto3" json:"capture_info,omitempty"` // Capture info
}

func (x *CaptureInfoResponse) Reset() {
	*x = CaptureInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInfoResponse) ProtoMessage() {}

func (x *CaptureInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInfoResponse.ProtoReflect.Descriptor instead.
func (*CaptureInfoResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{27}
}

func (x *CaptureInfoResponse) GetCaptureInfo() *CaptureInfo {
	if x != nil {
		return x.CaptureInfo
	}
	return nil
}

type SubscribeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeStatusRequest) Reset() {
	*x = SubscribeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStatusRequest) ProtoMessage() {}

func (x *SubscribeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStatusRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{28}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraStatus *Status `protobuf:"bytes,1,opt,name=camera_status,json=cameraStatus,proto3" json:"camera_status,omitempty"` // Camera status
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{29}
}

func (x *StatusResponse) GetCameraStatus() *Status {
	if x != nil {
		return x.CameraStatus
	}
	return nil
}

type SubscribeCurrentSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeCurrentSettingsRequest) Reset() {
	*x = SubscribeCurrentSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCurrentSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCurrentSettingsRequest) ProtoMessage() {}

func (x *SubscribeCurrentSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCurrentSettingsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCurrentSettingsRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{30}
}

type CurrentSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentSettings []*Setting `protobuf:"bytes,1,rep,name=current_settings,json=currentSettings,proto3" json:"current_settings,omitempty"` // List of current settings
}

func (x *CurrentSettingsResponse) Reset() {
	*x = CurrentSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentSettingsResponse) ProtoMessage() {}

func (x *CurrentSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentSettingsResponse.ProtoReflect.Descriptor instead.
func (*CurrentSettingsResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{31}
}

func (x *CurrentSettingsResponse) GetCurrentSettings() []*Setting {
	if x != nil {
		return x.CurrentSettings
	}
	return nil
}

type SubscribePossibleSettingOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribePossibleSettingOptionsRequest) Reset() {
	*x = SubscribePossibleSettingOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribePossibleSettingOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePossibleSettingOptionsRequest) ProtoMessage() {}

func (x *SubscribePossibleSettingOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePossibleSettingOptionsRequest.ProtoReflect.Descriptor instead.
func (*SubscribePossibleSettingOptionsRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{32}
}

type PossibleSettingOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingOptions []*SettingOptions `protobuf:"bytes,1,rep,name=setting_options,json=settingOptions,proto3" json:"setting_options,omitempty"` // List of settings that can be changed
}

func (x *PossibleSettingOptionsResponse) Reset() {
	*x = PossibleSettingOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PossibleSettingOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PossibleSettingOptionsResponse) ProtoMessage() {}

func (x *PossibleSettingOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PossibleSettingOptionsResponse.ProtoReflect.Descriptor instead.
func (*PossibleSettingOptionsResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{33}
}

func (x *PossibleSettingOptionsResponse) GetSettingOptions() []*SettingOptions {
	if x != nil {
		return x.SettingOptions
	}
	return nil
}

type SetSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"` // Desired setting
}

func (x *SetSettingRequest) Reset() {
	*x = SetSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSettingRequest) ProtoMessage() {}

func (x *SetSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSettingRequest.ProtoReflect.Descriptor instead.
func (*SetSettingRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{34}
}

func (x *SetSettingRequest) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type SetSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *SetSettingResponse) Reset() {
	*x = SetSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSettingResponse) ProtoMessage() {}

func (x *SetSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSettingResponse.ProtoReflect.Descriptor instead.
func (*SetSettingResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{35}
}

func (x *SetSettingResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type GetSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"` // Requested setting
}

func (x *GetSettingRequest) Reset() {
	*x = GetSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingRequest) ProtoMessage() {}

func (x *GetSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingRequest.ProtoReflect.Descriptor instead.
func (*GetSettingRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{36}
}

func (x *GetSettingRequest) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type GetSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
	Setting      *Setting      `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"` // Setting
}

func (x *GetSettingResponse) Reset() {
	*x = GetSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingResponse) ProtoMessage() {}

func (x *GetSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingResponse.ProtoReflect.Descriptor instead.
func (*GetSettingResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{37}
}

func (x *GetSettingResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

func (x *GetSettingResponse) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type FormatStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageId int32 `protobuf:"varint,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"` //Storage identify to be format
}

func (x *FormatStorageRequest) Reset() {
	*x = FormatStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatStorageRequest) ProtoMessage() {}

func (x *FormatStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatStorageRequest.ProtoReflect.Descriptor instead.
func (*FormatStorageRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{38}
}

func (x *FormatStorageRequest) GetStorageId() int32 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

type FormatStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *FormatStorageResponse) Reset() {
	*x = FormatStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatStorageResponse) ProtoMessage() {}

func (x *FormatStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatStorageResponse.ProtoReflect.Descriptor instead.
func (*FormatStorageResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{39}
}

func (x *FormatStorageResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type SelectCameraResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *SelectCameraResponse) Reset() {
	*x = SelectCameraResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectCameraResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectCameraResponse) ProtoMessage() {}

func (x *SelectCameraResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectCameraResponse.ProtoReflect.Descriptor instead.
func (*SelectCameraResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{40}
}

func (x *SelectCameraResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type SelectCameraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraId int32 `protobuf:"varint,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"` // Id of camera to be selected
}

func (x *SelectCameraRequest) Reset() {
	*x = SelectCameraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectCameraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectCameraRequest) ProtoMessage() {}

func (x *SelectCameraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectCameraRequest.ProtoReflect.Descriptor instead.
func (*SelectCameraRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{41}
}

func (x *SelectCameraRequest) GetCameraId() int32 {
	if x != nil {
		return x.CameraId
	}
	return 0
}

type ResetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSettingsRequest) Reset() {
	*x = ResetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSettingsRequest) ProtoMessage() {}

func (x *ResetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSettingsRequest.ProtoReflect.Descriptor instead.
func (*ResetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{42}
}

type ResetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *ResetSettingsResponse) Reset() {
	*x = ResetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSettingsResponse) ProtoMessage() {}

func (x *ResetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSettingsResponse.ProtoReflect.Descriptor instead.
func (*ResetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{43}
}

func (x *ResetSettingsResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type ZoomInStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ZoomInStartRequest) Reset() {
	*x = ZoomInStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomInStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomInStartRequest) ProtoMessage() {}

func (x *ZoomInStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomInStartRequest.ProtoReflect.Descriptor instead.
func (*ZoomInStartRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{44}
}

type ZoomInStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *ZoomInStartResponse) Reset() {
	*x = ZoomInStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomInStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomInStartResponse) ProtoMessage() {}

func (x *ZoomInStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomInStartResponse.ProtoReflect.Descriptor instead.
func (*ZoomInStartResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{45}
}

func (x *ZoomInStartResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type ZoomOutStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ZoomOutStartRequest) Reset() {
	*x = ZoomOutStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomOutStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomOutStartRequest) ProtoMessage() {}

func (x *ZoomOutStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomOutStartRequest.ProtoReflect.Descriptor instead.
func (*ZoomOutStartRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{46}
}

type ZoomOutStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *ZoomOutStartResponse) Reset() {
	*x = ZoomOutStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomOutStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomOutStartResponse) ProtoMessage() {}

func (x *ZoomOutStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomOutStartResponse.ProtoReflect.Descriptor instead.
func (*ZoomOutStartResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{47}
}

func (x *ZoomOutStartResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type ZoomStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ZoomStopRequest) Reset() {
	*x = ZoomStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomStopRequest) ProtoMessage() {}

func (x *ZoomStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomStopRequest.ProtoReflect.Descriptor instead.
func (*ZoomStopRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{48}
}

type ZoomStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *ZoomStopResponse) Reset() {
	*x = ZoomStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomStopResponse) ProtoMessage() {}

func (x *ZoomStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomStopResponse.ProtoReflect.Descriptor instead.
func (*ZoomStopResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{49}
}

func (x *ZoomStopResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type ZoomRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range float32 `protobuf:"fixed32,1,opt,name=range,proto3" json:"range,omitempty"` // Range must be between 0.0 and 100.0
}

func (x *ZoomRangeRequest) Reset() {
	*x = ZoomRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomRangeRequest) ProtoMessage() {}

func (x *ZoomRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomRangeRequest.ProtoReflect.Descriptor instead.
func (*ZoomRangeRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{50}
}

func (x *ZoomRangeRequest) GetRange() float32 {
	if x != nil {
		return x.Range
	}
	return 0
}

type ZoomRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *ZoomRangeResponse) Reset() {
	*x = ZoomRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomRangeResponse) ProtoMessage() {}

func (x *ZoomRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomRangeResponse.ProtoReflect.Descriptor instead.
func (*ZoomRangeResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{51}
}

func (x *ZoomRangeResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type TrackPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointX float32 `protobuf:"fixed32,1,opt,name=point_x,json=pointX,proto3" json:"point_x,omitempty"` // Point in X axis (0..1, 0 is left, 1 is right)
	PointY float32 `protobuf:"fixed32,2,opt,name=point_y,json=pointY,proto3" json:"point_y,omitempty"` // Point in Y axis (0..1, 0 is top, 1 is bottom)
	Radius float32 `protobuf:"fixed32,3,opt,name=radius,proto3" json:"radius,omitempty"`               // Radius (0 is one pixel, 1 is full image width)
}

func (x *TrackPointRequest) Reset() {
	*x = TrackPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPointRequest) ProtoMessage() {}

func (x *TrackPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPointRequest.ProtoReflect.Descriptor instead.
func (*TrackPointRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{52}
}

func (x *TrackPointRequest) GetPointX() float32 {
	if x != nil {
		return x.PointX
	}
	return 0
}

func (x *TrackPointRequest) GetPointY() float32 {
	if x != nil {
		return x.PointY
	}
	return 0
}

func (x *TrackPointRequest) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

type TrackPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *TrackPointResponse) Reset() {
	*x = TrackPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPointResponse) ProtoMessage() {}

func (x *TrackPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPointResponse.ProtoReflect.Descriptor instead.
func (*TrackPointResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{53}
}

func (x *TrackPointResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type TrackRectangleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeftX     float32 `protobuf:"fixed32,1,opt,name=top_left_x,json=topLeftX,proto3" json:"top_left_x,omitempty"`             // Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right)
	TopLeftY     float32 `protobuf:"fixed32,2,opt,name=top_left_y,json=topLeftY,proto3" json:"top_left_y,omitempty"`             // Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom)
	BottomRightX float32 `protobuf:"fixed32,3,opt,name=bottom_right_x,json=bottomRightX,proto3" json:"bottom_right_x,omitempty"` // Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right)
	BottomRightY float32 `protobuf:"fixed32,4,opt,name=bottom_right_y,json=bottomRightY,proto3" json:"bottom_right_y,omitempty"` // Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom)
}

func (x *TrackRectangleRequest) Reset() {
	*x = TrackRectangleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackRectangleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRectangleRequest) ProtoMessage() {}

func (x *TrackRectangleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRectangleRequest.ProtoReflect.Descriptor instead.
func (*TrackRectangleRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{54}
}

func (x *TrackRectangleRequest) GetTopLeftX() float32 {
	if x != nil {
		return x.TopLeftX
	}
	return 0
}

func (x *TrackRectangleRequest) GetTopLeftY() float32 {
	if x != nil {
		return x.TopLeftY
	}
	return 0
}

func (x *TrackRectangleRequest) GetBottomRightX() float32 {
	if x != nil {
		return x.BottomRightX
	}
	return 0
}

func (x *TrackRectangleRequest) GetBottomRightY() float32 {
	if x != nil {
		return x.BottomRightY
	}
	return 0
}

type TrackRectangleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *TrackRectangleResponse) Reset() {
	*x = TrackRectangleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackRectangleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRectangleResponse) ProtoMessage() {}

func (x *TrackRectangleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRectangleResponse.ProtoReflect.Descriptor instead.
func (*TrackRectangleResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{55}
}

func (x *TrackRectangleResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type TrackStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrackStopRequest) Reset() {
	*x = TrackStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStopRequest) ProtoMessage() {}

func (x *TrackStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStopRequest.ProtoReflect.Descriptor instead.
func (*TrackStopRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{56}
}

type TrackStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *TrackStopResponse) Reset() {
	*x = TrackStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStopResponse) ProtoMessage() {}

func (x *TrackStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStopResponse.ProtoReflect.Descriptor instead.
func (*TrackStopResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{57}
}

func (x *TrackStopResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type FocusInStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FocusInStartRequest) Reset() {
	*x = FocusInStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusInStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusInStartRequest) ProtoMessage() {}

func (x *FocusInStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusInStartRequest.ProtoReflect.Descriptor instead.
func (*FocusInStartRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{58}
}

type FocusInStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *FocusInStartResponse) Reset() {
	*x = FocusInStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusInStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusInStartResponse) ProtoMessage() {}

func (x *FocusInStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusInStartResponse.ProtoReflect.Descriptor instead.
func (*FocusInStartResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{59}
}

func (x *FocusInStartResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type FocusOutStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FocusOutStartRequest) Reset() {
	*x = FocusOutStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusOutStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusOutStartRequest) ProtoMessage() {}

func (x *FocusOutStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusOutStartRequest.ProtoReflect.Descriptor instead.
func (*FocusOutStartRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{60}
}

type FocusOutStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *FocusOutStartResponse) Reset() {
	*x = FocusOutStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusOutStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusOutStartResponse) ProtoMessage() {}

func (x *FocusOutStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusOutStartResponse.ProtoReflect.Descriptor instead.
func (*FocusOutStartResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{61}
}

func (x *FocusOutStartResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type FocusStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FocusStopRequest) Reset() {
	*x = FocusStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusStopRequest) ProtoMessage() {}

func (x *FocusStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusStopRequest.ProtoReflect.Descriptor instead.
func (*FocusStopRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{62}
}

type FocusStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *FocusStopResponse) Reset() {
	*x = FocusStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusStopResponse) ProtoMessage() {}

func (x *FocusStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusStopResponse.ProtoReflect.Descriptor instead.
func (*FocusStopResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{63}
}

func (x *FocusStopResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

type FocusRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range float32 `protobuf:"fixed32,1,opt,name=range,proto3" json:"range,omitempty"` // Range must be between 0.0 - 100.0
}

func (x *FocusRangeRequest) Reset() {
	*x = FocusRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusRangeRequest) ProtoMessage() {}

func (x *FocusRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusRangeRequest.ProtoReflect.Descriptor instead.
func (*FocusRangeRequest) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{64}
}

func (x *FocusRangeRequest) GetRange() float32 {
	if x != nil {
		return x.Range
	}
	return 0
}

type FocusRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraResult *CameraResult `protobuf:"bytes,1,opt,name=camera_result,json=cameraResult,proto3" json:"camera_result,omitempty"`
}

func (x *FocusRangeResponse) Reset() {
	*x = FocusRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusRangeResponse) ProtoMessage() {}

func (x *FocusRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusRangeResponse.ProtoReflect.Descriptor instead.
func (*FocusRangeResponse) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{65}
}

func (x *FocusRangeResponse) GetCameraResult() *CameraResult {
	if x != nil {
		return x.CameraResult
	}
	return nil
}

// Result type.
type CameraResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    CameraResult_Result `protobuf:"varint,1,opt,name=result,proto3,enum=mavsdk.rpc.camera.CameraResult_Result" json:"result,omitempty"` // Result enum value
	ResultStr string              `protobuf:"bytes,2,opt,name=result_str,json=resultStr,proto3" json:"result_str,omitempty"`                      // Human-readable English string describing the result
}

func (x *CameraResult) Reset() {
	*x = CameraResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraResult) ProtoMessage() {}

func (x *CameraResult) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraResult.ProtoReflect.Descriptor instead.
func (*CameraResult) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{66}
}

func (x *CameraResult) GetResult() CameraResult_Result {
	if x != nil {
		return x.Result
	}
	return CameraResult_RESULT_UNKNOWN
}

func (x *CameraResult) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

// Position type in global coordinates.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatitudeDeg       float64 `protobuf:"fixed64,1,opt,name=latitude_deg,json=latitudeDeg,proto3" json:"latitude_deg,omitempty"`                     // Latitude in degrees (range: -90 to +90)
	LongitudeDeg      float64 `protobuf:"fixed64,2,opt,name=longitude_deg,json=longitudeDeg,proto3" json:"longitude_deg,omitempty"`                  // Longitude in degrees (range: -180 to +180)
	AbsoluteAltitudeM float32 `protobuf:"fixed32,3,opt,name=absolute_altitude_m,json=absoluteAltitudeM,proto3" json:"absolute_altitude_m,omitempty"` // Altitude AMSL (above mean sea level) in metres
	RelativeAltitudeM float32 `protobuf:"fixed32,4,opt,name=relative_altitude_m,json=relativeAltitudeM,proto3" json:"relative_altitude_m,omitempty"` // Altitude relative to takeoff altitude in metres
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{67}
}

func (x *Position) GetLatitudeDeg() float64 {
	if x != nil {
		return x.LatitudeDeg
	}
	return 0
}

func (x *Position) GetLongitudeDeg() float64 {
	if x != nil {
		return x.LongitudeDeg
	}
	return 0
}

func (x *Position) GetAbsoluteAltitudeM() float32 {
	if x != nil {
		return x.AbsoluteAltitudeM
	}
	return 0
}

func (x *Position) GetRelativeAltitudeM() float32 {
	if x != nil {
		return x.RelativeAltitudeM
	}
	return 0
}

// Quaternion type.
//
// All rotations and axis systems follow the right-hand rule.
// The Hamilton quaternion product definition is used.
// A zero-rotation quaternion is represented by (1,0,0,0).
// The quaternion could also be written as w + xi + yj + zk.
//
// For more info see: https://en.wikipedia.org/wiki/Quaternion
type Quaternion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	W float32 `protobuf:"fixed32,1,opt,name=w,proto3" json:"w,omitempty"` // Quaternion entry 0, also denoted as a
	X float32 `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"` // Quaternion entry 1, also denoted as b
	Y float32 `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"` // Quaternion entry 2, also denoted as c
	Z float32 `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"` // Quaternion entry 3, also denoted as d
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{68}
}

func (x *Quaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Quaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Euler angle type.
//
// All rotations and axis systems follow the right-hand rule.
// The Euler angles follow the convention of a 3-2-1 intrinsic Tait-Bryan rotation sequence.
//
// For more info see https://en.wikipedia.org/wiki/Euler_angles
type EulerAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollDeg  float32 `protobuf:"fixed32,1,opt,name=roll_deg,json=rollDeg,proto3" json:"roll_deg,omitempty"`    // Roll angle in degrees, positive is banking to the right
	PitchDeg float32 `protobuf:"fixed32,2,opt,name=pitch_deg,json=pitchDeg,proto3" json:"pitch_deg,omitempty"` // Pitch angle in degrees, positive is pitching nose up
	YawDeg   float32 `protobuf:"fixed32,3,opt,name=yaw_deg,json=yawDeg,proto3" json:"yaw_deg,omitempty"`       // Yaw angle in degrees, positive is clock-wise seen from above
}

func (x *EulerAngle) Reset() {
	*x = EulerAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EulerAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EulerAngle) ProtoMessage() {}

func (x *EulerAngle) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EulerAngle.ProtoReflect.Descriptor instead.
func (*EulerAngle) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{69}
}

func (x *EulerAngle) GetRollDeg() float32 {
	if x != nil {
		return x.RollDeg
	}
	return 0
}

func (x *EulerAngle) GetPitchDeg() float32 {
	if x != nil {
		return x.PitchDeg
	}
	return 0
}

func (x *EulerAngle) GetYawDeg() float32 {
	if x != nil {
		return x.YawDeg
	}
	return 0
}

// Information about a picture just captured.
type CaptureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position           *Position   `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`                                                 // Location where the picture was taken
	AttitudeQuaternion *Quaternion `protobuf:"bytes,2,opt,name=attitude_quaternion,json=attitudeQuaternion,proto3" json:"attitude_quaternion,omitempty"`   // Attitude of the camera when the picture was taken (quaternion)
	AttitudeEulerAngle *EulerAngle `protobuf:"bytes,3,opt,name=attitude_euler_angle,json=attitudeEulerAngle,proto3" json:"attitude_euler_angle,omitempty"` // Attitude of the camera when the picture was taken (euler angle)
	TimeUtcUs          uint64      `protobuf:"varint,4,opt,name=time_utc_us,json=timeUtcUs,proto3" json:"time_utc_us,omitempty"`                           // Timestamp in UTC (since UNIX epoch) in microseconds
	IsSuccess          bool        `protobuf:"varint,5,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`                             // True if the capture was successful
	Index              int32       `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`                                                      // Zero-based index of this image since vehicle was armed
	FileUrl            string      `protobuf:"bytes,7,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`                                    // Download URL of this image
}

func (x *CaptureInfo) Reset() {
	*x = CaptureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInfo) ProtoMessage() {}

func (x *CaptureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInfo.ProtoReflect.Descriptor instead.
func (*CaptureInfo) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{70}
}

func (x *CaptureInfo) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CaptureInfo) GetAttitudeQuaternion() *Quaternion {
	if x != nil {
		return x.AttitudeQuaternion
	}
	return nil
}

func (x *CaptureInfo) GetAttitudeEulerAngle() *EulerAngle {
	if x != nil {
		return x.AttitudeEulerAngle
	}
	return nil
}

func (x *CaptureInfo) GetTimeUtcUs() uint64 {
	if x != nil {
		return x.TimeUtcUs
	}
	return 0
}

func (x *CaptureInfo) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *CaptureInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CaptureInfo) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

// Type for video stream settings.
type VideoStreamSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameRateHz             float32 `protobuf:"fixed32,1,opt,name=frame_rate_hz,json=frameRateHz,proto3" json:"frame_rate_hz,omitempty"`                                    // Frames per second
	HorizontalResolutionPix uint32  `protobuf:"varint,2,opt,name=horizontal_resolution_pix,json=horizontalResolutionPix,proto3" json:"horizontal_resolution_pix,omitempty"` // Horizontal resolution (in pixels)
	VerticalResolutionPix   uint32  `protobuf:"varint,3,opt,name=vertical_resolution_pix,json=verticalResolutionPix,proto3" json:"vertical_resolution_pix,omitempty"`       // Vertical resolution (in pixels)
	BitRateBS               uint32  `protobuf:"varint,4,opt,name=bit_rate_b_s,json=bitRateBS,proto3" json:"bit_rate_b_s,omitempty"`                                         // Bit rate (in bits per second)
	RotationDeg             uint32  `protobuf:"varint,5,opt,name=rotation_deg,json=rotationDeg,proto3" json:"rotation_deg,omitempty"`                                       // Video image rotation (clockwise, 0-359 degrees)
	Uri                     string  `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`                                                                           // Video stream URI
	HorizontalFovDeg        float32 `protobuf:"fixed32,7,opt,name=horizontal_fov_deg,json=horizontalFovDeg,proto3" json:"horizontal_fov_deg,omitempty"`                     // Horizontal fov in degrees
}

func (x *VideoStreamSettings) Reset() {
	*x = VideoStreamSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoStreamSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStreamSettings) ProtoMessage() {}

func (x *VideoStreamSettings) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStreamSettings.ProtoReflect.Descriptor instead.
func (*VideoStreamSettings) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{71}
}

func (x *VideoStreamSettings) GetFrameRateHz() float32 {
	if x != nil {
		return x.FrameRateHz
	}
	return 0
}

func (x *VideoStreamSettings) GetHorizontalResolutionPix() uint32 {
	if x != nil {
		return x.HorizontalResolutionPix
	}
	return 0
}

func (x *VideoStreamSettings) GetVerticalResolutionPix() uint32 {
	if x != nil {
		return x.VerticalResolutionPix
	}
	return 0
}

func (x *VideoStreamSettings) GetBitRateBS() uint32 {
	if x != nil {
		return x.BitRateBS
	}
	return 0
}

func (x *VideoStreamSettings) GetRotationDeg() uint32 {
	if x != nil {
		return x.RotationDeg
	}
	return 0
}

func (x *VideoStreamSettings) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *VideoStreamSettings) GetHorizontalFovDeg() float32 {
	if x != nil {
		return x.HorizontalFovDeg
	}
	return 0
}

// Information about the video stream.
type VideoStreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *VideoStreamSettings                `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`                                                             // Video stream settings
	Status   VideoStreamInfo_VideoStreamStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=mavsdk.rpc.camera.VideoStreamInfo_VideoStreamStatus" json:"status,omitempty"`       // Current status of video streaming
	Spectrum VideoStreamInfo_VideoStreamSpectrum `protobuf:"varint,3,opt,name=spectrum,proto3,enum=mavsdk.rpc.camera.VideoStreamInfo_VideoStreamSpectrum" json:"spectrum,omitempty"` // Light-spectrum of the video stream
}

func (x *VideoStreamInfo) Reset() {
	*x = VideoStreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStreamInfo) ProtoMessage() {}

func (x *VideoStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStreamInfo.ProtoReflect.Descriptor instead.
func (*VideoStreamInfo) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{72}
}

func (x *VideoStreamInfo) GetSettings() *VideoStreamSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *VideoStreamInfo) GetStatus() VideoStreamInfo_VideoStreamStatus {
	if x != nil {
		return x.Status
	}
	return VideoStreamInfo_VIDEO_STREAM_STATUS_NOT_RUNNING
}

func (x *VideoStreamInfo) GetSpectrum() VideoStreamInfo_VideoStreamSpectrum {
	if x != nil {
		return x.Spectrum
	}
	return VideoStreamInfo_VIDEO_STREAM_SPECTRUM_UNKNOWN
}

// Information about the camera status.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoOn             bool                 `protobuf:"varint,1,opt,name=video_on,json=videoOn,proto3" json:"video_on,omitempty"`                                                               // Whether video recording is currently in process
	PhotoIntervalOn     bool                 `protobuf:"varint,2,opt,name=photo_interval_on,json=photoIntervalOn,proto3" json:"photo_interval_on,omitempty"`                                     // Whether a photo interval is currently in process
	UsedStorageMib      float32              `protobuf:"fixed32,3,opt,name=used_storage_mib,json=usedStorageMib,proto3" json:"used_storage_mib,omitempty"`                                       // Used storage (in MiB)
	AvailableStorageMib float32              `protobuf:"fixed32,4,opt,name=available_storage_mib,json=availableStorageMib,proto3" json:"available_storage_mib,omitempty"`                        // Available storage (in MiB)
	TotalStorageMib     float32              `protobuf:"fixed32,5,opt,name=total_storage_mib,json=totalStorageMib,proto3" json:"total_storage_mib,omitempty"`                                    // Total storage (in MiB)
	RecordingTimeS      float32              `protobuf:"fixed32,6,opt,name=recording_time_s,json=recordingTimeS,proto3" json:"recording_time_s,omitempty"`                                       // Elapsed time since starting the video recording (in seconds)
	MediaFolderName     string               `protobuf:"bytes,7,opt,name=media_folder_name,json=mediaFolderName,proto3" json:"media_folder_name,omitempty"`                                      // Current folder name where media are saved
	StorageStatus       Status_StorageStatus `protobuf:"varint,8,opt,name=storage_status,json=storageStatus,proto3,enum=mavsdk.rpc.camera.Status_StorageStatus" json:"storage_status,omitempty"` // Storage status
	StorageId           uint32               `protobuf:"varint,9,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`                                                         // Storage ID starting at 1
	StorageType         Status_StorageType   `protobuf:"varint,10,opt,name=storage_type,json=storageType,proto3,enum=mavsdk.rpc.camera.Status_StorageType" json:"storage_type,omitempty"`        // Storage type
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{73}
}

func (x *Status) GetVideoOn() bool {
	if x != nil {
		return x.VideoOn
	}
	return false
}

func (x *Status) GetPhotoIntervalOn() bool {
	if x != nil {
		return x.PhotoIntervalOn
	}
	return false
}

func (x *Status) GetUsedStorageMib() float32 {
	if x != nil {
		return x.UsedStorageMib
	}
	return 0
}

func (x *Status) GetAvailableStorageMib() float32 {
	if x != nil {
		return x.AvailableStorageMib
	}
	return 0
}

func (x *Status) GetTotalStorageMib() float32 {
	if x != nil {
		return x.TotalStorageMib
	}
	return 0
}

func (x *Status) GetRecordingTimeS() float32 {
	if x != nil {
		return x.RecordingTimeS
	}
	return 0
}

func (x *Status) GetMediaFolderName() string {
	if x != nil {
		return x.MediaFolderName
	}
	return ""
}

func (x *Status) GetStorageStatus() Status_StorageStatus {
	if x != nil {
		return x.StorageStatus
	}
	return Status_STORAGE_STATUS_NOT_AVAILABLE
}

func (x *Status) GetStorageId() uint32 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

func (x *Status) GetStorageType() Status_StorageType {
	if x != nil {
		return x.StorageType
	}
	return Status_STORAGE_TYPE_UNKNOWN
}

// Type to represent a setting option.
type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionId          string `protobuf:"bytes,1,opt,name=option_id,json=optionId,proto3" json:"option_id,omitempty"`                            // Name of the option (machine readable)
	OptionDescription string `protobuf:"bytes,2,opt,name=option_description,json=optionDescription,proto3" json:"option_description,omitempty"` // Description of the option (human readable)
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{74}
}

func (x *Option) GetOptionId() string {
	if x != nil {
		return x.OptionId
	}
	return ""
}

func (x *Option) GetOptionDescription() string {
	if x != nil {
		return x.OptionDescription
	}
	return ""
}

// Type to represent a setting with a selected option.
type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingId          string  `protobuf:"bytes,1,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`                            // Name of a setting (machine readable)
	SettingDescription string  `protobuf:"bytes,2,opt,name=setting_description,json=settingDescription,proto3" json:"setting_description,omitempty"` // Description of the setting (human readable). This field is meant to be read from the drone, ignore it when setting.
	Option             *Option `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`                                                   // Selected option
	IsRange            bool    `protobuf:"varint,4,opt,name=is_range,json=isRange,proto3" json:"is_range,omitempty"`                                 // If option is given as a range. This field is meant to be read from the drone, ignore it when setting.
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{75}
}

func (x *Setting) GetSettingId() string {
	if x != nil {
		return x.SettingId
	}
	return ""
}

func (x *Setting) GetSettingDescription() string {
	if x != nil {
		return x.SettingDescription
	}
	return ""
}

func (x *Setting) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *Setting) GetIsRange() bool {
	if x != nil {
		return x.IsRange
	}
	return false
}

// Type to represent a setting with a list of options to choose from.
type SettingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingId          string    `protobuf:"bytes,1,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`                            // Name of the setting (machine readable)
	SettingDescription string    `protobuf:"bytes,2,opt,name=setting_description,json=settingDescription,proto3" json:"setting_description,omitempty"` // Description of the setting (human readable)
	Options            []*Option `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`                                                 // List of options or if range [min, max] or [min, max, interval]
	IsRange            bool      `protobuf:"varint,4,opt,name=is_range,json=isRange,proto3" json:"is_range,omitempty"`                                 // If option is given as a range
}

func (x *SettingOptions) Reset() {
	*x = SettingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingOptions) ProtoMessage() {}

func (x *SettingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingOptions.ProtoReflect.Descriptor instead.
func (*SettingOptions) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{76}
}

func (x *SettingOptions) GetSettingId() string {
	if x != nil {
		return x.SettingId
	}
	return ""
}

func (x *SettingOptions) GetSettingDescription() string {
	if x != nil {
		return x.SettingDescription
	}
	return ""
}

func (x *SettingOptions) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SettingOptions) GetIsRange() bool {
	if x != nil {
		return x.IsRange
	}
	return false
}

// Type to represent a camera information.
type Information struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorName             string  `protobuf:"bytes,1,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`                                           // Name of the camera vendor
	ModelName              string  `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                              // Name of the camera model
	FocalLengthMm          float32 `protobuf:"fixed32,3,opt,name=focal_length_mm,json=focalLengthMm,proto3" json:"focal_length_mm,omitempty"`                              // Focal length
	HorizontalSensorSizeMm float32 `protobuf:"fixed32,4,opt,name=horizontal_sensor_size_mm,json=horizontalSensorSizeMm,proto3" json:"horizontal_sensor_size_mm,omitempty"` // Horizontal sensor size
	VerticalSensorSizeMm   float32 `protobuf:"fixed32,5,opt,name=vertical_sensor_size_mm,json=verticalSensorSizeMm,proto3" json:"vertical_sensor_size_mm,omitempty"`       // Vertical sensor size
	HorizontalResolutionPx uint32  `protobuf:"varint,6,opt,name=horizontal_resolution_px,json=horizontalResolutionPx,proto3" json:"horizontal_resolution_px,omitempty"`    // Horizontal image resolution in pixels
	VerticalResolutionPx   uint32  `protobuf:"varint,7,opt,name=vertical_resolution_px,json=verticalResolutionPx,proto3" json:"vertical_resolution_px,omitempty"`          // Vertical image resolution in pixels
}

func (x *Information) Reset() {
	*x = Information{}
	if protoimpl.UnsafeEnabled {
		mi := &file_camera_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Information) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Information) ProtoMessage() {}

func (x *Information) ProtoReflect() protoreflect.Message {
	mi := &file_camera_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Information.ProtoReflect.Descriptor instead.
func (*Information) Descriptor() ([]byte, []int) {
	return file_camera_proto_rawDescGZIP(), []int{77}
}

func (x *Information) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *Information) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *Information) GetFocalLengthMm() float32 {
	if x != nil {
		return x.FocalLengthMm
	}
	return 0
}

func (x *Information) GetHorizontalSensorSizeMm() float32 {
	if x != nil {
		return x.HorizontalSensorSizeMm
	}
	return 0
}

func (x *Information) GetVerticalSensorSizeMm() float32 {
	if x != nil {
		return x.VerticalSensorSizeMm
	}
	return 0
}

func (x *Information) GetHorizontalResolutionPx() uint32 {
	if x != nil {
		return x.HorizontalResolutionPx
	}
	return 0
}

func (x *Information) GetVerticalResolutionPx() uint32 {
	if x != nil {
		return x.VerticalResolutionPx
	}
	return 0
}

var File_camera_proto protoreflect.FileDescriptor

var file_camera_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x1a, 0x14, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x0f, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x11, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x3a, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x22, 0x62, 0x0a,
	0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a,
	0x19, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x13, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x39, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x38, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1a, 0x53, 0x74,
	0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3d,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a,
	0x0f, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x56, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x9f,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x57, 0x0a, 0x13, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3b, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x21, 0x0a,
	0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x69, 0x0a, 0x17, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1d, 0x0a, 0x1b, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x13, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x21, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x6c, 0x0a, 0x1e, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x5a, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x90, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x35, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x15, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a, 0x14, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x14, 0x0a, 0x12, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x13, 0x5a, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x14, 0x5a,
	0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x5a, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x10,
	0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a, 0x10, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x59, 0x0a, 0x11, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x59, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x58, 0x12, 0x1c,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x59, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x58, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x59, 0x22, 0x5e, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c,
	0x0a, 0x14, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x16, 0x0a, 0x14,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x11, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x29, 0x0a, 0x11, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x5a, 0x0a,
	0x12, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x0c, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x22, 0xe4, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x42,
	0x55, 0x53, 0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x41,
	0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x08, 0x12,
	0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x09,
	0x22, 0xb2, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x44, 0x65, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x44, 0x65, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x4d, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x4d, 0x22, 0x44, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x77, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x5d, 0x0a, 0x0a, 0x45,
	0x75, 0x6c, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x6c, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x6c,
	0x6c, 0x44, 0x65, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x69, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x79, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x79, 0x61, 0x77, 0x44, 0x65, 0x67, 0x22, 0xd7, 0x02, 0x0a, 0x0b, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x71, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x65, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x45, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x12, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x45, 0x75, 0x6c, 0x65, 0x72, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x55,
	0x74, 0x63, 0x55, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x22, 0xb1, 0x02, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x7a, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x7a,
	0x12, 0x3a, 0x0a, 0x19, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x17, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x78, 0x12, 0x36, 0x0a, 0x17,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0c, 0x62, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x76, 0x5f, 0x64, 0x65, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x46, 0x6f, 0x76, 0x44, 0x65, 0x67, 0x22, 0xde, 0x03, 0x0a, 0x0f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52,
	0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x74, 0x72,
	0x75, 0x6d, 0x22, 0x5d, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x52,
	0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x54, 0x52, 0x55, 0x4d, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x5f, 0x49,
	0x4e, 0x46, 0x52, 0x41, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x9f, 0x06, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4d, 0x69, 0x62, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4d, 0x69, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x53, 0x42, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x44,
	0x10, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xfe, 0x01, 0x22, 0x54, 0x0a, 0x06, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x13, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xd7,
	0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4d, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x6d, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d,
	0x6d, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x78, 0x2a, 0x38, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x48, 0x4f, 0x54, 0x4f,
	0x53, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x32, 0xcd, 0x1a, 0x0a, 0x0d, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x07,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x09, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x70, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x23, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x2d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x12, 0x77, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x12, 0x52, 0x0a,
	0x07, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12,
	0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x72, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x7e, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x76, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0f, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x82,
	0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18,
	0x00, 0x30, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x12, 0x64, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d,
	0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x08, 0x5a, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x5a, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x09, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64,
	0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63,
	0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x23, 0x2e,
	0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x76,
	0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x49, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x0d, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x27,
	0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x46, 0x6f, 0x63, 0x75,
	0x73, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x23, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0a, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x61,
	0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x76, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x17, 0x42, 0x0b, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x08, 0x2e, 0x3b, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_camera_proto_rawDescOnce sync.Once
	file_camera_proto_rawDescData = file_camera_proto_rawDesc
)

func file_camera_proto_rawDescGZIP() []byte {
	file_camera_proto_rawDescOnce.Do(func() {
		file_camera_proto_rawDescData = protoimpl.X.CompressGZIP(file_camera_proto_rawDescData)
	})
	return file_camera_proto_rawDescData
}

var file_camera_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_camera_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_camera_proto_goTypes = []any{
	(Mode)(0),                                      // 0: mavsdk.rpc.camera.Mode
	(PhotosRange)(0),                               // 1: mavsdk.rpc.camera.PhotosRange
	(CameraResult_Result)(0),                       // 2: mavsdk.rpc.camera.CameraResult.Result
	(VideoStreamInfo_VideoStreamStatus)(0),         // 3: mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus
	(VideoStreamInfo_VideoStreamSpectrum)(0),       // 4: mavsdk.rpc.camera.VideoStreamInfo.VideoStreamSpectrum
	(Status_StorageStatus)(0),                      // 5: mavsdk.rpc.camera.Status.StorageStatus
	(Status_StorageType)(0),                        // 6: mavsdk.rpc.camera.Status.StorageType
	(*PrepareRequest)(nil),                         // 7: mavsdk.rpc.camera.PrepareRequest
	(*PrepareResponse)(nil),                        // 8: mavsdk.rpc.camera.PrepareResponse
	(*TakePhotoRequest)(nil),                       // 9: mavsdk.rpc.camera.TakePhotoRequest
	(*TakePhotoResponse)(nil),                      // 10: mavsdk.rpc.camera.TakePhotoResponse
	(*StartPhotoIntervalRequest)(nil),              // 11: mavsdk.rpc.camera.StartPhotoIntervalRequest
	(*StartPhotoIntervalResponse)(nil),             // 12: mavsdk.rpc.camera.StartPhotoIntervalResponse
	(*StopPhotoIntervalRequest)(nil),               // 13: mavsdk.rpc.camera.StopPhotoIntervalRequest
	(*StopPhotoIntervalResponse)(nil),              // 14: mavsdk.rpc.camera.StopPhotoIntervalResponse
	(*StartVideoRequest)(nil),                      // 15: mavsdk.rpc.camera.StartVideoRequest
	(*StartVideoResponse)(nil),                     // 16: mavsdk.rpc.camera.StartVideoResponse
	(*StopVideoRequest)(nil),                       // 17: mavsdk.rpc.camera.StopVideoRequest
	(*StopVideoResponse)(nil),                      // 18: mavsdk.rpc.camera.StopVideoResponse
	(*StartVideoStreamingRequest)(nil),             // 19: mavsdk.rpc.camera.StartVideoStreamingRequest
	(*StartVideoStreamingResponse)(nil),            // 20: mavsdk.rpc.camera.StartVideoStreamingResponse
	(*StopVideoStreamingRequest)(nil),              // 21: mavsdk.rpc.camera.StopVideoStreamingRequest
	(*StopVideoStreamingResponse)(nil),             // 22: mavsdk.rpc.camera.StopVideoStreamingResponse
	(*SetModeRequest)(nil),                         // 23: mavsdk.rpc.camera.SetModeRequest
	(*SetModeResponse)(nil),                        // 24: mavsdk.rpc.camera.SetModeResponse
	(*ListPhotosRequest)(nil),                      // 25: mavsdk.rpc.camera.ListPhotosRequest
	(*ListPhotosResponse)(nil),                     // 26: mavsdk.rpc.camera.ListPhotosResponse
	(*SubscribeInformationRequest)(nil),            // 27: mavsdk.rpc.camera.SubscribeInformationRequest
	(*InformationResponse)(nil),                    // 28: mavsdk.rpc.camera.InformationResponse
	(*SubscribeModeRequest)(nil),                   // 29: mavsdk.rpc.camera.SubscribeModeRequest
	(*ModeResponse)(nil),                           // 30: mavsdk.rpc.camera.ModeResponse
	(*SubscribeVideoStreamInfoRequest)(nil),        // 31: mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest
	(*VideoStreamInfoResponse)(nil),                // 32: mavsdk.rpc.camera.VideoStreamInfoResponse
	(*SubscribeCaptureInfoRequest)(nil),            // 33: mavsdk.rpc.camera.SubscribeCaptureInfoRequest
	(*CaptureInfoResponse)(nil),                    // 34: mavsdk.rpc.camera.CaptureInfoResponse
	(*SubscribeStatusRequest)(nil),                 // 35: mavsdk.rpc.camera.SubscribeStatusRequest
	(*StatusResponse)(nil),                         // 36: mavsdk.rpc.camera.StatusResponse
	(*SubscribeCurrentSettingsRequest)(nil),        // 37: mavsdk.rpc.camera.SubscribeCurrentSettingsRequest
	(*CurrentSettingsResponse)(nil),                // 38: mavsdk.rpc.camera.CurrentSettingsResponse
	(*SubscribePossibleSettingOptionsRequest)(nil), // 39: mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest
	(*PossibleSettingOptionsResponse)(nil),         // 40: mavsdk.rpc.camera.PossibleSettingOptionsResponse
	(*SetSettingRequest)(nil),                      // 41: mavsdk.rpc.camera.SetSettingRequest
	(*SetSettingResponse)(nil),                     // 42: mavsdk.rpc.camera.SetSettingResponse
	(*GetSettingRequest)(nil),                      // 43: mavsdk.rpc.camera.GetSettingRequest
	(*GetSettingResponse)(nil),                     // 44: mavsdk.rpc.camera.GetSettingResponse
	(*FormatStorageRequest)(nil),                   // 45: mavsdk.rpc.camera.FormatStorageRequest
	(*FormatStorageResponse)(nil),                  // 46: mavsdk.rpc.camera.FormatStorageResponse
	(*SelectCameraResponse)(nil),                   // 47: mavsdk.rpc.camera.SelectCameraResponse
	(*SelectCameraRequest)(nil),                    // 48: mavsdk.rpc.camera.SelectCameraRequest
	(*ResetSettingsRequest)(nil),                   // 49: mavsdk.rpc.camera.ResetSettingsRequest
	(*ResetSettingsResponse)(nil),                  // 50: mavsdk.rpc.camera.ResetSettingsResponse
	(*ZoomInStartRequest)(nil),                     // 51: mavsdk.rpc.camera.ZoomInStartRequest
	(*ZoomInStartResponse)(nil),                    // 52: mavsdk.rpc.camera.ZoomInStartResponse
	(*ZoomOutStartRequest)(nil),                    // 53: mavsdk.rpc.camera.ZoomOutStartRequest
	(*ZoomOutStartResponse)(nil),                   // 54: mavsdk.rpc.camera.ZoomOutStartResponse
	(*ZoomStopRequest)(nil),                        // 55: mavsdk.rpc.camera.ZoomStopRequest
	(*ZoomStopResponse)(nil),                       // 56: mavsdk.rpc.camera.ZoomStopResponse
	(*ZoomRangeRequest)(nil),                       // 57: mavsdk.rpc.camera.ZoomRangeRequest
	(*ZoomRangeResponse)(nil),                      // 58: mavsdk.rpc.camera.ZoomRangeResponse
	(*TrackPointRequest)(nil),                      // 59: mavsdk.rpc.camera.TrackPointRequest
	(*TrackPointResponse)(nil),                     // 60: mavsdk.rpc.camera.TrackPointResponse
	(*TrackRectangleRequest)(nil),                  // 61: mavsdk.rpc.camera.TrackRectangleRequest
	(*TrackRectangleResponse)(nil),                 // 62: mavsdk.rpc.camera.TrackRectangleResponse
	(*TrackStopRequest)(nil),                       // 63: mavsdk.rpc.camera.TrackStopRequest
	(*TrackStopResponse)(nil),                      // 64: mavsdk.rpc.camera.TrackStopResponse
	(*FocusInStartRequest)(nil),                    // 65: mavsdk.rpc.camera.FocusInStartRequest
	(*FocusInStartResponse)(nil),                   // 66: mavsdk.rpc.camera.FocusInStartResponse
	(*FocusOutStartRequest)(nil),                   // 67: mavsdk.rpc.camera.FocusOutStartRequest
	(*FocusOutStartResponse)(nil),                  // 68: mavsdk.rpc.camera.FocusOutStartResponse
	(*FocusStopRequest)(nil),                       // 69: mavsdk.rpc.camera.FocusStopRequest
	(*FocusStopResponse)(nil),                      // 70: mavsdk.rpc.camera.FocusStopResponse
	(*FocusRangeRequest)(nil),                      // 71: mavsdk.rpc.camera.FocusRangeRequest
	(*FocusRangeResponse)(nil),                     // 72: mavsdk.rpc.camera.FocusRangeResponse
	(*CameraResult)(nil),                           // 73: mavsdk.rpc.camera.CameraResult
	(*Position)(nil),                               // 74: mavsdk.rpc.camera.Position
	(*Quaternion)(nil),                             // 75: mavsdk.rpc.camera.Quaternion
	(*EulerAngle)(nil),                             // 76: mavsdk.rpc.camera.EulerAngle
	(*CaptureInfo)(nil),                            // 77: mavsdk.rpc.camera.CaptureInfo
	(*VideoStreamSettings)(nil),                    // 78: mavsdk.rpc.camera.VideoStreamSettings
	(*VideoStreamInfo)(nil),                        // 79: mavsdk.rpc.camera.VideoStreamInfo
	(*Status)(nil),                                 // 80: mavsdk.rpc.camera.Status
	(*Option)(nil),                                 // 81: mavsdk.rpc.camera.Option
	(*Setting)(nil),                                // 82: mavsdk.rpc.camera.Setting
	(*SettingOptions)(nil),                         // 83: mavsdk.rpc.camera.SettingOptions
	(*Information)(nil),                            // 84: mavsdk.rpc.camera.Information
}
var file_camera_proto_depIdxs = []int32{
	73, // 0: mavsdk.rpc.camera.PrepareResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 1: mavsdk.rpc.camera.TakePhotoResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 2: mavsdk.rpc.camera.StartPhotoIntervalResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 3: mavsdk.rpc.camera.StopPhotoIntervalResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 4: mavsdk.rpc.camera.StartVideoResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 5: mavsdk.rpc.camera.StopVideoResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 6: mavsdk.rpc.camera.StartVideoStreamingResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 7: mavsdk.rpc.camera.StopVideoStreamingResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	0,  // 8: mavsdk.rpc.camera.SetModeRequest.mode:type_name -> mavsdk.rpc.camera.Mode
	73, // 9: mavsdk.rpc.camera.SetModeResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	1,  // 10: mavsdk.rpc.camera.ListPhotosRequest.photos_range:type_name -> mavsdk.rpc.camera.PhotosRange
	73, // 11: mavsdk.rpc.camera.ListPhotosResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	77, // 12: mavsdk.rpc.camera.ListPhotosResponse.capture_infos:type_name -> mavsdk.rpc.camera.CaptureInfo
	84, // 13: mavsdk.rpc.camera.InformationResponse.information:type_name -> mavsdk.rpc.camera.Information
	0,  // 14: mavsdk.rpc.camera.ModeResponse.mode:type_name -> mavsdk.rpc.camera.Mode
	79, // 15: mavsdk.rpc.camera.VideoStreamInfoResponse.video_stream_info:type_name -> mavsdk.rpc.camera.VideoStreamInfo
	77, // 16: mavsdk.rpc.camera.CaptureInfoResponse.capture_info:type_name -> mavsdk.rpc.camera.CaptureInfo
	80, // 17: mavsdk.rpc.camera.StatusResponse.camera_status:type_name -> mavsdk.rpc.camera.Status
	82, // 18: mavsdk.rpc.camera.CurrentSettingsResponse.current_settings:type_name -> mavsdk.rpc.camera.Setting
	83, // 19: mavsdk.rpc.camera.PossibleSettingOptionsResponse.setting_options:type_name -> mavsdk.rpc.camera.SettingOptions
	82, // 20: mavsdk.rpc.camera.SetSettingRequest.setting:type_name -> mavsdk.rpc.camera.Setting
	73, // 21: mavsdk.rpc.camera.SetSettingResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	82, // 22: mavsdk.rpc.camera.GetSettingRequest.setting:type_name -> mavsdk.rpc.camera.Setting
	73, // 23: mavsdk.rpc.camera.GetSettingResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	82, // 24: mavsdk.rpc.camera.GetSettingResponse.setting:type_name -> mavsdk.rpc.camera.Setting
	73, // 25: mavsdk.rpc.camera.FormatStorageResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 26: mavsdk.rpc.camera.SelectCameraResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 27: mavsdk.rpc.camera.ResetSettingsResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 28: mavsdk.rpc.camera.ZoomInStartResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 29: mavsdk.rpc.camera.ZoomOutStartResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 30: mavsdk.rpc.camera.ZoomStopResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 31: mavsdk.rpc.camera.ZoomRangeResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 32: mavsdk.rpc.camera.TrackPointResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 33: mavsdk.rpc.camera.TrackRectangleResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 34: mavsdk.rpc.camera.TrackStopResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 35: mavsdk.rpc.camera.FocusInStartResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 36: mavsdk.rpc.camera.FocusOutStartResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 37: mavsdk.rpc.camera.FocusStopResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	73, // 38: mavsdk.rpc.camera.FocusRangeResponse.camera_result:type_name -> mavsdk.rpc.camera.CameraResult
	2,  // 39: mavsdk.rpc.camera.CameraResult.result:type_name -> mavsdk.rpc.camera.CameraResult.Result
	74, // 40: mavsdk.rpc.camera.CaptureInfo.position:type_name -> mavsdk.rpc.camera.Position
	75, // 41: mavsdk.rpc.camera.CaptureInfo.attitude_quaternion:type_name -> mavsdk.rpc.camera.Quaternion
	76, // 42: mavsdk.rpc.camera.CaptureInfo.attitude_euler_angle:type_name -> mavsdk.rpc.camera.EulerAngle
	78, // 43: mavsdk.rpc.camera.VideoStreamInfo.settings:type_name -> mavsdk.rpc.camera.VideoStreamSettings
	3,  // 44: mavsdk.rpc.camera.VideoStreamInfo.status:type_name -> mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus
	4,  // 45: mavsdk.rpc.camera.VideoStreamInfo.spectrum:type_name -> mavsdk.rpc.camera.VideoStreamInfo.VideoStreamSpectrum
	5,  // 46: mavsdk.rpc.camera.Status.storage_status:type_name -> mavsdk.rpc.camera.Status.StorageStatus
	6,  // 47: mavsdk.rpc.camera.Status.storage_type:type_name -> mavsdk.rpc.camera.Status.StorageType
	81, // 48: mavsdk.rpc.camera.Setting.option:type_name -> mavsdk.rpc.camera.Option
	81, // 49: mavsdk.rpc.camera.SettingOptions.options:type_name -> mavsdk.rpc.camera.Option
	7,  // 50: mavsdk.rpc.camera.CameraService.Prepare:input_type -> mavsdk.rpc.camera.PrepareRequest
	9,  // 51: mavsdk.rpc.camera.CameraService.TakePhoto:input_type -> mavsdk.rpc.camera.TakePhotoRequest
	11, // 52: mavsdk.rpc.camera.CameraService.StartPhotoInterval:input_type -> mavsdk.rpc.camera.StartPhotoIntervalRequest
	13, // 53: mavsdk.rpc.camera.CameraService.StopPhotoInterval:input_type -> mavsdk.rpc.camera.StopPhotoIntervalRequest
	15, // 54: mavsdk.rpc.camera.CameraService.StartVideo:input_type -> mavsdk.rpc.camera.StartVideoRequest
	17, // 55: mavsdk.rpc.camera.CameraService.StopVideo:input_type -> mavsdk.rpc.camera.StopVideoRequest
	19, // 56: mavsdk.rpc.camera.CameraService.StartVideoStreaming:input_type -> mavsdk.rpc.camera.StartVideoStreamingRequest
	21, // 57: mavsdk.rpc.camera.CameraService.StopVideoStreaming:input_type -> mavsdk.rpc.camera.StopVideoStreamingRequest
	23, // 58: mavsdk.rpc.camera.CameraService.SetMode:input_type -> mavsdk.rpc.camera.SetModeRequest
	25, // 59: mavsdk.rpc.camera.CameraService.ListPhotos:input_type -> mavsdk.rpc.camera.ListPhotosRequest
	29, // 60: mavsdk.rpc.camera.CameraService.SubscribeMode:input_type -> mavsdk.rpc.camera.SubscribeModeRequest
	27, // 61: mavsdk.rpc.camera.CameraService.SubscribeInformation:input_type -> mavsdk.rpc.camera.SubscribeInformationRequest
	31, // 62: mavsdk.rpc.camera.CameraService.SubscribeVideoStreamInfo:input_type -> mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest
	33, // 63: mavsdk.rpc.camera.CameraService.SubscribeCaptureInfo:input_type -> mavsdk.rpc.camera.SubscribeCaptureInfoRequest
	35, // 64: mavsdk.rpc.camera.CameraService.SubscribeStatus:input_type -> mavsdk.rpc.camera.SubscribeStatusRequest
	37, // 65: mavsdk.rpc.camera.CameraService.SubscribeCurrentSettings:input_type -> mavsdk.rpc.camera.SubscribeCurrentSettingsRequest
	39, // 66: mavsdk.rpc.camera.CameraService.SubscribePossibleSettingOptions:input_type -> mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest
	41, // 67: mavsdk.rpc.camera.CameraService.SetSetting:input_type -> mavsdk.rpc.camera.SetSettingRequest
	43, // 68: mavsdk.rpc.camera.CameraService.GetSetting:input_type -> mavsdk.rpc.camera.GetSettingRequest
	45, // 69: mavsdk.rpc.camera.CameraService.FormatStorage:input_type -> mavsdk.rpc.camera.FormatStorageRequest
	48, // 70: mavsdk.rpc.camera.CameraService.SelectCamera:input_type -> mavsdk.rpc.camera.SelectCameraRequest
	49, // 71: mavsdk.rpc.camera.CameraService.ResetSettings:input_type -> mavsdk.rpc.camera.ResetSettingsRequest
	51, // 72: mavsdk.rpc.camera.CameraService.ZoomInStart:input_type -> mavsdk.rpc.camera.ZoomInStartRequest
	53, // 73: mavsdk.rpc.camera.CameraService.ZoomOutStart:input_type -> mavsdk.rpc.camera.ZoomOutStartRequest
	55, // 74: mavsdk.rpc.camera.CameraService.ZoomStop:input_type -> mavsdk.rpc.camera.ZoomStopRequest
	57, // 75: mavsdk.rpc.camera.CameraService.ZoomRange:input_type -> mavsdk.rpc.camera.ZoomRangeRequest
	59, // 76: mavsdk.rpc.camera.CameraService.TrackPoint:input_type -> mavsdk.rpc.camera.TrackPointRequest
	61, // 77: mavsdk.rpc.camera.CameraService.TrackRectangle:input_type -> mavsdk.rpc.camera.TrackRectangleRequest
	63, // 78: mavsdk.rpc.camera.CameraService.TrackStop:input_type -> mavsdk.rpc.camera.TrackStopRequest
	65, // 79: mavsdk.rpc.camera.CameraService.FocusInStart:input_type -> mavsdk.rpc.camera.FocusInStartRequest
	67, // 80: mavsdk.rpc.camera.CameraService.FocusOutStart:input_type -> mavsdk.rpc.camera.FocusOutStartRequest
	69, // 81: mavsdk.rpc.camera.CameraService.FocusStop:input_type -> mavsdk.rpc.camera.FocusStopRequest
	71, // 82: mavsdk.rpc.camera.CameraService.FocusRange:input_type -> mavsdk.rpc.camera.FocusRangeRequest
	8,  // 83: mavsdk.rpc.camera.CameraService.Prepare:output_type -> mavsdk.rpc.camera.PrepareResponse
	10, // 84: mavsdk.rpc.camera.CameraService.TakePhoto:output_type -> mavsdk.rpc.camera.TakePhotoResponse
	12, // 85: mavsdk.rpc.camera.CameraService.StartPhotoInterval:output_type -> mavsdk.rpc.camera.StartPhotoIntervalResponse
	14, // 86: mavsdk.rpc.camera.CameraService.StopPhotoInterval:output_type -> mavsdk.rpc.camera.StopPhotoIntervalResponse
	16, // 87: mavsdk.rpc.camera.CameraService.StartVideo:output_type -> mavsdk.rpc.camera.StartVideoResponse
	18, // 88: mavsdk.rpc.camera.CameraService.StopVideo:output_type -> mavsdk.rpc.camera.StopVideoResponse
	20, // 89: mavsdk.rpc.camera.CameraService.StartVideoStreaming:output_type -> mavsdk.rpc.camera.StartVideoStreamingResponse
	22, // 90: mavsdk.rpc.camera.CameraService.StopVideoStreaming:output_type -> mavsdk.rpc.camera.StopVideoStreamingResponse
	24, // 91: mavsdk.rpc.camera.CameraService.SetMode:output_type -> mavsdk.rpc.camera.SetModeResponse
	26, // 92: mavsdk.rpc.camera.CameraService.ListPhotos:output_type -> mavsdk.rpc.camera.ListPhotosResponse
	30, // 93: mavsdk.rpc.camera.CameraService.SubscribeMode:output_type -> mavsdk.rpc.camera.ModeResponse
	28, // 94: mavsdk.rpc.camera.CameraService.SubscribeInformation:output_type -> mavsdk.rpc.camera.InformationResponse
	32, // 95: mavsdk.rpc.camera.CameraService.SubscribeVideoStreamInfo:output_type -> mavsdk.rpc.camera.VideoStreamInfoResponse
	34, // 96: mavsdk.rpc.camera.CameraService.SubscribeCaptureInfo:output_type -> mavsdk.rpc.camera.CaptureInfoResponse
	36, // 97: mavsdk.rpc.camera.CameraService.SubscribeStatus:output_type -> mavsdk.rpc.camera.StatusResponse
	38, // 98: mavsdk.rpc.camera.CameraService.SubscribeCurrentSettings:output_type -> mavsdk.rpc.camera.CurrentSettingsResponse
	40, // 99: mavsdk.rpc.camera.CameraService.SubscribePossibleSettingOptions:output_type -> mavsdk.rpc.camera.PossibleSettingOptionsResponse
	42, // 100: mavsdk.rpc.camera.CameraService.SetSetting:output_type -> mavsdk.rpc.camera.SetSettingResponse
	44, // 101: mavsdk.rpc.camera.CameraService.GetSetting:output_type -> mavsdk.rpc.camera.GetSettingResponse
	46, // 102: mavsdk.rpc.camera.CameraService.FormatStorage:output_type -> mavsdk.rpc.camera.FormatStorageResponse
	47, // 103: mavsdk.rpc.camera.CameraService.SelectCamera:output_type -> mavsdk.rpc.camera.SelectCameraResponse
	50, // 104: mavsdk.rpc.camera.CameraService.ResetSettings:output_type -> mavsdk.rpc.camera.ResetSettingsResponse
	52, // 105: mavsdk.rpc.camera.CameraService.ZoomInStart:output_type -> mavsdk.rpc.camera.ZoomInStartResponse
	54, // 106: mavsdk.rpc.camera.CameraService.ZoomOutStart:output_type -> mavsdk.rpc.camera.ZoomOutStartResponse
	56, // 107: mavsdk.rpc.camera.CameraService.ZoomStop:output_type -> mavsdk.rpc.camera.ZoomStopResponse
	58, // 108: mavsdk.rpc.camera.CameraService.ZoomRange:output_type -> mavsdk.rpc.camera.ZoomRangeResponse
	60, // 109: mavsdk.rpc.camera.CameraService.TrackPoint:output_type -> mavsdk.rpc.camera.TrackPointResponse
	62, // 110: mavsdk.rpc.camera.CameraService.TrackRectangle:output_type -> mavsdk.rpc.camera.TrackRectangleResponse
	64, // 111: mavsdk.rpc.camera.CameraService.TrackStop:output_type -> mavsdk.rpc.camera.TrackStopResponse
	66, // 112: mavsdk.rpc.camera.CameraService.FocusInStart:output_type -> mavsdk.rpc.camera.FocusInStartResponse
	68, // 113: mavsdk.rpc.camera.CameraService.FocusOutStart:output_type -> mavsdk.rpc.camera.FocusOutStartResponse
	70, // 114: mavsdk.rpc.camera.CameraService.FocusStop:output_type -> mavsdk.rpc.camera.FocusStopResponse
	72, // 115: mavsdk.rpc.camera.CameraService.FocusRange:output_type -> mavsdk.rpc.camera.FocusRangeResponse
	83, // [83:116] is the sub-list for method output_type
	50, // [50:83] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_camera_proto_init() }
func file_camera_proto_init() {
	if File_camera_proto != nil {
		return
	}
	
	if !protoimpl.UnsafeEnabled {
		file_camera_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PrepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PrepareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TakePhotoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TakePhotoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*StartPhotoIntervalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*StartPhotoIntervalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*StopPhotoIntervalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*StopPhotoIntervalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StartVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StartVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*StopVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*StopVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*StartVideoStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*StartVideoStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*StopVideoStreamingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StopVideoStreamingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SetModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SetModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListPhotosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ListPhotosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*InformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeVideoStreamInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*VideoStreamInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeCaptureInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CaptureInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeCurrentSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribePossibleSettingOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*PossibleSettingOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*SetSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*SetSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*FormatStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*FormatStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*SelectCameraResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*SelectCameraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ResetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*ResetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomInStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomInStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomOutStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomOutStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*ZoomRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*TrackPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*TrackPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*TrackRectangleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*TrackRectangleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*TrackStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*TrackStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*FocusInStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*FocusInStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*FocusOutStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*FocusOutStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*FocusStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*FocusStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*FocusRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*FocusRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*CameraResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*Quaternion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*EulerAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*CaptureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*VideoStreamSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*VideoStreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*SettingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_camera_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*Information); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_camera_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_camera_proto_goTypes,
		DependencyIndexes: file_camera_proto_depIdxs,
		EnumInfos:         file_camera_proto_enumTypes,
		MessageInfos:      file_camera_proto_msgTypes,
	}.Build()
	File_camera_proto = out.File
	file_camera_proto_rawDesc = nil
	file_camera_proto_goTypes = nil
	file_camera_proto_depIdxs = nil
}
