// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: camera.proto

package camera

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CameraService_Prepare_FullMethodName                         = "/mavsdk.rpc.camera.CameraService/Prepare"
	CameraService_TakePhoto_FullMethodName                       = "/mavsdk.rpc.camera.CameraService/TakePhoto"
	CameraService_StartPhotoInterval_FullMethodName              = "/mavsdk.rpc.camera.CameraService/StartPhotoInterval"
	CameraService_StopPhotoInterval_FullMethodName               = "/mavsdk.rpc.camera.CameraService/StopPhotoInterval"
	CameraService_StartVideo_FullMethodName                      = "/mavsdk.rpc.camera.CameraService/StartVideo"
	CameraService_StopVideo_FullMethodName                       = "/mavsdk.rpc.camera.CameraService/StopVideo"
	CameraService_StartVideoStreaming_FullMethodName             = "/mavsdk.rpc.camera.CameraService/StartVideoStreaming"
	CameraService_StopVideoStreaming_FullMethodName              = "/mavsdk.rpc.camera.CameraService/StopVideoStreaming"
	CameraService_SetMode_FullMethodName                         = "/mavsdk.rpc.camera.CameraService/SetMode"
	CameraService_ListPhotos_FullMethodName                      = "/mavsdk.rpc.camera.CameraService/ListPhotos"
	CameraService_SubscribeMode_FullMethodName                   = "/mavsdk.rpc.camera.CameraService/SubscribeMode"
	CameraService_SubscribeInformation_FullMethodName            = "/mavsdk.rpc.camera.CameraService/SubscribeInformation"
	CameraService_SubscribeVideoStreamInfo_FullMethodName        = "/mavsdk.rpc.camera.CameraService/SubscribeVideoStreamInfo"
	CameraService_SubscribeCaptureInfo_FullMethodName            = "/mavsdk.rpc.camera.CameraService/SubscribeCaptureInfo"
	CameraService_SubscribeStatus_FullMethodName                 = "/mavsdk.rpc.camera.CameraService/SubscribeStatus"
	CameraService_SubscribeCurrentSettings_FullMethodName        = "/mavsdk.rpc.camera.CameraService/SubscribeCurrentSettings"
	CameraService_SubscribePossibleSettingOptions_FullMethodName = "/mavsdk.rpc.camera.CameraService/SubscribePossibleSettingOptions"
	CameraService_SetSetting_FullMethodName                      = "/mavsdk.rpc.camera.CameraService/SetSetting"
	CameraService_GetSetting_FullMethodName                      = "/mavsdk.rpc.camera.CameraService/GetSetting"
	CameraService_FormatStorage_FullMethodName                   = "/mavsdk.rpc.camera.CameraService/FormatStorage"
	CameraService_SelectCamera_FullMethodName                    = "/mavsdk.rpc.camera.CameraService/SelectCamera"
	CameraService_ResetSettings_FullMethodName                   = "/mavsdk.rpc.camera.CameraService/ResetSettings"
	CameraService_ZoomInStart_FullMethodName                     = "/mavsdk.rpc.camera.CameraService/ZoomInStart"
	CameraService_ZoomOutStart_FullMethodName                    = "/mavsdk.rpc.camera.CameraService/ZoomOutStart"
	CameraService_ZoomStop_FullMethodName                        = "/mavsdk.rpc.camera.CameraService/ZoomStop"
	CameraService_ZoomRange_FullMethodName                       = "/mavsdk.rpc.camera.CameraService/ZoomRange"
	CameraService_TrackPoint_FullMethodName                      = "/mavsdk.rpc.camera.CameraService/TrackPoint"
	CameraService_TrackRectangle_FullMethodName                  = "/mavsdk.rpc.camera.CameraService/TrackRectangle"
	CameraService_TrackStop_FullMethodName                       = "/mavsdk.rpc.camera.CameraService/TrackStop"
	CameraService_FocusInStart_FullMethodName                    = "/mavsdk.rpc.camera.CameraService/FocusInStart"
	CameraService_FocusOutStart_FullMethodName                   = "/mavsdk.rpc.camera.CameraService/FocusOutStart"
	CameraService_FocusStop_FullMethodName                       = "/mavsdk.rpc.camera.CameraService/FocusStop"
	CameraService_FocusRange_FullMethodName                      = "/mavsdk.rpc.camera.CameraService/FocusRange"
)

// CameraServiceClient is the client API for CameraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Can be used to manage cameras that implement the MAVLink
// Camera Protocol: https://mavlink.io/en/protocol/camera.html.
//
// Currently only a single camera is supported.
// When multiple cameras are supported the plugin will need to be
// instantiated separately for every camera and the camera selected using
// `select_camera`.
type CameraServiceClient interface {
	// Prepare the camera plugin (e.g. download the camera definition, etc).
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	// Take one photo.
	TakePhoto(ctx context.Context, in *TakePhotoRequest, opts ...grpc.CallOption) (*TakePhotoResponse, error)
	// Start photo timelapse with a given interval.
	StartPhotoInterval(ctx context.Context, in *StartPhotoIntervalRequest, opts ...grpc.CallOption) (*StartPhotoIntervalResponse, error)
	// Stop a running photo timelapse.
	StopPhotoInterval(ctx context.Context, in *StopPhotoIntervalRequest, opts ...grpc.CallOption) (*StopPhotoIntervalResponse, error)
	// Start a video recording.
	StartVideo(ctx context.Context, in *StartVideoRequest, opts ...grpc.CallOption) (*StartVideoResponse, error)
	// Stop a running video recording.
	StopVideo(ctx context.Context, in *StopVideoRequest, opts ...grpc.CallOption) (*StopVideoResponse, error)
	// Start video streaming.
	StartVideoStreaming(ctx context.Context, in *StartVideoStreamingRequest, opts ...grpc.CallOption) (*StartVideoStreamingResponse, error)
	// Stop current video streaming.
	StopVideoStreaming(ctx context.Context, in *StopVideoStreamingRequest, opts ...grpc.CallOption) (*StopVideoStreamingResponse, error)
	// Set camera mode.
	SetMode(ctx context.Context, in *SetModeRequest, opts ...grpc.CallOption) (*SetModeResponse, error)
	// List photos available on the camera.
	ListPhotos(ctx context.Context, in *ListPhotosRequest, opts ...grpc.CallOption) (*ListPhotosResponse, error)
	// Subscribe to camera mode updates.
	SubscribeMode(ctx context.Context, in *SubscribeModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ModeResponse], error)
	// Subscribe to camera information updates.
	SubscribeInformation(ctx context.Context, in *SubscribeInformationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InformationResponse], error)
	// Subscribe to video stream info updates.
	SubscribeVideoStreamInfo(ctx context.Context, in *SubscribeVideoStreamInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoStreamInfoResponse], error)
	// Subscribe to capture info updates.
	SubscribeCaptureInfo(ctx context.Context, in *SubscribeCaptureInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CaptureInfoResponse], error)
	// Subscribe to camera status updates.
	SubscribeStatus(ctx context.Context, in *SubscribeStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusResponse], error)
	// Get the list of current camera settings.
	SubscribeCurrentSettings(ctx context.Context, in *SubscribeCurrentSettingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CurrentSettingsResponse], error)
	// Get the list of settings that can be changed.
	SubscribePossibleSettingOptions(ctx context.Context, in *SubscribePossibleSettingOptionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PossibleSettingOptionsResponse], error)
	// Set a setting to some value.
	//
	// Only setting_id of setting and option_id of option needs to be set.
	SetSetting(ctx context.Context, in *SetSettingRequest, opts ...grpc.CallOption) (*SetSettingResponse, error)
	// Get a setting.
	//
	// Only setting_id of setting needs to be set.
	GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error)
	// Format storage (e.g. SD card) in camera.
	//
	// This will delete all content of the camera storage!
	FormatStorage(ctx context.Context, in *FormatStorageRequest, opts ...grpc.CallOption) (*FormatStorageResponse, error)
	// Select current camera .
	//
	// Bind the plugin instance to a specific camera_id
	SelectCamera(ctx context.Context, in *SelectCameraRequest, opts ...grpc.CallOption) (*SelectCameraResponse, error)
	// Reset all settings in camera.
	//
	// This will reset all camera settings to default value
	ResetSettings(ctx context.Context, in *ResetSettingsRequest, opts ...grpc.CallOption) (*ResetSettingsResponse, error)
	// Start zooming in.
	ZoomInStart(ctx context.Context, in *ZoomInStartRequest, opts ...grpc.CallOption) (*ZoomInStartResponse, error)
	// Start zooming out.
	ZoomOutStart(ctx context.Context, in *ZoomOutStartRequest, opts ...grpc.CallOption) (*ZoomOutStartResponse, error)
	// Stop zooming.
	ZoomStop(ctx context.Context, in *ZoomStopRequest, opts ...grpc.CallOption) (*ZoomStopResponse, error)
	// Zoom to value as proportion of full camera range (percentage between 0.0 and 100.0).
	ZoomRange(ctx context.Context, in *ZoomRangeRequest, opts ...grpc.CallOption) (*ZoomRangeResponse, error)
	// Track point.
	TrackPoint(ctx context.Context, in *TrackPointRequest, opts ...grpc.CallOption) (*TrackPointResponse, error)
	// Track rectangle.
	TrackRectangle(ctx context.Context, in *TrackRectangleRequest, opts ...grpc.CallOption) (*TrackRectangleResponse, error)
	// Stop tracking.
	TrackStop(ctx context.Context, in *TrackStopRequest, opts ...grpc.CallOption) (*TrackStopResponse, error)
	// Start focusing in.
	FocusInStart(ctx context.Context, in *FocusInStartRequest, opts ...grpc.CallOption) (*FocusInStartResponse, error)
	// Start focusing out.
	FocusOutStart(ctx context.Context, in *FocusOutStartRequest, opts ...grpc.CallOption) (*FocusOutStartResponse, error)
	// Stop focus.
	FocusStop(ctx context.Context, in *FocusStopRequest, opts ...grpc.CallOption) (*FocusStopResponse, error)
	// Focus with range value of full range (value between 0.0 and 100.0).
	FocusRange(ctx context.Context, in *FocusRangeRequest, opts ...grpc.CallOption) (*FocusRangeResponse, error)
}

type cameraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraServiceClient(cc grpc.ClientConnInterface) CameraServiceClient {
	return &cameraServiceClient{cc}
}

func (c *cameraServiceClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, CameraService_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) TakePhoto(ctx context.Context, in *TakePhotoRequest, opts ...grpc.CallOption) (*TakePhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TakePhotoResponse)
	err := c.cc.Invoke(ctx, CameraService_TakePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StartPhotoInterval(ctx context.Context, in *StartPhotoIntervalRequest, opts ...grpc.CallOption) (*StartPhotoIntervalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartPhotoIntervalResponse)
	err := c.cc.Invoke(ctx, CameraService_StartPhotoInterval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StopPhotoInterval(ctx context.Context, in *StopPhotoIntervalRequest, opts ...grpc.CallOption) (*StopPhotoIntervalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopPhotoIntervalResponse)
	err := c.cc.Invoke(ctx, CameraService_StopPhotoInterval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StartVideo(ctx context.Context, in *StartVideoRequest, opts ...grpc.CallOption) (*StartVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartVideoResponse)
	err := c.cc.Invoke(ctx, CameraService_StartVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StopVideo(ctx context.Context, in *StopVideoRequest, opts ...grpc.CallOption) (*StopVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopVideoResponse)
	err := c.cc.Invoke(ctx, CameraService_StopVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StartVideoStreaming(ctx context.Context, in *StartVideoStreamingRequest, opts ...grpc.CallOption) (*StartVideoStreamingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartVideoStreamingResponse)
	err := c.cc.Invoke(ctx, CameraService_StartVideoStreaming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) StopVideoStreaming(ctx context.Context, in *StopVideoStreamingRequest, opts ...grpc.CallOption) (*StopVideoStreamingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopVideoStreamingResponse)
	err := c.cc.Invoke(ctx, CameraService_StopVideoStreaming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) SetMode(ctx context.Context, in *SetModeRequest, opts ...grpc.CallOption) (*SetModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetModeResponse)
	err := c.cc.Invoke(ctx, CameraService_SetMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ListPhotos(ctx context.Context, in *ListPhotosRequest, opts ...grpc.CallOption) (*ListPhotosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPhotosResponse)
	err := c.cc.Invoke(ctx, CameraService_ListPhotos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) SubscribeMode(ctx context.Context, in *SubscribeModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ModeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[0], CameraService_SubscribeMode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeModeRequest, ModeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeModeClient = grpc.ServerStreamingClient[ModeResponse]

func (c *cameraServiceClient) SubscribeInformation(ctx context.Context, in *SubscribeInformationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InformationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[1], CameraService_SubscribeInformation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeInformationRequest, InformationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeInformationClient = grpc.ServerStreamingClient[InformationResponse]

func (c *cameraServiceClient) SubscribeVideoStreamInfo(ctx context.Context, in *SubscribeVideoStreamInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VideoStreamInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[2], CameraService_SubscribeVideoStreamInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeVideoStreamInfoRequest, VideoStreamInfoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeVideoStreamInfoClient = grpc.ServerStreamingClient[VideoStreamInfoResponse]

func (c *cameraServiceClient) SubscribeCaptureInfo(ctx context.Context, in *SubscribeCaptureInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CaptureInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[3], CameraService_SubscribeCaptureInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCaptureInfoRequest, CaptureInfoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeCaptureInfoClient = grpc.ServerStreamingClient[CaptureInfoResponse]

func (c *cameraServiceClient) SubscribeStatus(ctx context.Context, in *SubscribeStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[4], CameraService_SubscribeStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeStatusRequest, StatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeStatusClient = grpc.ServerStreamingClient[StatusResponse]

func (c *cameraServiceClient) SubscribeCurrentSettings(ctx context.Context, in *SubscribeCurrentSettingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CurrentSettingsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[5], CameraService_SubscribeCurrentSettings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCurrentSettingsRequest, CurrentSettingsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeCurrentSettingsClient = grpc.ServerStreamingClient[CurrentSettingsResponse]

func (c *cameraServiceClient) SubscribePossibleSettingOptions(ctx context.Context, in *SubscribePossibleSettingOptionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PossibleSettingOptionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CameraService_ServiceDesc.Streams[6], CameraService_SubscribePossibleSettingOptions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribePossibleSettingOptionsRequest, PossibleSettingOptionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribePossibleSettingOptionsClient = grpc.ServerStreamingClient[PossibleSettingOptionsResponse]

func (c *cameraServiceClient) SetSetting(ctx context.Context, in *SetSettingRequest, opts ...grpc.CallOption) (*SetSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSettingResponse)
	err := c.cc.Invoke(ctx, CameraService_SetSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingResponse)
	err := c.cc.Invoke(ctx, CameraService_GetSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) FormatStorage(ctx context.Context, in *FormatStorageRequest, opts ...grpc.CallOption) (*FormatStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormatStorageResponse)
	err := c.cc.Invoke(ctx, CameraService_FormatStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) SelectCamera(ctx context.Context, in *SelectCameraRequest, opts ...grpc.CallOption) (*SelectCameraResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectCameraResponse)
	err := c.cc.Invoke(ctx, CameraService_SelectCamera_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ResetSettings(ctx context.Context, in *ResetSettingsRequest, opts ...grpc.CallOption) (*ResetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetSettingsResponse)
	err := c.cc.Invoke(ctx, CameraService_ResetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ZoomInStart(ctx context.Context, in *ZoomInStartRequest, opts ...grpc.CallOption) (*ZoomInStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoomInStartResponse)
	err := c.cc.Invoke(ctx, CameraService_ZoomInStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ZoomOutStart(ctx context.Context, in *ZoomOutStartRequest, opts ...grpc.CallOption) (*ZoomOutStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoomOutStartResponse)
	err := c.cc.Invoke(ctx, CameraService_ZoomOutStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ZoomStop(ctx context.Context, in *ZoomStopRequest, opts ...grpc.CallOption) (*ZoomStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoomStopResponse)
	err := c.cc.Invoke(ctx, CameraService_ZoomStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ZoomRange(ctx context.Context, in *ZoomRangeRequest, opts ...grpc.CallOption) (*ZoomRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoomRangeResponse)
	err := c.cc.Invoke(ctx, CameraService_ZoomRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) TrackPoint(ctx context.Context, in *TrackPointRequest, opts ...grpc.CallOption) (*TrackPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackPointResponse)
	err := c.cc.Invoke(ctx, CameraService_TrackPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) TrackRectangle(ctx context.Context, in *TrackRectangleRequest, opts ...grpc.CallOption) (*TrackRectangleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackRectangleResponse)
	err := c.cc.Invoke(ctx, CameraService_TrackRectangle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) TrackStop(ctx context.Context, in *TrackStopRequest, opts ...grpc.CallOption) (*TrackStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackStopResponse)
	err := c.cc.Invoke(ctx, CameraService_TrackStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) FocusInStart(ctx context.Context, in *FocusInStartRequest, opts ...grpc.CallOption) (*FocusInStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FocusInStartResponse)
	err := c.cc.Invoke(ctx, CameraService_FocusInStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) FocusOutStart(ctx context.Context, in *FocusOutStartRequest, opts ...grpc.CallOption) (*FocusOutStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FocusOutStartResponse)
	err := c.cc.Invoke(ctx, CameraService_FocusOutStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) FocusStop(ctx context.Context, in *FocusStopRequest, opts ...grpc.CallOption) (*FocusStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FocusStopResponse)
	err := c.cc.Invoke(ctx, CameraService_FocusStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) FocusRange(ctx context.Context, in *FocusRangeRequest, opts ...grpc.CallOption) (*FocusRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FocusRangeResponse)
	err := c.cc.Invoke(ctx, CameraService_FocusRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServiceServer is the server API for CameraService service.
// All implementations must embed UnimplementedCameraServiceServer
// for forward compatibility.
//
// Can be used to manage cameras that implement the MAVLink
// Camera Protocol: https://mavlink.io/en/protocol/camera.html.
//
// Currently only a single camera is supported.
// When multiple cameras are supported the plugin will need to be
// instantiated separately for every camera and the camera selected using
// `select_camera`.
type CameraServiceServer interface {
	// Prepare the camera plugin (e.g. download the camera definition, etc).
	Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error)
	// Take one photo.
	TakePhoto(context.Context, *TakePhotoRequest) (*TakePhotoResponse, error)
	// Start photo timelapse with a given interval.
	StartPhotoInterval(context.Context, *StartPhotoIntervalRequest) (*StartPhotoIntervalResponse, error)
	// Stop a running photo timelapse.
	StopPhotoInterval(context.Context, *StopPhotoIntervalRequest) (*StopPhotoIntervalResponse, error)
	// Start a video recording.
	StartVideo(context.Context, *StartVideoRequest) (*StartVideoResponse, error)
	// Stop a running video recording.
	StopVideo(context.Context, *StopVideoRequest) (*StopVideoResponse, error)
	// Start video streaming.
	StartVideoStreaming(context.Context, *StartVideoStreamingRequest) (*StartVideoStreamingResponse, error)
	// Stop current video streaming.
	StopVideoStreaming(context.Context, *StopVideoStreamingRequest) (*StopVideoStreamingResponse, error)
	// Set camera mode.
	SetMode(context.Context, *SetModeRequest) (*SetModeResponse, error)
	// List photos available on the camera.
	ListPhotos(context.Context, *ListPhotosRequest) (*ListPhotosResponse, error)
	// Subscribe to camera mode updates.
	SubscribeMode(*SubscribeModeRequest, grpc.ServerStreamingServer[ModeResponse]) error
	// Subscribe to camera information updates.
	SubscribeInformation(*SubscribeInformationRequest, grpc.ServerStreamingServer[InformationResponse]) error
	// Subscribe to video stream info updates.
	SubscribeVideoStreamInfo(*SubscribeVideoStreamInfoRequest, grpc.ServerStreamingServer[VideoStreamInfoResponse]) error
	// Subscribe to capture info updates.
	SubscribeCaptureInfo(*SubscribeCaptureInfoRequest, grpc.ServerStreamingServer[CaptureInfoResponse]) error
	// Subscribe to camera status updates.
	SubscribeStatus(*SubscribeStatusRequest, grpc.ServerStreamingServer[StatusResponse]) error
	// Get the list of current camera settings.
	SubscribeCurrentSettings(*SubscribeCurrentSettingsRequest, grpc.ServerStreamingServer[CurrentSettingsResponse]) error
	// Get the list of settings that can be changed.
	SubscribePossibleSettingOptions(*SubscribePossibleSettingOptionsRequest, grpc.ServerStreamingServer[PossibleSettingOptionsResponse]) error
	// Set a setting to some value.
	//
	// Only setting_id of setting and option_id of option needs to be set.
	SetSetting(context.Context, *SetSettingRequest) (*SetSettingResponse, error)
	// Get a setting.
	//
	// Only setting_id of setting needs to be set.
	GetSetting(context.Context, *GetSettingRequest) (*GetSettingResponse, error)
	// Format storage (e.g. SD card) in camera.
	//
	// This will delete all content of the camera storage!
	FormatStorage(context.Context, *FormatStorageRequest) (*FormatStorageResponse, error)
	// Select current camera .
	//
	// Bind the plugin instance to a specific camera_id
	SelectCamera(context.Context, *SelectCameraRequest) (*SelectCameraResponse, error)
	// Reset all settings in camera.
	//
	// This will reset all camera settings to default value
	ResetSettings(context.Context, *ResetSettingsRequest) (*ResetSettingsResponse, error)
	// Start zooming in.
	ZoomInStart(context.Context, *ZoomInStartRequest) (*ZoomInStartResponse, error)
	// Start zooming out.
	ZoomOutStart(context.Context, *ZoomOutStartRequest) (*ZoomOutStartResponse, error)
	// Stop zooming.
	ZoomStop(context.Context, *ZoomStopRequest) (*ZoomStopResponse, error)
	// Zoom to value as proportion of full camera range (percentage between 0.0 and 100.0).
	ZoomRange(context.Context, *ZoomRangeRequest) (*ZoomRangeResponse, error)
	// Track point.
	TrackPoint(context.Context, *TrackPointRequest) (*TrackPointResponse, error)
	// Track rectangle.
	TrackRectangle(context.Context, *TrackRectangleRequest) (*TrackRectangleResponse, error)
	// Stop tracking.
	TrackStop(context.Context, *TrackStopRequest) (*TrackStopResponse, error)
	// Start focusing in.
	FocusInStart(context.Context, *FocusInStartRequest) (*FocusInStartResponse, error)
	// Start focusing out.
	FocusOutStart(context.Context, *FocusOutStartRequest) (*FocusOutStartResponse, error)
	// Stop focus.
	FocusStop(context.Context, *FocusStopRequest) (*FocusStopResponse, error)
	// Focus with range value of full range (value between 0.0 and 100.0).
	FocusRange(context.Context, *FocusRangeRequest) (*FocusRangeResponse, error)
	mustEmbedUnimplementedCameraServiceServer()
}

// UnimplementedCameraServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCameraServiceServer struct{}

func (UnimplementedCameraServiceServer) Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedCameraServiceServer) TakePhoto(context.Context, *TakePhotoRequest) (*TakePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakePhoto not implemented")
}
func (UnimplementedCameraServiceServer) StartPhotoInterval(context.Context, *StartPhotoIntervalRequest) (*StartPhotoIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPhotoInterval not implemented")
}
func (UnimplementedCameraServiceServer) StopPhotoInterval(context.Context, *StopPhotoIntervalRequest) (*StopPhotoIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPhotoInterval not implemented")
}
func (UnimplementedCameraServiceServer) StartVideo(context.Context, *StartVideoRequest) (*StartVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVideo not implemented")
}
func (UnimplementedCameraServiceServer) StopVideo(context.Context, *StopVideoRequest) (*StopVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVideo not implemented")
}
func (UnimplementedCameraServiceServer) StartVideoStreaming(context.Context, *StartVideoStreamingRequest) (*StartVideoStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVideoStreaming not implemented")
}
func (UnimplementedCameraServiceServer) StopVideoStreaming(context.Context, *StopVideoStreamingRequest) (*StopVideoStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVideoStreaming not implemented")
}
func (UnimplementedCameraServiceServer) SetMode(context.Context, *SetModeRequest) (*SetModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMode not implemented")
}
func (UnimplementedCameraServiceServer) ListPhotos(context.Context, *ListPhotosRequest) (*ListPhotosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhotos not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeMode(*SubscribeModeRequest, grpc.ServerStreamingServer[ModeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMode not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeInformation(*SubscribeInformationRequest, grpc.ServerStreamingServer[InformationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeInformation not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeVideoStreamInfo(*SubscribeVideoStreamInfoRequest, grpc.ServerStreamingServer[VideoStreamInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeVideoStreamInfo not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeCaptureInfo(*SubscribeCaptureInfoRequest, grpc.ServerStreamingServer[CaptureInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCaptureInfo not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeStatus(*SubscribeStatusRequest, grpc.ServerStreamingServer[StatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeStatus not implemented")
}
func (UnimplementedCameraServiceServer) SubscribeCurrentSettings(*SubscribeCurrentSettingsRequest, grpc.ServerStreamingServer[CurrentSettingsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCurrentSettings not implemented")
}
func (UnimplementedCameraServiceServer) SubscribePossibleSettingOptions(*SubscribePossibleSettingOptionsRequest, grpc.ServerStreamingServer[PossibleSettingOptionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePossibleSettingOptions not implemented")
}
func (UnimplementedCameraServiceServer) SetSetting(context.Context, *SetSettingRequest) (*SetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSetting not implemented")
}
func (UnimplementedCameraServiceServer) GetSetting(context.Context, *GetSettingRequest) (*GetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedCameraServiceServer) FormatStorage(context.Context, *FormatStorageRequest) (*FormatStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatStorage not implemented")
}
func (UnimplementedCameraServiceServer) SelectCamera(context.Context, *SelectCameraRequest) (*SelectCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectCamera not implemented")
}
func (UnimplementedCameraServiceServer) ResetSettings(context.Context, *ResetSettingsRequest) (*ResetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSettings not implemented")
}
func (UnimplementedCameraServiceServer) ZoomInStart(context.Context, *ZoomInStartRequest) (*ZoomInStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZoomInStart not implemented")
}
func (UnimplementedCameraServiceServer) ZoomOutStart(context.Context, *ZoomOutStartRequest) (*ZoomOutStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZoomOutStart not implemented")
}
func (UnimplementedCameraServiceServer) ZoomStop(context.Context, *ZoomStopRequest) (*ZoomStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZoomStop not implemented")
}
func (UnimplementedCameraServiceServer) ZoomRange(context.Context, *ZoomRangeRequest) (*ZoomRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZoomRange not implemented")
}
func (UnimplementedCameraServiceServer) TrackPoint(context.Context, *TrackPointRequest) (*TrackPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackPoint not implemented")
}
func (UnimplementedCameraServiceServer) TrackRectangle(context.Context, *TrackRectangleRequest) (*TrackRectangleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackRectangle not implemented")
}
func (UnimplementedCameraServiceServer) TrackStop(context.Context, *TrackStopRequest) (*TrackStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackStop not implemented")
}
func (UnimplementedCameraServiceServer) FocusInStart(context.Context, *FocusInStartRequest) (*FocusInStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FocusInStart not implemented")
}
func (UnimplementedCameraServiceServer) FocusOutStart(context.Context, *FocusOutStartRequest) (*FocusOutStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FocusOutStart not implemented")
}
func (UnimplementedCameraServiceServer) FocusStop(context.Context, *FocusStopRequest) (*FocusStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FocusStop not implemented")
}
func (UnimplementedCameraServiceServer) FocusRange(context.Context, *FocusRangeRequest) (*FocusRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FocusRange not implemented")
}
func (UnimplementedCameraServiceServer) mustEmbedUnimplementedCameraServiceServer() {}
func (UnimplementedCameraServiceServer) testEmbeddedByValue()                       {}

// UnsafeCameraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraServiceServer will
// result in compilation errors.
type UnsafeCameraServiceServer interface {
	mustEmbedUnimplementedCameraServiceServer()
}

func RegisterCameraServiceServer(s grpc.ServiceRegistrar, srv CameraServiceServer) {
	// If the following call pancis, it indicates UnimplementedCameraServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CameraService_ServiceDesc, srv)
}

func _CameraService_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_TakePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).TakePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_TakePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).TakePhoto(ctx, req.(*TakePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StartPhotoInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPhotoIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StartPhotoInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_StartPhotoInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StartPhotoInterval(ctx, req.(*StartPhotoIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StopPhotoInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPhotoIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StopPhotoInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_StopPhotoInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StopPhotoInterval(ctx, req.(*StopPhotoIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StartVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StartVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_StartVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StartVideo(ctx, req.(*StartVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StopVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StopVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_StopVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StopVideo(ctx, req.(*StopVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StartVideoStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVideoStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StartVideoStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_StartVideoStreaming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StartVideoStreaming(ctx, req.(*StartVideoStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_StopVideoStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVideoStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).StopVideoStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_StopVideoStreaming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).StopVideoStreaming(ctx, req.(*StopVideoStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_SetMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SetMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_SetMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SetMode(ctx, req.(*SetModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ListPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhotosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ListPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_ListPhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ListPhotos(ctx, req.(*ListPhotosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_SubscribeMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeMode(m, &grpc.GenericServerStream[SubscribeModeRequest, ModeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeModeServer = grpc.ServerStreamingServer[ModeResponse]

func _CameraService_SubscribeInformation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeInformationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeInformation(m, &grpc.GenericServerStream[SubscribeInformationRequest, InformationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeInformationServer = grpc.ServerStreamingServer[InformationResponse]

func _CameraService_SubscribeVideoStreamInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeVideoStreamInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeVideoStreamInfo(m, &grpc.GenericServerStream[SubscribeVideoStreamInfoRequest, VideoStreamInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeVideoStreamInfoServer = grpc.ServerStreamingServer[VideoStreamInfoResponse]

func _CameraService_SubscribeCaptureInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCaptureInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeCaptureInfo(m, &grpc.GenericServerStream[SubscribeCaptureInfoRequest, CaptureInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeCaptureInfoServer = grpc.ServerStreamingServer[CaptureInfoResponse]

func _CameraService_SubscribeStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeStatus(m, &grpc.GenericServerStream[SubscribeStatusRequest, StatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeStatusServer = grpc.ServerStreamingServer[StatusResponse]

func _CameraService_SubscribeCurrentSettings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCurrentSettingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribeCurrentSettings(m, &grpc.GenericServerStream[SubscribeCurrentSettingsRequest, CurrentSettingsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribeCurrentSettingsServer = grpc.ServerStreamingServer[CurrentSettingsResponse]

func _CameraService_SubscribePossibleSettingOptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePossibleSettingOptionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CameraServiceServer).SubscribePossibleSettingOptions(m, &grpc.GenericServerStream[SubscribePossibleSettingOptionsRequest, PossibleSettingOptionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CameraService_SubscribePossibleSettingOptionsServer = grpc.ServerStreamingServer[PossibleSettingOptionsResponse]

func _CameraService_SetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_SetSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SetSetting(ctx, req.(*SetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_GetSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).GetSetting(ctx, req.(*GetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_FormatStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).FormatStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_FormatStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).FormatStorage(ctx, req.(*FormatStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_SelectCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SelectCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_SelectCamera_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SelectCamera(ctx, req.(*SelectCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ResetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ResetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_ResetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ResetSettings(ctx, req.(*ResetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ZoomInStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoomInStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ZoomInStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_ZoomInStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ZoomInStart(ctx, req.(*ZoomInStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ZoomOutStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoomOutStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ZoomOutStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_ZoomOutStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ZoomOutStart(ctx, req.(*ZoomOutStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ZoomStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoomStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ZoomStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_ZoomStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ZoomStop(ctx, req.(*ZoomStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ZoomRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoomRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ZoomRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_ZoomRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ZoomRange(ctx, req.(*ZoomRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_TrackPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).TrackPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_TrackPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).TrackPoint(ctx, req.(*TrackPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_TrackRectangle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRectangleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).TrackRectangle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_TrackRectangle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).TrackRectangle(ctx, req.(*TrackRectangleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_TrackStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).TrackStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_TrackStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).TrackStop(ctx, req.(*TrackStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_FocusInStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FocusInStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).FocusInStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_FocusInStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).FocusInStart(ctx, req.(*FocusInStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_FocusOutStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FocusOutStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).FocusOutStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_FocusOutStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).FocusOutStart(ctx, req.(*FocusOutStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_FocusStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FocusStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).FocusStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_FocusStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).FocusStop(ctx, req.(*FocusStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_FocusRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FocusRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).FocusRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_FocusRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).FocusRange(ctx, req.(*FocusRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CameraService_ServiceDesc is the grpc.ServiceDesc for CameraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CameraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.camera.CameraService",
	HandlerType: (*CameraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _CameraService_Prepare_Handler,
		},
		{
			MethodName: "TakePhoto",
			Handler:    _CameraService_TakePhoto_Handler,
		},
		{
			MethodName: "StartPhotoInterval",
			Handler:    _CameraService_StartPhotoInterval_Handler,
		},
		{
			MethodName: "StopPhotoInterval",
			Handler:    _CameraService_StopPhotoInterval_Handler,
		},
		{
			MethodName: "StartVideo",
			Handler:    _CameraService_StartVideo_Handler,
		},
		{
			MethodName: "StopVideo",
			Handler:    _CameraService_StopVideo_Handler,
		},
		{
			MethodName: "StartVideoStreaming",
			Handler:    _CameraService_StartVideoStreaming_Handler,
		},
		{
			MethodName: "StopVideoStreaming",
			Handler:    _CameraService_StopVideoStreaming_Handler,
		},
		{
			MethodName: "SetMode",
			Handler:    _CameraService_SetMode_Handler,
		},
		{
			MethodName: "ListPhotos",
			Handler:    _CameraService_ListPhotos_Handler,
		},
		{
			MethodName: "SetSetting",
			Handler:    _CameraService_SetSetting_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _CameraService_GetSetting_Handler,
		},
		{
			MethodName: "FormatStorage",
			Handler:    _CameraService_FormatStorage_Handler,
		},
		{
			MethodName: "SelectCamera",
			Handler:    _CameraService_SelectCamera_Handler,
		},
		{
			MethodName: "ResetSettings",
			Handler:    _CameraService_ResetSettings_Handler,
		},
		{
			MethodName: "ZoomInStart",
			Handler:    _CameraService_ZoomInStart_Handler,
		},
		{
			MethodName: "ZoomOutStart",
			Handler:    _CameraService_ZoomOutStart_Handler,
		},
		{
			MethodName: "ZoomStop",
			Handler:    _CameraService_ZoomStop_Handler,
		},
		{
			MethodName: "ZoomRange",
			Handler:    _CameraService_ZoomRange_Handler,
		},
		{
			MethodName: "TrackPoint",
			Handler:    _CameraService_TrackPoint_Handler,
		},
		{
			MethodName: "TrackRectangle",
			Handler:    _CameraService_TrackRectangle_Handler,
		},
		{
			MethodName: "TrackStop",
			Handler:    _CameraService_TrackStop_Handler,
		},
		{
			MethodName: "FocusInStart",
			Handler:    _CameraService_FocusInStart_Handler,
		},
		{
			MethodName: "FocusOutStart",
			Handler:    _CameraService_FocusOutStart_Handler,
		},
		{
			MethodName: "FocusStop",
			Handler:    _CameraService_FocusStop_Handler,
		},
		{
			MethodName: "FocusRange",
			Handler:    _CameraService_FocusRange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMode",
			Handler:       _CameraService_SubscribeMode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeInformation",
			Handler:       _CameraService_SubscribeInformation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeVideoStreamInfo",
			Handler:       _CameraService_SubscribeVideoStreamInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCaptureInfo",
			Handler:       _CameraService_SubscribeCaptureInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeStatus",
			Handler:       _CameraService_SubscribeStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCurrentSettings",
			Handler:       _CameraService_SubscribeCurrentSettings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribePossibleSettingOptions",
			Handler:       _CameraService_SubscribePossibleSettingOptions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "camera.proto",
}
