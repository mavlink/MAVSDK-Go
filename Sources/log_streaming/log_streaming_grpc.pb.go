// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: log_streaming.proto

package log_streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogStreamingService_StartLogStreaming_FullMethodName        = "/mavsdk.rpc.log_streaming.LogStreamingService/StartLogStreaming"
	LogStreamingService_StopLogStreaming_FullMethodName         = "/mavsdk.rpc.log_streaming.LogStreamingService/StopLogStreaming"
	LogStreamingService_SubscribeLogStreamingRaw_FullMethodName = "/mavsdk.rpc.log_streaming.LogStreamingService/SubscribeLogStreamingRaw"
)

// LogStreamingServiceClient is the client API for LogStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provide log streaming data.
type LogStreamingServiceClient interface {
	// Start streaming logging data.
	StartLogStreaming(ctx context.Context, in *StartLogStreamingRequest, opts ...grpc.CallOption) (*StartLogStreamingResponse, error)
	// Stop streaming logging data.
	StopLogStreaming(ctx context.Context, in *StopLogStreamingRequest, opts ...grpc.CallOption) (*StopLogStreamingResponse, error)
	// Subscribe to logging messages
	SubscribeLogStreamingRaw(ctx context.Context, in *SubscribeLogStreamingRawRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogStreamingRawResponse], error)
}

type logStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamingServiceClient(cc grpc.ClientConnInterface) LogStreamingServiceClient {
	return &logStreamingServiceClient{cc}
}

func (c *logStreamingServiceClient) StartLogStreaming(ctx context.Context, in *StartLogStreamingRequest, opts ...grpc.CallOption) (*StartLogStreamingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartLogStreamingResponse)
	err := c.cc.Invoke(ctx, LogStreamingService_StartLogStreaming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamingServiceClient) StopLogStreaming(ctx context.Context, in *StopLogStreamingRequest, opts ...grpc.CallOption) (*StopLogStreamingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopLogStreamingResponse)
	err := c.cc.Invoke(ctx, LogStreamingService_StopLogStreaming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamingServiceClient) SubscribeLogStreamingRaw(ctx context.Context, in *SubscribeLogStreamingRawRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogStreamingRawResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogStreamingService_ServiceDesc.Streams[0], LogStreamingService_SubscribeLogStreamingRaw_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeLogStreamingRawRequest, LogStreamingRawResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamingService_SubscribeLogStreamingRawClient = grpc.ServerStreamingClient[LogStreamingRawResponse]

// LogStreamingServiceServer is the server API for LogStreamingService service.
// All implementations must embed UnimplementedLogStreamingServiceServer
// for forward compatibility.
//
// Provide log streaming data.
type LogStreamingServiceServer interface {
	// Start streaming logging data.
	StartLogStreaming(context.Context, *StartLogStreamingRequest) (*StartLogStreamingResponse, error)
	// Stop streaming logging data.
	StopLogStreaming(context.Context, *StopLogStreamingRequest) (*StopLogStreamingResponse, error)
	// Subscribe to logging messages
	SubscribeLogStreamingRaw(*SubscribeLogStreamingRawRequest, grpc.ServerStreamingServer[LogStreamingRawResponse]) error
	mustEmbedUnimplementedLogStreamingServiceServer()
}

// UnimplementedLogStreamingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogStreamingServiceServer struct{}

func (UnimplementedLogStreamingServiceServer) StartLogStreaming(context.Context, *StartLogStreamingRequest) (*StartLogStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartLogStreaming not implemented")
}
func (UnimplementedLogStreamingServiceServer) StopLogStreaming(context.Context, *StopLogStreamingRequest) (*StopLogStreamingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopLogStreaming not implemented")
}
func (UnimplementedLogStreamingServiceServer) SubscribeLogStreamingRaw(*SubscribeLogStreamingRawRequest, grpc.ServerStreamingServer[LogStreamingRawResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLogStreamingRaw not implemented")
}
func (UnimplementedLogStreamingServiceServer) mustEmbedUnimplementedLogStreamingServiceServer() {}
func (UnimplementedLogStreamingServiceServer) testEmbeddedByValue()                             {}

// UnsafeLogStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamingServiceServer will
// result in compilation errors.
type UnsafeLogStreamingServiceServer interface {
	mustEmbedUnimplementedLogStreamingServiceServer()
}

func RegisterLogStreamingServiceServer(s grpc.ServiceRegistrar, srv LogStreamingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogStreamingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogStreamingService_ServiceDesc, srv)
}

func _LogStreamingService_StartLogStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartLogStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamingServiceServer).StartLogStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStreamingService_StartLogStreaming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamingServiceServer).StartLogStreaming(ctx, req.(*StartLogStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamingService_StopLogStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopLogStreamingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamingServiceServer).StopLogStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStreamingService_StopLogStreaming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamingServiceServer).StopLogStreaming(ctx, req.(*StopLogStreamingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamingService_SubscribeLogStreamingRaw_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLogStreamingRawRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogStreamingServiceServer).SubscribeLogStreamingRaw(m, &grpc.GenericServerStream[SubscribeLogStreamingRawRequest, LogStreamingRawResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamingService_SubscribeLogStreamingRawServer = grpc.ServerStreamingServer[LogStreamingRawResponse]

// LogStreamingService_ServiceDesc is the grpc.ServiceDesc for LogStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.log_streaming.LogStreamingService",
	HandlerType: (*LogStreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartLogStreaming",
			Handler:    _LogStreamingService_StartLogStreaming_Handler,
		},
		{
			MethodName: "StopLogStreaming",
			Handler:    _LogStreamingService_StopLogStreaming_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeLogStreamingRaw",
			Handler:       _LogStreamingService_SubscribeLogStreamingRaw_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log_streaming.proto",
}
