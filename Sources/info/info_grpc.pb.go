// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: info.proto

package info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InfoService_GetFlightInformation_FullMethodName       = "/mavsdk.rpc.info.InfoService/GetFlightInformation"
	InfoService_GetIdentification_FullMethodName          = "/mavsdk.rpc.info.InfoService/GetIdentification"
	InfoService_GetProduct_FullMethodName                 = "/mavsdk.rpc.info.InfoService/GetProduct"
	InfoService_GetVersion_FullMethodName                 = "/mavsdk.rpc.info.InfoService/GetVersion"
	InfoService_GetSpeedFactor_FullMethodName             = "/mavsdk.rpc.info.InfoService/GetSpeedFactor"
	InfoService_SubscribeFlightInformation_FullMethodName = "/mavsdk.rpc.info.InfoService/SubscribeFlightInformation"
)

// InfoServiceClient is the client API for InfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provide information about the hardware and/or software of a system.
type InfoServiceClient interface {
	// Get flight information of the system.
	GetFlightInformation(ctx context.Context, in *GetFlightInformationRequest, opts ...grpc.CallOption) (*GetFlightInformationResponse, error)
	// Get the identification of the system.
	GetIdentification(ctx context.Context, in *GetIdentificationRequest, opts ...grpc.CallOption) (*GetIdentificationResponse, error)
	// Get product information of the system.
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	// Get the version information of the system.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// Get the speed factor of a simulation (with lockstep a simulation can run faster or slower than realtime).
	GetSpeedFactor(ctx context.Context, in *GetSpeedFactorRequest, opts ...grpc.CallOption) (*GetSpeedFactorResponse, error)
	// Subscribe to 'flight information' updates.
	SubscribeFlightInformation(ctx context.Context, in *SubscribeFlightInformationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FlightInformationResponse], error)
}

type infoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoServiceClient(cc grpc.ClientConnInterface) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) GetFlightInformation(ctx context.Context, in *GetFlightInformationRequest, opts ...grpc.CallOption) (*GetFlightInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlightInformationResponse)
	err := c.cc.Invoke(ctx, InfoService_GetFlightInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetIdentification(ctx context.Context, in *GetIdentificationRequest, opts ...grpc.CallOption) (*GetIdentificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIdentificationResponse)
	err := c.cc.Invoke(ctx, InfoService_GetIdentification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, InfoService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, InfoService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetSpeedFactor(ctx context.Context, in *GetSpeedFactorRequest, opts ...grpc.CallOption) (*GetSpeedFactorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpeedFactorResponse)
	err := c.cc.Invoke(ctx, InfoService_GetSpeedFactor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) SubscribeFlightInformation(ctx context.Context, in *SubscribeFlightInformationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FlightInformationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InfoService_ServiceDesc.Streams[0], InfoService_SubscribeFlightInformation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeFlightInformationRequest, FlightInformationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InfoService_SubscribeFlightInformationClient = grpc.ServerStreamingClient[FlightInformationResponse]

// InfoServiceServer is the server API for InfoService service.
// All implementations must embed UnimplementedInfoServiceServer
// for forward compatibility.
//
// Provide information about the hardware and/or software of a system.
type InfoServiceServer interface {
	// Get flight information of the system.
	GetFlightInformation(context.Context, *GetFlightInformationRequest) (*GetFlightInformationResponse, error)
	// Get the identification of the system.
	GetIdentification(context.Context, *GetIdentificationRequest) (*GetIdentificationResponse, error)
	// Get product information of the system.
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	// Get the version information of the system.
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// Get the speed factor of a simulation (with lockstep a simulation can run faster or slower than realtime).
	GetSpeedFactor(context.Context, *GetSpeedFactorRequest) (*GetSpeedFactorResponse, error)
	// Subscribe to 'flight information' updates.
	SubscribeFlightInformation(*SubscribeFlightInformationRequest, grpc.ServerStreamingServer[FlightInformationResponse]) error
	mustEmbedUnimplementedInfoServiceServer()
}

// UnimplementedInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInfoServiceServer struct{}

func (UnimplementedInfoServiceServer) GetFlightInformation(context.Context, *GetFlightInformationRequest) (*GetFlightInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightInformation not implemented")
}
func (UnimplementedInfoServiceServer) GetIdentification(context.Context, *GetIdentificationRequest) (*GetIdentificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentification not implemented")
}
func (UnimplementedInfoServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedInfoServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedInfoServiceServer) GetSpeedFactor(context.Context, *GetSpeedFactorRequest) (*GetSpeedFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeedFactor not implemented")
}
func (UnimplementedInfoServiceServer) SubscribeFlightInformation(*SubscribeFlightInformationRequest, grpc.ServerStreamingServer[FlightInformationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFlightInformation not implemented")
}
func (UnimplementedInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {}
func (UnimplementedInfoServiceServer) testEmbeddedByValue()                     {}

// UnsafeInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServiceServer will
// result in compilation errors.
type UnsafeInfoServiceServer interface {
	mustEmbedUnimplementedInfoServiceServer()
}

func RegisterInfoServiceServer(s grpc.ServiceRegistrar, srv InfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InfoService_ServiceDesc, srv)
}

func _InfoService_GetFlightInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetFlightInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetFlightInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetFlightInformation(ctx, req.(*GetFlightInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetIdentification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetIdentification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetIdentification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetIdentification(ctx, req.(*GetIdentificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetSpeedFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpeedFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetSpeedFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetSpeedFactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetSpeedFactor(ctx, req.(*GetSpeedFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_SubscribeFlightInformation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFlightInformationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InfoServiceServer).SubscribeFlightInformation(m, &grpc.GenericServerStream[SubscribeFlightInformationRequest, FlightInformationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InfoService_SubscribeFlightInformationServer = grpc.ServerStreamingServer[FlightInformationResponse]

// InfoService_ServiceDesc is the grpc.ServiceDesc for InfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mavsdk.rpc.info.InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlightInformation",
			Handler:    _InfoService_GetFlightInformation_Handler,
		},
		{
			MethodName: "GetIdentification",
			Handler:    _InfoService_GetIdentification_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _InfoService_GetProduct_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _InfoService_GetVersion_Handler,
		},
		{
			MethodName: "GetSpeedFactor",
			Handler:    _InfoService_GetSpeedFactor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeFlightInformation",
			Handler:       _InfoService_SubscribeFlightInformation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "info.proto",
}
