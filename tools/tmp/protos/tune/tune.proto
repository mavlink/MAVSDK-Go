syntax = "proto3";

package mavsdk.rpc.tune;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.tune";
option java_outer_classname = "TuneProto";

// Enable creating and sending a tune to be played on the system.
service TuneService {
  // Send a tune to be played by the system.
  rpc PlayTune(PlayTuneRequest) returns(PlayTuneResponse) {}
}

// An element of the tune
enum SongElement {
  SONG_ELEMENT_STYLE_LEGATO = 0; // After this element, start playing legato
  SONG_ELEMENT_STYLE_NORMAL = 1; // After this element, start playing normal
  SONG_ELEMENT_STYLE_STACCATO = 2; // After this element, start playing staccato
  SONG_ELEMENT_DURATION_1 = 3; // After this element, set the note duration to 1
  SONG_ELEMENT_DURATION_2 = 4; // After this element, set the note duration to 2
  SONG_ELEMENT_DURATION_4 = 5; // After this element, set the note duration to 4
  SONG_ELEMENT_DURATION_8 = 6; // After this element, set the note duration to 8
  SONG_ELEMENT_DURATION_16 = 7; // After this element, set the note duration to 16
  SONG_ELEMENT_DURATION_32 = 8; // After this element, set the note duration to 32
  SONG_ELEMENT_NOTE_A = 9; // Play note A
  SONG_ELEMENT_NOTE_B = 10; // Play note B
  SONG_ELEMENT_NOTE_C = 11; // Play note C
  SONG_ELEMENT_NOTE_D = 12; // Play note D
  SONG_ELEMENT_NOTE_E = 13; // Play note E
  SONG_ELEMENT_NOTE_F = 14; // Play note F
  SONG_ELEMENT_NOTE_G = 15; // Play note G
  SONG_ELEMENT_NOTE_PAUSE = 16; // Play a rest
  SONG_ELEMENT_SHARP = 17; // After this element, sharp the note (half a step up)
  SONG_ELEMENT_FLAT = 18; // After this element, flat the note (half a step down)
  SONG_ELEMENT_OCTAVE_UP = 19; // After this element, shift the note 1 octave up
  SONG_ELEMENT_OCTAVE_DOWN = 20; // After this element, shift the note 1 octave down
}

message PlayTuneRequest {
  TuneDescription tune_description = 1; // The tune to be played
}
message PlayTuneResponse {
  TuneResult tune_result = 1;
}

// Tune description, containing song elements and tempo.
message TuneDescription {
  repeated SongElement song_elements = 1; // The list of song elements (notes, pauses, ...) to be played
  int32 tempo = 2; // The tempo of the song (range: 32 - 255)
}

message TuneResult {
  // Possible results returned for tune requests.
  enum Result {
    RESULT_UNKNOWN = 0; // Unknown result
    RESULT_SUCCESS = 1; // Request succeeded
    RESULT_INVALID_TEMPO = 2; // Invalid tempo (range: 32 - 255)
    RESULT_TUNE_TOO_LONG = 3; // Invalid tune: encoded string must be at most 247 chars
    RESULT_ERROR = 4; // Failed to send the request
  }

  Result result = 1; // Result enum value
  string result_str = 2; // Human-readable English string describing the result
}
