syntax = "proto3";

package mavsdk.rpc.geofence;

option go_package = ".;geofence";
option java_outer_classname = "GeofenceProto";

// Enable setting a geofence.
service GeofenceService {
    /*
     * Upload a geofence.
     *
     * Polygons are uploaded to a drone. Once uploaded, the geofence will remain
     * on the drone even if a connection is lost.
     */
    rpc UploadGeofence(UploadGeofenceRequest) returns(UploadGeofenceResponse) {}
}

// Point type.
message Point {
    double latitude_deg = 1; // Latitude in degrees (range: -90 to +90)
    double longitude_deg = 2; // Longitude in degrees (range: -180 to +180)
}

// Polygon type.
message Polygon {
    // Geofence polygon types.
    enum FenceType {
        FENCE_TYPE_INCLUSION = 0; // Type representing an inclusion fence
        FENCE_TYPE_EXCLUSION = 1; // Type representing an exclusion fence
    }

    repeated Point points = 1; // Points defining the polygon
    FenceType fence_type = 2; // Fence type
}

message UploadGeofenceRequest {
    repeated Polygon polygons = 1; // Polygon(s) representing the geofence(s)
}

message UploadGeofenceResponse {
    GeofenceResult geofence_result = 1;
}

// Result type.
message GeofenceResult {
    // Possible results returned for geofence requests.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request succeeded
        RESULT_ERROR = 2; // Error
        RESULT_TOO_MANY_GEOFENCE_ITEMS = 3; // Too many Polygon objects in the geofence
        RESULT_BUSY = 4; // Vehicle is busy
        RESULT_TIMEOUT = 5; // Request timed out
        RESULT_INVALID_ARGUMENT = 6; // Invalid argument
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
